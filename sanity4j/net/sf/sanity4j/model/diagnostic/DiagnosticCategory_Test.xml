<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../../xslt/source-code.xsl"?>
<classDetails className="net.sf.sanity4j.model.diagnostic.DiagnosticCategory_Test" pathToRoot="../../../../../" qaVersion="1.1.1" runDate="Thu Aug 21 12:46:30 EST 2014">
<summary high="0" significant="0" moderate="0" low="0" info="0" quality="100"/>
<source>
<line>package net.sf.sanity4j.model.diagnostic; </line>
<line/>
<line>import java.util.Iterator;</line>
<line/>
<line>import junit.framework.TestCase;</line>
<line/>
<line>/**</line>
<line> * DiagnosticCategory_Test - unit tests for {@link DiagnosticCategory}. </line>
<line> * </line>
<line> * @author Yiannis Paschalidis</line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line>public class DiagnosticCategory_Test extends TestCase</line>
<line>{</line>
<line>    public void testConstructors()</line>
<line>    {</line>
<line>        DiagnosticCategory root = new DiagnosticCategory();</line>
<line>        assertNotNull(&quot;Name should not be null&quot;, root.getName());</line>
<line>        assertNull(&quot;Parent should be null&quot;, root.getParent());</line>
<line>    }</line>
<line/>
<line>    public void testAddDiagnostic()</line>
<line>    {</line>
<line>        DiagnosticCategory root = new DiagnosticCategory();</line>
<line>        assertEquals(&quot;getLevel incorrect for root&quot;, 0, root.getLevel());</line>
<line/>
<line>        addDiagnostic(root, &quot;category/subcategory&quot;);</line>
<line>        assertTrue(&quot;root should not have diagnostics&quot;, root.getDiagnostics().isEmpty());</line>
<line/>
<line>        DiagnosticCategory child = root.getSubCategories().get(0);</line>
<line>        assertEquals(&quot;Incorrect child name&quot;, &quot;category&quot;, child.getName());</line>
<line>        assertTrue(&quot;Child should not have diagnostics&quot;, child.getDiagnostics().isEmpty());</line>
<line/>
<line>        DiagnosticCategory grandChild = child.getSubCategories().get(0);</line>
<line>        assertEquals(&quot;Incorrect grandchild name&quot;, &quot;subcategory&quot;, grandChild.getName());        </line>
<line>        assertFalse(&quot;Grandchild should have a diagnostic&quot;, grandChild.getDiagnostics().isEmpty());</line>
<line>    }</line>
<line/>
<line>    public void testIsRoot()</line>
<line>    {</line>
<line>        DiagnosticCategory root = new DiagnosticCategory();</line>
<line>        assertTrue(&quot;isRoot incorrect for root&quot;, root.isRoot());</line>
<line/>
<line>        addDiagnostic(root, &quot;dummy&quot;);</line>
<line>        DiagnosticCategory child = root.getSubCategories().get(0);</line>
<line>        assertFalse(&quot;isRoot incorrect for child&quot;, child.isRoot());</line>
<line>    }</line>
<line/>
<line>    public void testGetLevel()</line>
<line>    {</line>
<line>        DiagnosticCategory root = new DiagnosticCategory();</line>
<line>        assertEquals(&quot;getLevel incorrect for root&quot;, 0, root.getLevel());</line>
<line/>
<line>        addDiagnostic(root, &quot;category/subcategory&quot;);</line>
<line>        DiagnosticCategory child = root.getSubCategories().get(0);</line>
<line>        assertEquals(&quot;getLevel incorrect for child&quot;, 1, child.getLevel());</line>
<line/>
<line>        DiagnosticCategory grandChild = child.getSubCategories().get(0);</line>
<line>        assertEquals(&quot;getLevel incorrect for child&quot;, 2, grandChild.getLevel());        </line>
<line>    }</line>
<line/>
<line>    public void testGetParent()</line>
<line>    {</line>
<line>        DiagnosticCategory root = new DiagnosticCategory();</line>
<line>        assertNull(&quot;getParent incorrect for root&quot;, root.getParent());</line>
<line/>
<line>        addDiagnostic(root, &quot;dummy&quot;);</line>
<line>        DiagnosticCategory child = root.getSubCategories().get(0);</line>
<line>        assertEquals(&quot;getParent incorrect for child&quot;, root, child.getParent());</line>
<line>    }</line>
<line/>
<line>    public void testGetDiagnosticCount()</line>
<line>    {</line>
<line>        DiagnosticCategory root = new DiagnosticCategory();</line>
<line>        addDiagnostic(root, &quot;category/subcategory&quot;, Diagnostic.SEVERITY_MODERATE);</line>
<line>        addDiagnostic(root, &quot;category&quot;, Diagnostic.SEVERITY_HIGH);</line>
<line/>
<line>        DiagnosticCategory child = root.getSubCategories().get(0);</line>
<line>        DiagnosticCategory grandChild = child.getSubCategories().get(0);</line>
<line/>
<line>        assertEquals(&quot;getDiagnosticCount incorrect for root&quot;, </line>
<line>                     2, root.getDiagnosticCount());</line>
<line>        assertEquals(&quot;getDiagnosticCount incorrect for child&quot;, </line>
<line>                     2, child.getDiagnosticCount());</line>
<line>        assertEquals(&quot;getDiagnosticCount incorrect for grandchild&quot;, </line>
<line>                     1, grandChild.getDiagnosticCount());</line>
<line/>
<line>        assertEquals(&quot;getDiagnosticCount sev=all incorrect for root&quot;, </line>
<line>                     2, root.getDiagnosticCount(Diagnostic.SEVERITY_ALL));</line>
<line>        assertEquals(&quot;getDiagnosticCount sev=all incorrect for child&quot;, </line>
<line>                     2, child.getDiagnosticCount(Diagnostic.SEVERITY_ALL));</line>
<line>        assertEquals(&quot;getDiagnosticCount sev=all incorrect for grandchild&quot;, </line>
<line>                     1, grandChild.getDiagnosticCount(Diagnostic.SEVERITY_ALL));</line>
<line/>
<line>        assertEquals(&quot;getDiagnosticCount sev=moderate incorrect for root&quot;, </line>
<line>                     1, root.getDiagnosticCount(Diagnostic.SEVERITY_MODERATE));</line>
<line>        assertEquals(&quot;getDiagnosticCount sev=moderate incorrect for child&quot;, </line>
<line>                     1, child.getDiagnosticCount(Diagnostic.SEVERITY_MODERATE));</line>
<line>        assertEquals(&quot;getDiagnosticCount sev=moderate incorrect for grandchild&quot;, </line>
<line>                     1, grandChild.getDiagnosticCount(Diagnostic.SEVERITY_MODERATE));        </line>
<line/>
<line>        assertEquals(&quot;getDiagnosticCount sev=high incorrect for root&quot;, </line>
<line>                     1, root.getDiagnosticCount(Diagnostic.SEVERITY_HIGH));</line>
<line>        assertEquals(&quot;getDiagnosticCount sev=high incorrect for child&quot;, </line>
<line>                     1, child.getDiagnosticCount(Diagnostic.SEVERITY_HIGH));</line>
<line>        assertEquals(&quot;getDiagnosticCount sev=high incorrect for grandchild&quot;, </line>
<line>                     0, grandChild.getDiagnosticCount(Diagnostic.SEVERITY_HIGH));        </line>
<line>    }</line>
<line/>
<line>    public void testSubCategoriesIterator()</line>
<line>    {</line>
<line>        DiagnosticCategory root = new DiagnosticCategory();</line>
<line>        assertEquals(&quot;getLevel incorrect for root&quot;, 0, root.getLevel());</line>
<line/>
<line>        addDiagnostic(root, &quot;category/subcategory1&quot;);</line>
<line>        addDiagnostic(root, &quot;category/subcategory2&quot;);</line>
<line/>
<line>        // Root should have one subcategory</line>
<line>        Iterator&lt;DiagnosticCategory&gt; iterator = root.subCategoriesIterator();</line>
<line>        assertTrue(&quot;Iterator should have next&quot;, iterator.hasNext());</line>
<line/>
<line>        Object next = iterator.next();</line>
<line>        assertTrue(&quot;Iterator next should be a DiagnosticCategory&quot;, </line>
<line>                   next instanceof DiagnosticCategory);</line>
<line/>
<line>        DiagnosticCategory child = (DiagnosticCategory) next; </line>
<line>        assertSame(&quot;Child's parent should be the root node&quot;, </line>
<line>                   root, child.getParent());</line>
<line/>
<line>        assertFalse(&quot;Iterator should not have next&quot;, iterator.hasNext());</line>
<line/>
<line>        // Child should have two subcategories</line>
<line>        iterator = child.subCategoriesIterator();</line>
<line>        assertTrue(&quot;Iterator should have next&quot;, iterator.hasNext());        </line>
<line>        next = iterator.next();</line>
<line>        assertTrue(&quot;Iterator should have next&quot;, iterator.hasNext());        </line>
<line>        next = iterator.next();</line>
<line>        assertFalse(&quot;Iterator should not have next&quot;, iterator.hasNext());</line>
<line>    }</line>
<line/>
<line>    private void addDiagnostic(final DiagnosticCategory parent, final String category)</line>
<line>    {</line>
<line>        addDiagnostic(parent, category, Diagnostic.SEVERITY_MODERATE);</line>
<line>    }</line>
<line/>
<line>    private void addDiagnostic(final DiagnosticCategory parent, </line>
<line>                               final String category, final int severity)</line>
<line>    {</line>
<line>        Diagnostic diag = new Diagnostic()</line>
<line>        {</line>
<line>            public String[] getCategories()</line>
<line>            {</line>
<line>                return new String[]{category};</line>
<line>            }</line>
<line>        };</line>
<line/>
<line>        diag.setSeverity(severity);</line>
<line/>
<line>        parent.addDiagnostic(diag);</line>
<line>    }</line>
<line>}</line>
</source>
</classDetails>
