<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../../xslt/source-code.xsl"?>
<classDetails className="net.sf.sanity4j.model.coverage.Coverage_Test" pathToRoot="../../../../../" qaVersion="1.1.1" runDate="Thu Aug 21 12:46:30 EST 2014">
<summary high="0" significant="0" moderate="0" low="0" info="0" quality="100"/>
<source>
<line>package net.sf.sanity4j.model.coverage; </line>
<line/>
<line>import junit.framework.TestCase;</line>
<line/>
<line>/** </line>
<line> * Coverage_Test - unit tests for {@link Coverage}. </line>
<line> * </line>
<line> * @author Yiannis Paschalidis</line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line>public class Coverage_Test extends TestCase</line>
<line>{</line>
<line>	/** Dummy Package Name 1. */</line>
<line>    private static final String PACKAGE_NAME_1 = &quot;package.one&quot;;</line>
<line>	/** Dummy Package Name 2. */</line>
<line>    private static final String PACKAGE_NAME_2 = &quot;package.two&quot;;</line>
<line>	/** Dummy Class Name 1. */</line>
<line>    private static final String CLASS_NAME_1 = PACKAGE_NAME_1 + &quot;.DummyClass&quot;;</line>
<line>	/** Dummy Class Name 2. */</line>
<line>    private static final String CLASS_NAME_2 = PACKAGE_NAME_2 + &quot;.AnotherDummyClass&quot;;</line>
<line/>
<line>    /** The Coverage to be tested. */</line>
<line>	private Coverage coverage;</line>
<line/>
<line>	public void setUp()</line>
<line>    {</line>
<line>        coverage = new Coverage();</line>
<line/>
<line>        PackageCoverage packageCoverage = new PackageCoverage(PACKAGE_NAME_1);</line>
<line>        ClassCoverage classCoverage = new ClassCoverage(CLASS_NAME_1);</line>
<line>        classCoverage.addLineCoverage(121, 0, false);</line>
<line>        classCoverage.addLineCoverage(122, 0, true);</line>
<line>        packageCoverage.addClass(classCoverage);</line>
<line>        coverage.addPackage(packageCoverage);</line>
<line/>
<line>        packageCoverage = new PackageCoverage(PACKAGE_NAME_2);</line>
<line>        classCoverage = new ClassCoverage(CLASS_NAME_2);</line>
<line>        classCoverage.addLineCoverage(123, 1, true);</line>
<line>        classCoverage.addLineCoverage(124, 2, false);</line>
<line>        packageCoverage.addClass(classCoverage);</line>
<line>        coverage.addPackage(packageCoverage);</line>
<line>    }</line>
<line/>
<line>    public void testBranchCoverageAccessors()</line>
<line>    {</line>
<line>        double branchCoverage = 12.3;</line>
<line/>
<line>        coverage.setBranchCoverage(branchCoverage);</line>
<line>        assertEquals(&quot;branchCoverage accessor incorrect&quot;, branchCoverage, coverage.getBranchCoverage(), 0.0);</line>
<line>    }</line>
<line/>
<line>    public void testLineCoverageAccessors()</line>
<line>    {</line>
<line>        double lineCoverage = 12.3;</line>
<line/>
<line>        coverage.setLineCoverage(lineCoverage);</line>
<line>        assertEquals(&quot;lineCoverage accessor incorrect&quot;, lineCoverage, coverage.getLineCoverage(), 0.0);</line>
<line>    }</line>
<line/>
<line>    public void testGetLineCount()</line>
<line>    {</line>
<line>        assertEquals(&quot;Incorrect line count returned for empty coverage&quot;, </line>
<line>                     0, new Coverage().getLineCount());</line>
<line/>
<line>        assertEquals(&quot;Incorrect line count returned&quot;, </line>
<line>                     4, coverage.getLineCount());</line>
<line>    }</line>
<line/>
<line>    public void testGetCoveredLineCount()</line>
<line>    {</line>
<line>        assertEquals(&quot;Incorrect covered line count returned for empty coverage&quot;, </line>
<line>                     0, new Coverage().getCoveredLineCount());</line>
<line/>
<line>        assertEquals(&quot;Incorrect covered line count returned&quot;, </line>
<line>                     2, coverage.getCoveredLineCount());</line>
<line>    }</line>
<line/>
<line>    public void testGetBranchCount()</line>
<line>    {</line>
<line>        assertEquals(&quot;Incorrect branch count returned for empty coverage&quot;, </line>
<line>                     0, new Coverage().getBranchCount());</line>
<line/>
<line>        assertEquals(&quot;Incorrect branch count returned&quot;, </line>
<line>                     2, coverage.getBranchCount());</line>
<line>    }</line>
<line/>
<line>    public void testGetCoveredBranchCount()</line>
<line>    {</line>
<line>        assertEquals(&quot;Incorrect covered branch count returned for empty coverage&quot;, </line>
<line>        			 0, new Coverage().getBranchCount());</line>
<line/>
<line>        assertEquals(&quot;Incorrect covered branch count returned&quot;, </line>
<line>                     1, coverage.getCoveredBranchCount());</line>
<line>    }</line>
<line/>
<line>    public void testGetPackageCoverage()</line>
<line>    {</line>
<line>        assertNull(&quot;Class coverage returned for empty coverage&quot;, </line>
<line>                   new Coverage().getPackageCoverage(PACKAGE_NAME_1));</line>
<line/>
<line>        assertNotNull(&quot;Class coverage for package 1 missing&quot;, </line>
<line>                      coverage.getPackageCoverage(PACKAGE_NAME_1));</line>
<line/>
<line>        assertNotNull(&quot;Class coverage for package 2 missing&quot;, </line>
<line>                      coverage.getPackageCoverage(PACKAGE_NAME_2));</line>
<line/>
<line>        assertNull(&quot;Class coverage returned for incorrect package name&quot;, </line>
<line>                   coverage.getClassCoverage(PACKAGE_NAME_1 + PACKAGE_NAME_2));</line>
<line>    }</line>
<line/>
<line>    public void testGetClassCoverage()</line>
<line>    {</line>
<line>        assertNull(&quot;Class coverage returned for empty coverage&quot;, </line>
<line>        		   new Coverage().getClassCoverage(CLASS_NAME_1));</line>
<line/>
<line>        assertNotNull(&quot;Class coverage for class 1 missing&quot;, </line>
<line>        		      coverage.getClassCoverage(CLASS_NAME_1));</line>
<line/>
<line>        assertNotNull(&quot;Class coverage for class 2 missing&quot;, </line>
<line>        		      coverage.getClassCoverage(CLASS_NAME_2));</line>
<line/>
<line>        assertNull(&quot;Class coverage returned for incorrect class name&quot;, </line>
<line>        		   coverage.getClassCoverage(CLASS_NAME_1 + CLASS_NAME_2));</line>
<line>    }</line>
<line>}</line>
</source>
</classDetails>
