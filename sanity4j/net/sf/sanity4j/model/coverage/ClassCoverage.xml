<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../../xslt/source-code.xsl"?>
<classDetails className="net.sf.sanity4j.model.coverage.ClassCoverage" pathToRoot="../../../../../" qaVersion="1.1.1" runDate="Thu Aug 21 12:46:30 EST 2014">
<summary high="0" significant="0" moderate="0" low="0" info="0" lineCoverage="83" branchCoverage="80" quality="100"/>
<source>
<line>package net.sf.sanity4j.model.coverage; </line>
<line/>
<line>import java.util.HashMap;</line>
<line>import java.util.Map;</line>
<line/>
<line>/** </line>
<line> * ClassCoverage - coverage information for a class.</line>
<line> * </line>
<line> * @author Yiannis Paschalidis</line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line>public class ClassCoverage extends AbstractCoverage</line>
<line>{</line>
<line>    /** The class's name (enclosing class for inner classes). */</line>
<line>    private final String className;</line>
<line/>
<line>    /** Invocation counts by line number. */</line>
<line covered="yes">    private final Map&lt;Integer, Integer&gt; invocationsByLine = new HashMap&lt;Integer, Integer&gt;();</line>
<line/>
<line>    /** Branch coverage by line number. */</line>
<line covered="yes">    private final Map&lt;Integer, Double&gt; branchCoverageByLine = new HashMap&lt;Integer, Double&gt;();</line>
<line/>
<line>    /** The number of covered lines in the class. */</line>
<line>    private int coveredLineCount;</line>
<line>    /** The number of branches in the class. */</line>
<line>    private int branchCount;</line>
<line>    /** The number of covered branches in the class. */</line>
<line>    private int coveredBranchCount;</line>
<line/>
<line>    /**</line>
<line>     * Creates a ClassCoverage.</line>
<line>     * @param className the class name</line>
<line>     */</line>
<line>    public ClassCoverage(final String className)</line>
<line covered="yes">    {</line>
<line covered="yes">        this.className = className;</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * @return the class's name</line>
<line>     */</line>
<line>    public String getClassName()</line>
<line>    {</line>
<line covered="yes">        return className;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Returns the number of invocations of the given line.</line>
<line>     * </line>
<line>     * @param lineNumber the line number</line>
<line>     * </line>
<line>     * @return the number of invocations of the given line, </line>
<line>     *         or -1 if the line was not analysed</line>
<line>     */</line>
<line>    public int getInvocationsForLine(final int lineNumber)</line>
<line>    {</line>
<line covered="yes">        Integer coverage = invocationsByLine.get(lineNumber);</line>
<line/>
<line covered="yes">        return coverage == null ? -1 : coverage.intValue();</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Returns the branch coverage percentage for the given line.</line>
<line>     * </line>
<line>     * @param lineNumber the line number</line>
<line>     * </line>
<line>     * @return the branch coverage for the given line </line>
<line>     *         or -1.0 if the line was not analysed</line>
<line>     */</line>
<line>    public double getBranchCoverageForLine(final int lineNumber)</line>
<line>    {</line>
<line covered="no">        Double coverage = branchCoverageByLine.get(lineNumber);</line>
<line/>
<line covered="no">        return coverage == null ? -1.0 : coverage.doubleValue();</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Adds coverage for a line.</line>
<line>     * </line>
<line>     * @param lineNumber the line number</line>
<line>     * @param invocationCount the invocation count</line>
<line>     * @param isBranch true if the given line is a branch</line>
<line>     */</line>
<line>    public void addLineCoverage(final int lineNumber, final int invocationCount, </line>
<line>                                final boolean isBranch)</line>
<line>    {</line>
<line covered="yes">        invocationsByLine.put(lineNumber, invocationCount);</line>
<line/>
<line covered="yes">        if (isBranch)</line>
<line>        {</line>
<line covered="yes">            branchCount++;</line>
<line/>
<line covered="yes">            if (invocationCount &gt; 0)</line>
<line>            {</line>
<line covered="yes">                coveredBranchCount++;</line>
<line>            }            </line>
<line>        }</line>
<line/>
<line covered="yes">        if (invocationCount &gt; 0)</line>
<line>        {</line>
<line covered="yes">            coveredLineCount++;</line>
<line>        }</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * Adds branch coverage for a line.</line>
<line>     * </line>
<line>     * @param lineNumber the line number</line>
<line>     * @param percentage the percentage of the branch that was covered</line>
<line>     */</line>
<line>    public void addBranchCoverage(final int lineNumber, final double percentage)</line>
<line>    {</line>
<line covered="no">        branchCoverageByLine.put(lineNumber, percentage);</line>
<line covered="no">    }</line>
<line/>
<line>    /**</line>
<line>     * @return the number of executable lines in this class</line>
<line>     */</line>
<line>    public int getLineCount()</line>
<line>    {</line>
<line covered="yes">        return invocationsByLine.size();</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @return the number of covered lines in this class</line>
<line>     */</line>
<line>    public int getCoveredLineCount()</line>
<line>    {</line>
<line covered="yes">        return coveredLineCount;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @return the number of branches in this class</line>
<line>     */</line>
<line>    public int getBranchCount()</line>
<line>    {</line>
<line covered="yes">        return branchCount;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @return the number of covered branches in this class</line>
<line>     */</line>
<line>    public int getCoveredBranchCount()</line>
<line>    {</line>
<line covered="yes">        return coveredBranchCount;</line>
<line>    }    </line>
<line>}</line>
</source>
</classDetails>
