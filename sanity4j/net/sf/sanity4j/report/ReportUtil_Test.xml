<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../xslt/source-code.xsl"?>
<classDetails className="net.sf.sanity4j.report.ReportUtil_Test" pathToRoot="../../../../" qaVersion="1.1.1" runDate="Thu Aug 21 12:46:30 EST 2014">
<summary high="0" significant="0" moderate="0" low="0" info="0" quality="100"/>
<source>
<line>package net.sf.sanity4j.report;</line>
<line/>
<line>import java.util.ArrayList;</line>
<line>import java.util.List;</line>
<line>import java.util.Map;</line>
<line/>
<line>import junit.framework.TestCase;</line>
<line>import net.sf.sanity4j.model.diagnostic.Diagnostic;</line>
<line/>
<line>/**</line>
<line> * TestReportUtil - unit tests for ReportUtil. </line>
<line> * </line>
<line> * @author Yiannis Paschalidis</line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line>public class ReportUtil_Test extends TestCase</line>
<line>{</line>
<line>    public void testGetHtmlPathToRoot()</line>
<line>    {</line>
<line>        assertEquals(&quot;Incorrect path to root for foo.html&quot;, &quot;&quot;, ReportUtil.getHtmlPathToRoot(&quot;foo.html&quot;));</line>
<line>        assertEquals(&quot;Incorrect path to root for bar/foo.html&quot;, &quot;../&quot;, ReportUtil.getHtmlPathToRoot(&quot;bar/foo.html&quot;));</line>
<line>        assertEquals(&quot;Incorrect path to root for bar/bar/foo.html&quot;, &quot;../../&quot;, ReportUtil.getHtmlPathToRoot(&quot;bar/bar/foo.html&quot;));</line>
<line>    }</line>
<line/>
<line>    public void testHtmlEscape()</line>
<line>    {</line>
<line>        assertEquals(&quot;Incorrect html escape for null string&quot;, null, ReportUtil.htmlEscape(null));</line>
<line>        assertEquals(&quot;Incorrect html escape for empty string&quot;, &quot;&quot;, ReportUtil.htmlEscape(&quot;&quot;));</line>
<line>        assertEquals(&quot;Incorrect html escape for safe string&quot;, &quot;abc&quot;, ReportUtil.htmlEscape(&quot;abc&quot;));</line>
<line>        assertEquals(&quot;Incorrect html escape for ampersand&quot;, &quot;&amp;amp;&quot;, ReportUtil.htmlEscape(&quot;&amp;&quot;));</line>
<line>        assertEquals(&quot;Incorrect html escape for less than&quot;, &quot;&amp;lt;&quot;, ReportUtil.htmlEscape(&quot;&lt;&quot;));</line>
<line>        assertEquals(&quot;Incorrect html escape for greater than&quot;, &quot;&amp;gt;&quot;, ReportUtil.htmlEscape(&quot;&gt;&quot;));</line>
<line>        assertEquals(&quot;Incorrect html escape for double quote&quot;, &quot;&amp;quot;&quot;, ReportUtil.htmlEscape(&quot;\&quot;&quot;));</line>
<line>        assertEquals(&quot;Incorrect html escape for mixed string&quot;, </line>
<line>                     &quot;&amp;lt;hello &amp;amp; world!&amp;gt;&quot;, ReportUtil.htmlEscape(&quot;&lt;hello &amp; world!&gt;&quot;));</line>
<line>    }</line>
<line/>
<line>    public void testMapDiagnosticsByClassName()</line>
<line>    {</line>
<line>        Map&lt;String, List&lt;Diagnostic&gt;&gt; map = ReportUtil.mapDiagnosticsByClassName(new ArrayList&lt;Diagnostic&gt;(0));</line>
<line>        assertTrue(&quot;Map should be empty if there are no diagnostics&quot;, map.isEmpty());</line>
<line/>
<line>        // Add three diagnostics for class 1, and two for class 2</line>
<line>        String className1 = &quot;package.subpackage1.ClassName&quot;; </line>
<line>        String className2 = &quot;package.subpackage2.ClassName&quot;;</line>
<line>        List&lt;Diagnostic&gt; diagnostics = new ArrayList&lt;Diagnostic&gt;();</line>
<line/>
<line>        Diagnostic class1Diag1 = new Diagnostic();</line>
<line>        class1Diag1.setClassName(className1);</line>
<line>        diagnostics.add(class1Diag1);</line>
<line/>
<line>        Diagnostic class1Diag2 = new Diagnostic();</line>
<line>        class1Diag2.setClassName(className1);</line>
<line>        diagnostics.add(class1Diag2);</line>
<line/>
<line>        Diagnostic class1Diag3 = new Diagnostic();</line>
<line>        class1Diag3.setClassName(className1);</line>
<line>        diagnostics.add(class1Diag3);</line>
<line/>
<line>        Diagnostic class2Diag1 = new Diagnostic();</line>
<line>        class2Diag1.setClassName(className2);</line>
<line>        diagnostics.add(class2Diag1);</line>
<line/>
<line>        Diagnostic class2Diag2 = new Diagnostic();</line>
<line>        class2Diag2.setClassName(className2);</line>
<line>        diagnostics.add(class2Diag2);</line>
<line/>
<line>        map = ReportUtil.mapDiagnosticsByClassName(diagnostics);</line>
<line>        assertEquals(&quot;Map should have two entries&quot;, 2, map.size());</line>
<line/>
<line>        List&lt;Diagnostic&gt; diagsForClass1 = map.get(className1);</line>
<line>        List&lt;Diagnostic&gt; diagsForClass2 = map.get(className2);</line>
<line/>
<line>        assertEquals(&quot;Incorrect number of diagnostics for class 1&quot;, 3, diagsForClass1.size());</line>
<line>        assertEquals(&quot;Incorrect number of diagnostics for class 2&quot;, 2, diagsForClass2.size());</line>
<line/>
<line>        assertTrue(&quot;Map for class one missing diagnostic 1&quot;, diagsForClass1.contains(class1Diag1));</line>
<line>        assertTrue(&quot;Map for class one missing diagnostic 2&quot;, diagsForClass1.contains(class1Diag2));</line>
<line>        assertTrue(&quot;Map for class one missing diagnostic 3&quot;, diagsForClass1.contains(class1Diag3));</line>
<line/>
<line>        assertTrue(&quot;Map for class two missing diagnostic 1&quot;, diagsForClass2.contains(class2Diag1));</line>
<line>        assertTrue(&quot;Map for class two missing diagnostic 2&quot;, diagsForClass2.contains(class2Diag2));</line>
<line>    }</line>
<line/>
<line>    public void testGetRelativeSourcePath()</line>
<line>    {</line>
<line>        assertEquals(&quot;Incorrect relative path for src/foo.java&quot;, </line>
<line>                     &quot;foo.xml&quot;, ReportUtil.getRelativeSourcePath(&quot;src&quot;, &quot;src/foo.java&quot;));</line>
<line>        assertEquals(&quot;Incorrect path to root for src/bar/foo.java&quot;, </line>
<line>                     &quot;bar/foo.xml&quot;, ReportUtil.getRelativeSourcePath(&quot;src&quot;, &quot;src/bar/foo.java&quot;));</line>
<line/>
<line>        try</line>
<line>        {</line>
<line>            ReportUtil.getRelativeSourcePath(&quot;src&quot;, &quot;bar/bar/foo.html&quot;);</line>
<line>            fail(&quot;Should throw an IllegalArgumentException for files outside the source directory&quot;);</line>
<line>        }</line>
<line>        catch (IllegalArgumentException expected)</line>
<line>        {            </line>
<line>            assertNotNull(&quot;Thrown exception should have a message&quot;, expected.getMessage());</line>
<line>        }</line>
<line>    }</line>
<line>}</line>
</source>
</classDetails>
