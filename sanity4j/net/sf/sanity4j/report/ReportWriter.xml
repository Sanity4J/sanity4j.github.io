<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../xslt/source-code.xsl"?>
<classDetails className="net.sf.sanity4j.report.ReportWriter" pathToRoot="../../../../" qaVersion="1.1.1" runDate="Thu Aug 21 12:46:30 EST 2014">
<summary high="0" significant="0" moderate="0" low="1" info="2" lineCoverage="0" branchCoverage="0" quality="99"/>
<source>
<line>package net.sf.sanity4j.report;</line>
<line/>
<line>import java.io.File;</line>
<line>import java.io.IOException;</line>
<line>import java.util.ArrayList;</line>
<line>import java.util.Collections;</line>
<line>import java.util.Date;</line>
<line>import java.util.HashMap;</line>
<line>import java.util.List;</line>
<line>import java.util.Map;</line>
<line/>
<line>import net.sf.sanity4j.model.diagnostic.Diagnostic;</line>
<line>import net.sf.sanity4j.model.diagnostic.DiagnosticSet;</line>
<line>import net.sf.sanity4j.util.ExtractStats;</line>
<line>import net.sf.sanity4j.util.FileUtil;</line>
<line>import net.sf.sanity4j.util.QAException;</line>
<line>import net.sf.sanity4j.util.QaLogger;</line>
<line>import net.sf.sanity4j.workflow.QAConfig;</line>
<line>import net.sf.sanity4j.workflow.QAProcessor;</line>
<line/>
<line/>
<line>/**</line>
<line> * ReportWriter - utility class to write the combined report.</line>
<line> * </line>
<line> * @author Yiannis Paschalidis</line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line>public class ReportWriter</line>
<line>{</line>
<line>    /** A list of package names that need to be written. */</line>
<line covered="no">    private final List&lt;String&gt; packages = new ArrayList&lt;String&gt;();</line>
<line/>
<line>    /** A list of source file paths that need to be written. */</line>
<line covered="no">    private final List&lt;String&gt; sources = new ArrayList&lt;String&gt;();</line>
<line/>
<line>    /** Source file paths, keyed by their package name. */</line>
<line covered="no">    private final Map&lt;String, List&lt;String&gt;&gt; sourcesByPackage = new HashMap&lt;String, List&lt;String&gt;&gt;();</line>
<line/>
<line>    /** The diagnostics that we are writing. */</line>
<line>    private final ExtractStats stats;</line>
<line/>
<line>    /** Whether or not diagnostics should be printed first or last. */</line>
<line>    private final boolean diagnosticsFirst;</line>
<line/>
<line>    /** The destination directory. */</line>
<line>    private final File reportDir;</line>
<line/>
<line>    /**</line>
<line>     * Creates a ReportWriter.</line>
<line>     * </line>
<line>     * @param stats the stats utility containing the results</line>
<line>     * @param diagnosticsFirst flag for diagnostics first</line>
<line>     * @param reportDir the base directory for the report</line>
<line>     */</line>
<line>    public ReportWriter(final ExtractStats stats, final boolean diagnosticsFirst, final File reportDir)</line>
<line covered="no">    {</line>
<line covered="no">        this.stats = stats;</line>
<line covered="no">        this.diagnosticsFirst = diagnosticsFirst;</line>
<line covered="no">        this.reportDir = reportDir;</line>
<line covered="no">    }</line>
<line/>
<line>    /**</line>
<line>     * Produces the combined report in the given directory.</line>
<line>     * </line>
<line>     * @param config The configuration object for the Sanity4J tool.</line>
<line>     * @throws IOException if there is an error writing any file.</line>
<line>     */</line>
<line>    public void produceReport(final QAConfig config) throws IOException</line>
<line>    {</line>
<line covered="no">        findSourceFiles(new File(stats.getSourceDirectory()));</line>
<line/>
<line covered="no">        Collections.sort(packages);</line>
<line covered="no">        Collections.sort(sources);</line>
<line/>
<line covered="no">        if (!reportDir.exists() &amp;&amp; !reportDir.mkdirs())</line>
<line>        {</line>
<line covered="no">            throw new IOException(&quot;Failed to create report directory: &quot; + reportDir);</line>
<line>        }</line>
<line/>
<line>        // Write export</line>
<line covered="no">        QaLogger.getInstance().debug(&quot;Writing export&quot;);</line>
<line covered="no">        ExportWriter writer = new ExportWriter(stats, reportDir, sourcesByPackage);</line>
<line covered="no">        writer.writeExport();</line>
<line/>
<line>        // Set up the default frames</line>
<line covered="no">        QaLogger.getInstance().debug(&quot;Extracting static content&quot;);</line>
<line covered="no">        ExtractStaticContent.extractContent(config, reportDir, &quot;ExtractStaticContent.properties&quot;);</line>
<line/>
<line covered="no">        writePackagesFrame();</line>
<line/>
<line>        // Write rule catalogue</line>
<line covered="no">        QaLogger.getInstance().debug(&quot;Writing rule catalogue&quot;);</line>
<line covered="no">        RuleCatalogueWriter ruleCatalogueWriter = new RuleCatalogueWriter(reportDir);</line>
<line covered="no">        ruleCatalogueWriter.writeRuleCatalogue();</line>
<line/>
<line>        // Write categories</line>
<line covered="no">        QaLogger.getInstance().debug(&quot;Writing top-level categories&quot;);</line>
<line covered="no">        CategoryWriter categoryWriter = new CategoryWriter(stats, reportDir);</line>
<line covered="no">        categoryWriter.writeCategories(null);</line>
<line/>
<line>        // Write packages</line>
<line covered="no">        QaLogger.getInstance().debug(&quot;Writing top-level package summary&quot;);</line>
<line covered="no">        PackageWriter packageWriter = new PackageWriter(stats, reportDir, sourcesByPackage);</line>
<line covered="no">        packageWriter.writePackage(&quot;&quot;); // write top-level package</line>
<line/>
<line covered="no">        for (String packageName : packages)</line>
<line>        {</line>
<line covered="no">            QaLogger.getInstance().debug(&quot;Writing package &quot; + packageName);</line>
<line covered="no">            packageWriter.writePackage(packageName);</line>
<line>        }</line>
<line/>
<line>        // Write sources</line>
<line covered="no">        JavaSourceWriter sourceWriter = new JavaSourceWriter(stats, diagnosticsFirst, reportDir);</line>
<line/>
<line covered="no">        for (String sourceName : sources)</line>
<line>        {</line>
<line covered="no">            QaLogger.getInstance().debug(&quot;Writing source for &quot; + sourceName);</line>
<line covered="no">            sourceWriter.writeSourceFile(sourceName);</line>
<line>        }</line>
<line/>
<line covered="no">        QaLogger.getInstance().info(&quot;Report generated successfully in &quot; + reportDir);</line>
<line covered="no">    }</line>
<line/>
<line>    /** </line>
<line>     * Build up the list of packages, source files and </line>
<line>     * source files by package.</line>
<line>     * </line>
<line>     * @param base the directory to search</line>
<line>     */</line>
<line>    private void findSourceFiles(final File base)</line>
<line>    {</line>
<line>        // Determine package name</line>
<line covered="no">        String packageName = stats.getPackageName(base.getPath());</line>
<line covered="no">        boolean packageAdded = false;</line>
<line/>
<line covered="no">        List&lt;String&gt; sourcesForPackage = null;</line>
<line/>
<line>        // Iterate for all files and sub-dirs</line>
<line covered="no">        File[] files = base.listFiles();</line>
<line/>
<line covered="no">        if (files != null)</line>
<line>        {</line>
<line covered="no">            for (int i = 0; i &lt; files.length; i++)</line>
<line>            {</line>
<line covered="no">                if (files[i].isDirectory())</line>
<line>                {</line>
<line covered="no">                    findSourceFiles(files[i]);</line>
<line>                }</line>
<line covered="no">                else if (files[i].isFile() &amp;&amp; files[i].getName().toLowerCase().endsWith(&quot;.java&quot;))</line>
<line>                {</line>
<line covered="no">                    String filePath = null;</line>
<line/>
<line>                    try</line>
<line>                    {</line>
<line covered="no">                        filePath = files[i].getCanonicalPath();</line>
<line>                    }</line>
<line covered="no">                    catch (IOException e)</line>
<line>                    {</line>
<line covered="no">                        throw new QAException(&quot;Failed to get canonical path for &quot; + files[i].getPath(), e);</line>
<line covered="no">                    }</line>
<line/>
<line covered="no">                    sources.add(filePath);</line>
<line/>
<line sev="0" covered="no"><diag id="563"/>                    if (!packageAdded)</line>
<line sev="0">                    {</line>
<line sev="0" covered="no">                        packages.add(packageName);</line>
<line sev="0" covered="no">                        packageAdded = true;</line>
<line sev="0"/>
<line sev="0" covered="no"><diag id="564"/>                        sourcesForPackage = new ArrayList&lt;String&gt;();</line>
<line sev="0" covered="no">                        sourcesByPackage.put(packageName, sourcesForPackage);</line>
<line sev="0">                    }</line>
<line/>
<line covered="no">                    sourcesForPackage.add(filePath);</line>
<line>                }</line>
<line>            }</line>
<line>        }</line>
<line/>
<line covered="no">        if (sourcesForPackage != null)</line>
<line>        {</line>
<line covered="no">            Collections.sort(sourcesForPackage);</line>
<line>        }</line>
<line covered="no">    }</line>
<line/>
<line>    /**</line>
<line>     * Writes the packages frame.</line>
<line>     * </line>
<line>     * @throws IOException if there is an error writing any of the package frame files</line>
<line>     */</line>
<line>    private void writePackagesFrame() throws IOException</line>
<line>    {</line>
<line sev="1" covered="no"><diag id="565"/>        StringBuffer html = new StringBuffer();</line>
<line/>
<line>        // Write top-level package summary info        </line>
<line covered="no">        html.append(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot;</line>
<line>                  + &quot;&lt;?xml-stylesheet type=\&quot;text/xsl\&quot; href=\&quot;xslt/overview-frame.xsl\&quot;?&gt;\n&quot;        </line>
<line>                  + &quot;&lt;packages qaVersion=\&quot;&quot;).append(QAProcessor.QA_VERSION)</line>
<line>            .append(&quot;\&quot; runDate=\&quot;&quot;).append(new Date()).append(&quot;\&quot;&gt;\n&quot;);</line>
<line/>
<line covered="no">        for (String packageName : packages)</line>
<line>        {</line>
<line covered="no">            DiagnosticSet diagsForPackage = stats.getDiagnostics().getDiagnosticsForPackage(packageName);</line>
<line/>
<line covered="no">            html.append(&quot;&lt;package name=\&quot;&quot;).append(packageName)</line>
<line>                .append(&quot;\&quot; high=\&quot;&quot;).append(diagsForPackage.getCountForSeverity(Diagnostic.SEVERITY_HIGH))</line>
<line>                .append(&quot;\&quot; significant=\&quot;&quot;).append(diagsForPackage.getCountForSeverity(Diagnostic.SEVERITY_SIGNIFICANT))</line>
<line>                .append(&quot;\&quot; moderate=\&quot;&quot;).append(diagsForPackage.getCountForSeverity(Diagnostic.SEVERITY_MODERATE))</line>
<line>                .append(&quot;\&quot; low=\&quot;&quot;).append(diagsForPackage.getCountForSeverity(Diagnostic.SEVERITY_LOW))</line>
<line>                .append(&quot;\&quot; info=\&quot;&quot;).append(diagsForPackage.getCountForSeverity(Diagnostic.SEVERITY_INFO))</line>
<line>                .append(&quot;\&quot;/&gt;\n&quot;);</line>
<line covered="no">        }</line>
<line/>
<line covered="no">        html.append(&quot;&lt;/packages&gt;\n&quot;);</line>
<line/>
<line covered="no">        File destFile = new File(reportDir, &quot;overview-frame.xml&quot;);</line>
<line covered="no">        FileUtil.writeToFile(html.toString(), destFile);</line>
<line/>
<line covered="no">    }</line>
<line>}</line>
</source>
<diags first="false">
<diag id="563" sev="0" tool="PMD" rule="AvoidDeeplyNestedIfStmts">
Deeply nested if..then statements are hard to read
</diag>
<diag id="564" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="565" sev="1" tool="PMD" rule="InsufficientStringBufferDeclaration">
StringBuffer constructor is initialized with size 16, but has at least 250 characters appended.
</diag>
</diags>
</classDetails>
