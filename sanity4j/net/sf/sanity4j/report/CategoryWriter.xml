<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../xslt/source-code.xsl"?>
<classDetails className="net.sf.sanity4j.report.CategoryWriter" pathToRoot="../../../../" qaVersion="1.1.1" runDate="Thu Aug 21 12:46:30 EST 2014">
<summary high="0" significant="0" moderate="0" low="5" info="3" lineCoverage="0" branchCoverage="0" quality="94"/>
<source>
<line sev="0"><diag id="231"/>package net.sf.sanity4j.report;</line>
<line/>
<line>import java.io.File;</line>
<line>import java.io.IOException;</line>
<line>import java.util.ArrayList;</line>
<line>import java.util.Collections;</line>
<line>import java.util.Date;</line>
<line>import java.util.HashMap;</line>
<line>import java.util.Iterator;</line>
<line>import java.util.List;</line>
<line>import java.util.Map;</line>
<line/>
<line>import net.sf.sanity4j.model.diagnostic.Diagnostic;</line>
<line>import net.sf.sanity4j.model.diagnostic.DiagnosticCategory;</line>
<line>import net.sf.sanity4j.model.diagnostic.DiagnosticSet;</line>
<line>import net.sf.sanity4j.util.ExtractStats;</line>
<line>import net.sf.sanity4j.util.FileUtil;</line>
<line>import net.sf.sanity4j.util.StringUtil;</line>
<line>import net.sf.sanity4j.workflow.QAProcessor;</line>
<line/>
<line/>
<line>/**</line>
<line> * CategoryWriter writes diagnostics by category.</line>
<line> *  </line>
<line> * @author Yiannis Paschalidis</line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line>public class CategoryWriter </line>
<line>{</line>
<line>    /** The diagnostics that we are writing. */</line>
<line>    private final ExtractStats stats;</line>
<line/>
<line>    /** The destination directory. */</line>
<line>    private final File reportDir;</line>
<line/>
<line>    /**</line>
<line>     * Creates a category writer for the given stats.</line>
<line>     * </line>
<line>     * @param stats the stats utility containing the results</line>
<line>     * @param reportDir the base directory for the report</line>
<line>     */</line>
<line>    public CategoryWriter(final ExtractStats stats, final File reportDir)</line>
<line covered="no">    {</line>
<line covered="no">        this.stats = stats;</line>
<line covered="no">        this.reportDir = reportDir;</line>
<line covered="no">    }</line>
<line/>
<line>    /**</line>
<line>     * Writes the output for a package to e.g. &quot;com/foobar/mypackage/package-by-category.xml&quot;</line>
<line>     * </line>
<line>     * @param packageName the package name</line>
<line>     * @throws IOException if there is an error writing to the file</line>
<line>     */</line>
<line>    public void writeCategories(final String packageName) throws IOException</line>
<line>    {</line>
<line covered="no">        String fileName = &quot;package-by-category.xml&quot;;</line>
<line/>
<line covered="no">        if (packageName != null)</line>
<line>        {</line>
<line covered="no">        	StringBuffer buf = new StringBuffer();</line>
<line covered="no">        	buf.append(packageName.replace('.', File.separatorChar))</line>
<line>        		.append(File.separatorChar)</line>
<line>        		.append(fileName);</line>
<line/>
<line covered="no">            fileName = buf.toString();  </line>
<line>        }</line>
<line/>
<line covered="no">        String summary = generateCategoryPage(packageName);       </line>
<line covered="no">        FileUtil.writeToFile(summary, new File(reportDir, fileName));</line>
<line covered="no">    }       </line>
<line/>
<line>    /**</line>
<line>     * Generates the category XML.</line>
<line>     * </line>
<line>     * @param packageName the package name, or null to create a summary for all packages.</line>
<line>     * @return the generated XML</line>
<line>     */</line>
<line>    private String generateCategoryPage(final String packageName)</line>
<line>    {</line>
<line>        // For the package name com.bar.foo, we need &quot;../../../&quot;</line>
<line covered="no">        String pathToRoot = StringUtil.empty(packageName) </line>
<line>                          ? &quot;&quot; </line>
<line>                          : (packageName.replaceAll(&quot;[^\\.]&quot;, &quot;&quot;).replaceAll(&quot;\\.&quot;, &quot;../&quot;) + &quot;../&quot;);</line>
<line/>
<line sev="1" covered="no"><diag id="479"/>        StringBuffer xml = new StringBuffer();</line>
<line/>
<line>        // Write top-level package summary info        </line>
<line sev="1" covered="no"><diag id="480"/>        xml.append(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot;)</line>
<line sev="1"><diag id="481"/>           .append(&quot;&lt;?xml-stylesheet type=\&quot;text/xsl\&quot; href=\&quot;&quot;).append(pathToRoot).append(&quot;xslt/package-by-category.xsl\&quot;?&gt;\n&quot;)        </line>
<line>           .append(&quot;&lt;packageByCategory packageName=\&quot;&quot;).append(packageName == null ? &quot;&quot; : packageName).append(&quot;\&quot; pathToRoot=\&quot;&quot;)</line>
<line>           .append(pathToRoot).append(&quot;\&quot; qaVersion=\&quot;&quot;).append(QAProcessor.QA_VERSION)</line>
<line sev="1"><diag id="482"/>           .append(&quot;\&quot; runDate=\&quot;&quot;).append(new Date()).append(&quot;\&quot;&gt;\n&quot;);</line>
<line/>
<line>        // Get diagnostics for the given package</line>
<line covered="no">        DiagnosticSet diags = stats.getDiagnostics();</line>
<line/>
<line covered="no">        if (!StringUtil.empty(packageName))</line>
<line>        {</line>
<line covered="no">            diags = diags.getDiagnosticsForPackage(packageName);</line>
<line>        }</line>
<line/>
<line>        // Build up categories &amp; generate XML</line>
<line covered="no">        DiagnosticCategory category = new DiagnosticCategory();</line>
<line/>
<line covered="no">        for (Iterator&lt;Diagnostic&gt; i = diags.iterator(); i.hasNext();)</line>
<line>        {</line>
<line covered="no">            category.addDiagnostic(i.next());</line>
<line>        }               </line>
<line/>
<line covered="no">        generateCategoryDetails(category, xml);</line>
<line/>
<line covered="no">        xml.append(&quot;&lt;/packageByCategory&gt;\n&quot;); </line>
<line/>
<line covered="no">        return xml.toString();</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Generates category details XML.</line>
<line>     * </line>
<line>     * @param category the Diagnostic category</line>
<line>     * @param xml the string buffer to append the XML output to</line>
<line>     */</line>
<line>    private void generateCategoryDetails(final DiagnosticCategory category, </line>
<line>                                          final StringBuffer xml)</line>
<line>    {</line>
<line covered="no">        xml.append(&quot;&lt;category name=\&quot;&quot;).append(category.getName()).append(&quot;\&quot;&gt;\n&quot;);</line>
<line/>
<line>        // Output diagnostics (if any)</line>
<line covered="no">        Map&lt;String, List&lt;Diagnostic&gt;&gt; diagnosticsByRuleName = new HashMap&lt;String, List&lt;Diagnostic&gt;&gt;();</line>
<line/>
<line sev="1" covered="no"><diag id="771"/>        for (Diagnostic diagnostic : category.getDiagnostics())</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            String key = diagnostic.getRuleName();</line>
<line sev="1"/>
<line sev="1" covered="no">            if (key == null)</line>
<line sev="1">            {</line>
<line sev="1" covered="no">                key = &quot;(none)&quot;;</line>
<line sev="1">            }</line>
<line sev="1"/>
<line sev="1" covered="no">            List&lt;Diagnostic&gt; list = diagnosticsByRuleName.get(key);</line>
<line sev="1"/>
<line sev="1" covered="no">            if (list == null)</line>
<line sev="1">            {</line>
<line sev="1" covered="no"><diag id="483"/>                list = new ArrayList&lt;Diagnostic&gt;();</line>
<line sev="1" covered="no">                diagnosticsByRuleName.put(key, list);</line>
<line sev="1">            }</line>
<line sev="1"/>
<line sev="1" covered="no">            list.add(diagnostic);</line>
<line sev="1" covered="no">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        List&lt;String&gt; ruleNames = new ArrayList&lt;String&gt;(diagnosticsByRuleName.keySet());</line>
<line sev="1" covered="no">        Collections.sort(ruleNames);</line>
<line sev="1"/>
<line sev="1">        // Output diagnostics (if any)</line>
<line sev="1" covered="no">        for (String ruleName : ruleNames)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            List&lt;Diagnostic&gt; diagnosticsForRule = diagnosticsByRuleName.get(ruleName);</line>
<line sev="1" covered="no">            Diagnostic firstDiag = diagnosticsForRule.get(0);</line>
<line sev="1"/>
<line covered="no">            xml.append(&quot;&lt;rule name=\&quot;&quot;).append(ruleName)</line>
<line>               .append(&quot;\&quot; tool=\&quot;&quot;).append(firstDiag.getSourceDescription())</line>
<line>               .append(&quot;\&quot; severity=\&quot;&quot;).append(firstDiag.getSeverity())</line>
<line>               .append(&quot;\&quot;&gt;\n&quot;);</line>
<line/>
<line covered="no">            Map&lt;String, List&lt;Diagnostic&gt;&gt; diagnosticsByClassName = ReportUtil.mapDiagnosticsByClassName(diagnosticsForRule); </line>
<line sev="0" covered="no"><diag id="484"/>            List&lt;String&gt; classNames = new ArrayList&lt;String&gt;(diagnosticsByClassName.keySet());</line>
<line covered="no">            Collections.sort(classNames);</line>
<line/>
<line covered="no">            for (String className : classNames)</line>
<line>            {</line>
<line covered="no">                xml.append(&quot;&lt;class name=\&quot;&quot;).append(className).append(&quot;\&quot;&gt;\n&quot;);</line>
<line/>
<line covered="no">                for (Diagnostic diag : diagnosticsByClassName.get(className))</line>
<line>                {</line>
<line covered="no">                    xml.append(&quot;&lt;diag id=\&quot;&quot;).append(diag.getId()).append(&quot;\&quot;/&gt;\n&quot;);</line>
<line>                }</line>
<line/>
<line covered="no">                xml.append(&quot;&lt;/class&gt;\n&quot;);</line>
<line>            }</line>
<line/>
<line covered="no">            xml.append(&quot;&lt;/rule&gt;\n&quot;);</line>
<line covered="no">        }       </line>
<line/>
<line>        // Output subcategories (if any)</line>
<line covered="no">        for (Iterator&lt;DiagnosticCategory&gt; i = category.subCategoriesIterator(); i.hasNext();)</line>
<line>        {</line>
<line covered="no">            DiagnosticCategory subCategory = i.next();</line>
<line covered="no">            generateCategoryDetails(subCategory, xml);</line>
<line covered="no">        }</line>
<line/>
<line covered="no">        xml.append(&quot;&lt;/category&gt;\n&quot;);</line>
<line covered="no">    }       </line>
<line>}</line>
</source>
<diags first="false">
<diag id="231" sev="0" tool="Checkstyle" rule="JavadocPackageCheck">Missing package-info.java file.</diag>
<diag id="479" sev="1" tool="PMD" rule="InsufficientStringBufferDeclaration">
StringBuffer constructor is initialized with size 16, but has at least 224 characters appended.
</diag>
<diag id="480" sev="1" tool="PMD" rule="ConsecutiveLiteralAppends">
StringBuffer (or StringBuilder).append is called 2 consecutive times with literal Strings. Use a single append with a single combined String.
</diag>
<diag id="481" sev="1" tool="PMD" rule="ConsecutiveLiteralAppends">
StringBuffer (or StringBuilder).append is called 2 consecutive times with literal Strings. Use a single append with a single combined String.
</diag>
<diag id="482" sev="1" tool="PMD" rule="AvoidDuplicateLiterals">
The String literal &quot;\&quot;&gt;\n&quot; appears 4 times in this file; the first occurrence is on line 92
</diag>
<diag id="771" sev="1" tool="PMD-CPD" rule="DoNotCopyAndPasteCode">Duplicate of net\sf\sanity4j\report\PackageWriter.java:
        for (Diagnostic diagnostic : category.getDiagnostics())
        {
            String key = diagnostic.getRuleName();
            
            if (key == null)
            {
                key = &quot;(none)&quot;;
            }
            
            List&lt;Diagnostic&gt; list = diagnosticsByRuleName.get(key);
            
            if (list == null)
            {
                list = new ArrayList&lt;Diagnostic&gt;();
                diagnosticsByRuleName.put(key, list);
            }
            
            list.add(diagnostic);
        }
        
        List&lt;String&gt; ruleNames = new ArrayList&lt;String&gt;(diagnosticsByRuleName.keySet());
        Collections.sort(ruleNames);
        
        // Output diagnostics (if any)
        for (String ruleName : ruleNames)
        {
            List&lt;Diagnostic&gt; diagnosticsForRule = diagnosticsByRuleName.get(ruleName);
            Diagnostic firstDiag = diagnosticsForRule.get(0);</diag>
<diag id="483" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="484" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
</diags>
</classDetails>
