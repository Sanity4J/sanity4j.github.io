<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../xslt/source-code.xsl"?>
<classDetails className="net.sf.sanity4j.report.ChartFactory" pathToRoot="../../../../" qaVersion="1.1.1" runDate="Thu Aug 21 12:46:30 EST 2014">
<summary high="0" significant="0" moderate="0" low="1" info="1" lineCoverage="93" branchCoverage="66" quality="98"/>
<source>
<line>package net.sf.sanity4j.report; </line>
<line/>
<line>import java.awt.BasicStroke;</line>
<line>import java.awt.Color;</line>
<line>import java.awt.image.BufferedImage;</line>
<line>import java.text.SimpleDateFormat;</line>
<line/>
<line>import net.sf.sanity4j.model.summary.PackageSummary;</line>
<line/>
<line>import org.jfree.chart.JFreeChart;</line>
<line>import org.jfree.chart.axis.DateAxis;</line>
<line>import org.jfree.chart.plot.XYPlot;</line>
<line>import org.jfree.chart.renderer.xy.XYItemRenderer;</line>
<line>import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;</line>
<line>import org.jfree.data.time.Second;</line>
<line>import org.jfree.data.time.TimeSeries;</line>
<line>import org.jfree.data.time.TimeSeriesCollection;</line>
<line>import org.jfree.data.xy.XYDataset;</line>
<line>import org.jfree.ui.RectangleInsets;</line>
<line/>
<line/>
<line>/** </line>
<line> * ChartFactory - factory for creating charts.</line>
<line> * </line>
<line> * @author Yiannis Paschalidis </line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line>public final class ChartFactory</line>
<line>{</line>
<line>    /** The width of the generated chart, in pixels. */</line>
<line>    private static final int IMAGE_WIDTH = 600;</line>
<line/>
<line>    /** The height of the generated chart, in pixels. */</line>
<line>    private static final int IMAGE_HEIGHT = 400;</line>
<line/>
<line>    /** The maximum number of data points before data point markers are turned off. */</line>
<line>    private static final int MAX_RUNS_FOR_SHAPES = 20;</line>
<line/>
<line>    /** The inset. */</line>
<line>    private static final double INSET = 5.0;</line>
<line/>
<line>    /** One hundred. */</line>
<line>    private static final double HUNDRED = 100.0;</line>
<line/>
<line>    /** ChartFactory should never be instantiated. */</line>
<line>    private ChartFactory()</line>
<line covered="no">    {</line>
<line covered="no">    }</line>
<line/>
<line>    /**</line>
<line>     * Creates the chart data set.</line>
<line>     * </line>
<line>     * @param summaries the PackageSummaries for the current and historical runs </line>
<line>     * @return the chart Dataset</line>
<line>     */</line>
<line>    private static XYDataset createDataset(final PackageSummary[] summaries)</line>
<line>    {</line>
<line covered="yes">        TimeSeries lineCoverage = new TimeSeries(&quot;Line coverage&quot;, Second.class);</line>
<line covered="yes">        TimeSeries branchCoverage = new TimeSeries(&quot;Branch coverage&quot;, Second.class);</line>
<line covered="yes">        TimeSeries quality = new TimeSeries(&quot;Quality&quot;, Second.class);</line>
<line/>
<line covered="yes">        for (int i = 0; i &lt; summaries.length; i++)</line>
<line>        {</line>
<line sev="0" covered="yes"><diag id="485"/>            Second second = new Second(summaries[i].getRunDate());</line>
<line/>
<line covered="yes">            lineCoverage.addOrUpdate(second, HUNDRED * summaries[i].getLineCoverage());</line>
<line covered="yes">            branchCoverage.addOrUpdate(second, HUNDRED * summaries[i].getBranchCoverage());</line>
<line/>
<line covered="yes">            double qualityValue = ReportUtil.evaluateMetric(&quot;quality&quot;, summaries[i]);</line>
<line covered="yes">            quality.addOrUpdate(second, HUNDRED * qualityValue);</line>
<line>        }</line>
<line/>
<line covered="yes">        TimeSeriesCollection dataset = new TimeSeriesCollection();</line>
<line covered="yes">        dataset.addSeries(lineCoverage);</line>
<line covered="yes">        dataset.addSeries(branchCoverage);</line>
<line covered="yes">        dataset.addSeries(quality);</line>
<line/>
<line covered="yes">        return dataset;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Creates a chart for the given package and run summaries.</line>
<line>     * </line>
<line>     * @param summaries the PackageSummaries for the current and historical runs </line>
<line>     * @param packageName the package name</line>
<line>     * </line>
<line>     * @return A chart.</line>
<line>     */</line>
<line>    private static JFreeChart createChart(final PackageSummary[] summaries, </line>
<line>                                          final String packageName)</line>
<line>    {</line>
<line covered="yes">        XYDataset dataset = createDataset(summaries);</line>
<line covered="yes">        String title = packageName.length() == 0 ? &quot;Summary for all packages&quot;</line>
<line>                                                 : &quot;Summary for &quot; + packageName + '*';</line>
<line/>
<line sev="1" covered="yes"><diag id="755"/>        JFreeChart chart = org.jfree.chart.ChartFactory.createTimeSeriesChart(</line>
<line sev="1">          title,	  // title</line>
<line sev="1">          &quot;Date&quot;,     // x-axis label</line>
<line sev="1">          &quot;%&quot;,   	  // y-axis label</line>
<line sev="1">          dataset,    // data</line>
<line sev="1">          true,       // create legend?</line>
<line sev="1">          false,      // generate tooltips?</line>
<line sev="1">          false       // generate URLs?</line>
<line sev="1">        );</line>
<line sev="1"/>
<line sev="1" covered="yes">        chart.setBackgroundPaint(Color.white);</line>
<line sev="1"/>
<line sev="1" covered="yes">        XYPlot plot = (XYPlot) chart.getPlot();</line>
<line sev="1" covered="yes">        plot.setBackgroundPaint(Color.lightGray);</line>
<line sev="1" covered="yes">        plot.setDomainGridlinePaint(Color.white);</line>
<line sev="1" covered="yes">        plot.setRangeGridlinePaint(Color.white);</line>
<line sev="1" covered="yes">        plot.setAxisOffset(new RectangleInsets(INSET, INSET, INSET, INSET));</line>
<line sev="1" covered="yes">        plot.setDomainCrosshairVisible(true);</line>
<line sev="1" covered="yes">        plot.setRangeCrosshairVisible(true);</line>
<line sev="1"/>
<line sev="1" covered="yes">        XYItemRenderer renderer = plot.getRenderer();</line>
<line sev="1"/>
<line sev="1" covered="partial">        if (renderer instanceof XYLineAndShapeRenderer)</line>
<line sev="1">        {</line>
<line sev="1" covered="yes">            XYLineAndShapeRenderer shapeRenderer = (XYLineAndShapeRenderer) renderer;</line>
<line sev="1"/>
<line sev="1">            // If there are too many runs, don't draw shapes on the lines as it clutters up the graph</line>
<line sev="1" covered="partial">            boolean showShapes = dataset.getSeriesCount() &gt; 0 &amp;&amp; dataset.getItemCount(0) &lt;= MAX_RUNS_FOR_SHAPES; </line>
<line sev="1" covered="yes">            shapeRenderer.setBaseShapesFilled(true);</line>
<line sev="1" covered="yes">            shapeRenderer.setBaseShapesVisible(showShapes);</line>
<line sev="1"/>
<line sev="1" covered="partial">            if (!showShapes)</line>
<line sev="1">            {</line>
<line sev="1" covered="no">                renderer.setBaseStroke(new BasicStroke(2f, BasicStroke.JOIN_ROUND, BasicStroke.JOIN_BEVEL));</line>
<line sev="1">            }</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="yes">        DateAxis axis = (DateAxis) plot.getDomainAxis();</line>
<line sev="1" covered="yes">        axis.setDateFormatOverride(new SimpleDateFormat(&quot;dd/MM/yy&quot;));</line>
<line sev="1"/>
<line sev="1" covered="yes">        plot.getRangeAxis().setAutoRange(false);</line>
<line sev="1" covered="yes">        plot.getRangeAxis().setLowerBound(0.0);</line>
<line sev="1" covered="yes">        plot.getRangeAxis().setUpperBound(HUNDRED);</line>
<line sev="1"/>
<line sev="1" covered="yes">        return chart;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Creates a chart image.</line>
<line sev="1">     * </line>
<line sev="1">     * @param summaries the PackageSummaries for the current and historical runs </line>
<line sev="1">     * @param packageName the package name</line>
<line sev="1">     * </line>
<line sev="1">     * @return an Image showing the summary for the given package</line>
<line sev="1">     */</line>
<line sev="1">    public static BufferedImage createImage(final PackageSummary[] summaries, final String packageName)</line>
<line sev="1">    {</line>
<line covered="yes">        JFreeChart chart = createChart(summaries, packageName);</line>
<line covered="yes">        return chart.createBufferedImage(IMAGE_WIDTH, IMAGE_HEIGHT);</line>
<line>    }</line>
<line>}</line>
</source>
<diags first="false">
<diag id="485" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="755" sev="1" tool="PMD-CPD" rule="DoNotCopyAndPasteCode">Duplicate of net\sf\sanity4j\report\CrossProjectChartCreator.java:
        JFreeChart chart = org.jfree.chart.ChartFactory.createTimeSeriesChart(
          title,	  // title
          &quot;Date&quot;,     // x-axis label
          &quot;%&quot;,   	  // y-axis label
          dataset,    // data
          true,       // create legend?
          false,      // generate tooltips?
          false       // generate URLs?
        );

        chart.setBackgroundPaint(Color.white);

        XYPlot plot = (XYPlot) chart.getPlot();
        plot.setBackgroundPaint(Color.lightGray);
        plot.setDomainGridlinePaint(Color.white);
        plot.setRangeGridlinePaint(Color.white);
        plot.setAxisOffset(new RectangleInsets(INSET, INSET, INSET, INSET));
        plot.setDomainCrosshairVisible(true);
        plot.setRangeCrosshairVisible(true);
        
        XYItemRenderer renderer = plot.getRenderer();
        
        if (renderer instanceof XYLineAndShapeRenderer)
        {
            XYLineAndShapeRenderer shapeRenderer = (XYLineAndShapeRenderer) renderer;
            
            // If there are too many runs, don't draw shapes on the lines as it clutters up the graph
            boolean showShapes = dataset.getSeriesCount() &gt; 0 &amp;&amp; dataset.getItemCount(0) &lt;= MAX_RUNS_FOR_SHAPES; 
            shapeRenderer.setBaseShapesFilled(true);
            shapeRenderer.setBaseShapesVisible(showShapes);
            
            if (!showShapes)
            {
                renderer.setBaseStroke(new BasicStroke(2f, BasicStroke.JOIN_ROUND, BasicStroke.JOIN_BEVEL));
            }
        }

        DateAxis axis = (DateAxis) plot.getDomainAxis();
        axis.setDateFormatOverride(new SimpleDateFormat(&quot;dd/MM/yy&quot;));
        
        plot.getRangeAxis().setAutoRange(false);
        plot.getRangeAxis().setLowerBound(0.0);
        plot.getRangeAxis().setUpperBound(HUNDRED);

        return chart;
    }
    
    /**
     * Creates a chart image.
     * 
     * @param summaries the PackageSummaries for the current and historical runs 
     * @param packageName the package name
     * 
     * @return an Image showing the summary for the given package
     */
    public static BufferedImage createImage(final PackageSummary[] summaries, final String packageName)</diag>
</diags>
</classDetails>
