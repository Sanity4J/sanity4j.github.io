<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../../xslt/source-code.xsl"?>
<classDetails className="net.sf.sanity4j.workflow.tool.PmdResultReader" pathToRoot="../../../../../" qaVersion="1.1.1" runDate="Thu Aug 21 12:46:30 EST 2014">
<summary high="0" significant="0" moderate="1" low="1" info="3" lineCoverage="43" branchCoverage="50" quality="96"/>
<source>
<line>package net.sf.sanity4j.workflow.tool;</line>
<line/>
<line>import java.io.ByteArrayOutputStream;</line>
<line>import java.io.File;</line>
<line>import java.io.FileInputStream;</line>
<line>import java.io.IOException;</line>
<line>import java.io.PrintStream;</line>
<line>import java.util.List;</line>
<line>import java.util.Properties;</line>
<line/>
<line>import net.sf.sanity4j.gen.pmd_4_2_1.Pmd;</line>
<line>import net.sf.sanity4j.gen.pmd_4_2_1.Suppressedviolation;</line>
<line>import net.sf.sanity4j.gen.pmd_4_2_1.Violation;</line>
<line>import net.sf.sanity4j.model.diagnostic.Diagnostic;</line>
<line>import net.sf.sanity4j.model.diagnostic.DiagnosticFactory;</line>
<line>import net.sf.sanity4j.model.diagnostic.DiagnosticSet;</line>
<line>import net.sf.sanity4j.util.ExtractStats;</line>
<line>import net.sf.sanity4j.util.JaxbMarshaller;</line>
<line>import net.sf.sanity4j.util.QAException;</line>
<line/>
<line>/**</line>
<line> * PmdResultReader - Translates PMD results into the common format used by the QA tool.</line>
<line> * </line>
<line> * @author Yiannis Paschalidis</line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line covered="yes">public final class PmdResultReader implements ResultReader</line>
<line>{</line>
<line>    /** The size of the internal copy buffer. */</line>
<line>    private static final int BUFFER_SIZE = 4096;</line>
<line/>
<line>    /** The properties used to configure this {@link ResultReader}. */</line>
<line covered="yes">    private final Properties properties = new Properties();</line>
<line/>
<line>    /** The ExtractStats to add the results to. */</line>
<line>    private ExtractStats stats;</line>
<line/>
<line>    /** The PMD XML result file to read from. */</line>
<line>    private File pmdResultFile;</line>
<line/>
<line>    /**</line>
<line>     *  Retrieve the contents of a file as a String.  If an IOException is encountered, return the stack trace as the result.</line>
<line>     *  </line>
<line>     *  @param file The file whose contents are to be read.</line>
<line>     *  </line>
<line>     *  @return A String representing the contents of the given &lt;em&gt;file&lt;/em&gt;</line>
<line>     */</line>
<line>    private static String fileToString(final File file)</line>
<line>    {</line>
<line covered="no">        String string = &quot;&quot;;</line>
<line covered="no">        FileInputStream fis = null;</line>
<line/>
<line>        try</line>
<line>        {</line>
<line covered="no">            byte[] buffer = new byte[BUFFER_SIZE];</line>
<line covered="no">            fis = new FileInputStream(file);</line>
<line covered="no">            ByteArrayOutputStream baos = new ByteArrayOutputStream();</line>
<line covered="no">            int read = fis.read(buffer);</line>
<line/>
<line covered="no">            while (read &gt; 0)</line>
<line>            {</line>
<line covered="no">                baos.write(buffer, 0, read);</line>
<line covered="no">                read = fis.read(buffer);</line>
<line>            }</line>
<line/>
<line sev="0" covered="no"><diag id="377"/>            string = new String(baos.toByteArray());</line>
<line>        }</line>
<line covered="no">        catch (IOException ioe)</line>
<line>        {</line>
<line covered="no">            ByteArrayOutputStream baos = new ByteArrayOutputStream();</line>
<line sev="0" covered="no"><diag id="376"/>            PrintStream stream = new PrintStream(baos);</line>
<line covered="no">            stream.flush();</line>
<line sev="0" covered="no"><diag id="378"/>            string = new String(baos.toByteArray());</line>
<line>        }</line>
<line>        finally </line>
<line>        {</line>
<line covered="no">            if (fis != null)</line>
<line>            {</line>
<line>                try</line>
<line>                {</line>
<line covered="no">                    fis.close();</line>
<line>                }</line>
<line sev="2" covered="no"><diag id="750"/>                catch (IOException ioe)</line>
<line sev="2"><diag id="328"/>                {</line>
<line sev="2">                    // Ignore</line>
<line sev="2" covered="no">                }</line>
<line>            }</line>
<line>        }</line>
<line/>
<line covered="no">        return string;</line>
<line>    }</line>
<line/>
<line>    /** {@inheritDoc} */</line>
<line>    public void setProperties(final Properties properties)</line>
<line>    {</line>
<line covered="no">        this.properties.putAll(properties);</line>
<line covered="no">    }</line>
<line/>
<line>    /** {@inheritDoc} */</line>
<line>    public void setResultFile(final File resultFile)</line>
<line>    {</line>
<line covered="yes">        this.pmdResultFile = resultFile;</line>
<line covered="yes">    }</line>
<line/>
<line>    /** {@inheritDoc} */</line>
<line>    public void setStats(final ExtractStats stats)</line>
<line>    {</line>
<line covered="yes">        this.stats = stats;</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * Extracts the PMD statistics from the pmdResultFile.</line>
<line>     */</line>
<line>    public void run()</line>
<line>    {</line>
<line covered="yes">        DiagnosticFactory diagnosticFactory = DiagnosticFactory.getInstance(properties);</line>
<line covered="yes">        DiagnosticSet diagnostics = stats.getDiagnostics();</line>
<line/>
<line covered="yes">        Pmd result = null;</line>
<line/>
<line>        try</line>
<line>        {</line>
<line covered="yes">            result = (Pmd) JaxbMarshaller.unmarshal(pmdResultFile, &quot;net.sf.sanity4j.gen.pmd_4_2_1&quot;,</line>
<line>                                                    &quot;http://net.sf.sanity4j/namespace/pmd-4.2.1&quot;);</line>
<line>        }</line>
<line covered="no">        catch (Exception e)</line>
<line>        {</line>
<line covered="no">            String content = fileToString(pmdResultFile);</line>
<line covered="no">            throw new QAException(&quot;Error parsing PMD Result file [&quot; + pmdResultFile + &quot;] [&quot; + content + &quot;]&quot;, e);</line>
<line covered="yes">        }</line>
<line/>
<line covered="yes">        List&lt;net.sf.sanity4j.gen.pmd_4_2_1.File&gt; files = result.getFile();</line>
<line/>
<line covered="yes">        for (net.sf.sanity4j.gen.pmd_4_2_1.File file : files)</line>
<line>        {</line>
<line covered="yes">            for (Violation violation : file.getViolation())</line>
<line>            {</line>
<line covered="yes">                Diagnostic diagnostic = diagnosticFactory.getDiagnostic();</line>
<line covered="yes">                diagnostic.setSource(Diagnostic.SOURCE_PMD);</line>
<line/>
<line>                try</line>
<line>                {</line>
<line covered="yes">                    diagnostic.setFileName(stats.getCanonicalPath(file.getName()));</line>
<line>                }</line>
<line covered="no">                catch (IOException e)</line>
<line>                {</line>
<line covered="no">                    throw new QAException(&quot;Failed to obtain canonical path for &quot; + file.getName(), e);</line>
<line covered="yes">                }</line>
<line/>
<line covered="yes">                diagnostic.setStartLine(violation.getBeginline().intValue());</line>
<line covered="yes">                diagnostic.setEndLine(violation.getEndline().intValue());</line>
<line covered="yes">                diagnostic.setStartColumn(violation.getBegincolumn().intValue());</line>
<line covered="yes">                diagnostic.setEndColumn(violation.getEndcolumn().intValue());</line>
<line covered="yes">                diagnostic.setRuleName(violation.getRule());</line>
<line covered="yes">                diagnostic.setMessage(violation.getValue());</line>
<line covered="yes">                diagnostic.calcSeverity();</line>
<line/>
<line>                // Some diagnostics don't include the class name,</line>
<line>                // but we can determine it from the source name.</line>
<line covered="partial">                if (violation.getClassName() == null)</line>
<line>                {</line>
<line covered="yes">                    String className = stats.getClassNameForSourcePath(diagnostic.getFileName());</line>
<line covered="yes">                    diagnostic.setClassName(className);</line>
<line covered="yes">                }</line>
<line>                else</line>
<line>                {</line>
<line covered="no">                    diagnostic.setClassName(violation.getPackage() + '.' + violation.getClassName());</line>
<line>                }</line>
<line/>
<line covered="yes">                diagnostics.add(diagnostic);</line>
<line covered="yes">            }</line>
<line>        }</line>
<line/>
<line>        // Do not suppress violations</line>
<line covered="partial">        for (Suppressedviolation violation : result.getSuppressedviolation())</line>
<line>        {</line>
<line covered="no">            Diagnostic diagnostic = diagnosticFactory.getDiagnostic();</line>
<line/>
<line>            try</line>
<line>            {</line>
<line covered="no">                diagnostic.setFileName(stats.getCanonicalPath(violation.getFilename()));</line>
<line>            }</line>
<line covered="no">            catch (IOException e)</line>
<line>            {</line>
<line covered="no">                throw new QAException(&quot;Failed to obtain canonical path for &quot; + violation.getFilename(), e);</line>
<line covered="no">            }</line>
<line/>
<line covered="no">            diagnostic.setSource(Diagnostic.SOURCE_OTHER);</line>
<line covered="no">            diagnostic.setRuleName(&quot;DoNotSuppressWarnings&quot;);</line>
<line covered="no">            diagnostic.setMessage(&quot;Do not use the SuppressWarnings annotation&quot;);</line>
<line covered="no">            diagnostic.setClassName(stats.getClassNameForSourcePath(diagnostic.getFileName()));</line>
<line covered="no">            diagnostic.calcSeverity();</line>
<line covered="no">            diagnostic.setStartLine(1);</line>
<line covered="no">            diagnostic.setEndLine(1);</line>
<line covered="no">            diagnostics.add(diagnostic);</line>
<line covered="no">        }</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * @return the description of this WorkUnit</line>
<line>     */</line>
<line>    public String getDescription()</line>
<line>    {</line>
<line covered="no">        return &quot;Reading PMD results&quot;;</line>
<line>    }</line>
<line>}</line>
</source>
<diags first="false">
<diag id="377" sev="0" tool="Findbugs" rule="DM_DEFAULT_ENCODING">Found reliance on default encoding in net.sf.sanity4j.workflow.tool.PmdResultReader.fileToString(File): new String(byte[])</diag>
<diag id="376" sev="0" tool="Findbugs" rule="DM_DEFAULT_ENCODING">Found reliance on default encoding in net.sf.sanity4j.workflow.tool.PmdResultReader.fileToString(File): new java.io.PrintStream(OutputStream)</diag>
<diag id="378" sev="0" tool="Findbugs" rule="DM_DEFAULT_ENCODING">Found reliance on default encoding in net.sf.sanity4j.workflow.tool.PmdResultReader.fileToString(File): new String(byte[])</diag>
<diag id="750" sev="2" tool="PMD" rule="EmptyCatchBlock">
Avoid empty catch blocks
</diag>
<diag id="328" sev="1" tool="Checkstyle" rule="EmptyBlockCheck">Must have at least one statement.</diag>
</diags>
</classDetails>
