<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../../xslt/source-code.xsl"?>
<classDetails className="net.sf.sanity4j.workflow.tool.PmdCpd4Runner" pathToRoot="../../../../../" qaVersion="1.1.1" runDate="Thu Aug 21 12:46:30 EST 2014">
<summary high="0" significant="0" moderate="0" low="0" info="2" lineCoverage="0" branchCoverage="0" quality="100"/>
<source>
<line>package net.sf.sanity4j.workflow.tool;</line>
<line/>
<line>import java.io.ByteArrayOutputStream;</line>
<line>import java.io.File;</line>
<line>import java.io.FileOutputStream;</line>
<line>import java.io.IOException;</line>
<line/>
<line>import net.sf.sanity4j.util.ExternalProcessRunner;</line>
<line>import net.sf.sanity4j.util.FileUtil;</line>
<line>import net.sf.sanity4j.util.QAException;</line>
<line>import net.sf.sanity4j.util.QaLogger;</line>
<line>import net.sf.sanity4j.util.QaUtil;</line>
<line>import net.sf.sanity4j.util.Tool;</line>
<line/>
<line>/**</line>
<line> * PmdCpd4Runner - a work unit that runs PMD CPD.</line>
<line> *</line>
<line> * @author Yiannis Paschalidis</line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line>public class PmdCpd4Runner extends AbstractToolRunner</line>
<line>{</line>
<line>    /**</line>
<line>     * Creates a PmdCpdRunner.</line>
<line>     */</line>
<line>    public PmdCpd4Runner()</line>
<line>    {</line>
<line covered="no">        super(Tool.PMD_CPD);</line>
<line covered="no">    }</line>
<line/>
<line>    /**</line>
<line>     * Runs PMD-CPD.</line>
<line>     * @param commandLine the PMD-CPD command line.</line>
<line>     */</line>
<line>    @Override</line>
<line>    public void runTool(final String commandLine)</line>
<line>    {</line>
<line covered="no">        File pmdCpdXmlFile = getConfig().getToolResultFile(Tool.PMD_CPD);</line>
<line covered="no">        FileUtil.createDir(pmdCpdXmlFile.getParentFile().getPath());</line>
<line/>
<line covered="no">        FileOutputStream stdout = null;</line>
<line covered="no">        ByteArrayOutputStream stderr = new ByteArrayOutputStream();</line>
<line/>
<line>        try</line>
<line>        {</line>
<line>            // Run the process</line>
<line>            // PMD CPD sends its output to standard out, so we need to intercept it and write it to a file ourselves</line>
<line covered="no">            stdout = new FileOutputStream(pmdCpdXmlFile);</line>
<line/>
<line covered="no">            int result = ExternalProcessRunner.runProcess(commandLine, stdout, stderr);</line>
<line/>
<line covered="no">            if (result != 0)</line>
<line>            {</line>
<line covered="no">                throw new QAException(&quot;PMD CPD returned error code &quot; + result);</line>
<line>            }</line>
<line/>
<line sev="0" covered="no"><diag id="372"/>            String stderrString = new String(stderr.toByteArray());</line>
<line/>
<line covered="no">            if (FileUtil.hasValue(stderrString))</line>
<line>            {</line>
<line covered="no">                QaLogger.getInstance().error(stderrString);</line>
<line>            }</line>
<line>        }</line>
<line covered="no">        catch (IOException e)</line>
<line>        {</line>
<line sev="0" covered="no"><diag id="373"/>            String err = new String(stderr.toByteArray());</line>
<line covered="no">            throw new QAException(&quot;PMD CPD Command [&quot; + commandLine + &quot;] failed : [&quot; + err + &quot;]&quot;, e);</line>
<line>        }</line>
<line>        finally</line>
<line>        {</line>
<line covered="no">            QaUtil.safeClose(stdout);</line>
<line covered="no">            QaUtil.safeClose(stderr);</line>
<line covered="no">        }</line>
<line covered="no">    }</line>
<line/>
<line>    /**</line>
<line>     * @return the description of this WorkUnit.</line>
<line>     */</line>
<line>    public String getDescription()</line>
<line>    {</line>
<line covered="no">        return &quot;Running PMD CPD&quot;;</line>
<line>    }</line>
<line>}</line>
</source>
<diags first="false">
<diag id="372" sev="0" tool="Findbugs" rule="DM_DEFAULT_ENCODING">Found reliance on default encoding in net.sf.sanity4j.workflow.tool.PmdCpd4Runner.runTool(String): new String(byte[])</diag>
<diag id="373" sev="0" tool="Findbugs" rule="DM_DEFAULT_ENCODING">Found reliance on default encoding in net.sf.sanity4j.workflow.tool.PmdCpd4Runner.runTool(String): new String(byte[])</diag>
</diags>
</classDetails>
