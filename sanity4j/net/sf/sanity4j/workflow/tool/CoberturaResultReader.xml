<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../../xslt/source-code.xsl"?>
<classDetails className="net.sf.sanity4j.workflow.tool.CoberturaResultReader" pathToRoot="../../../../../" qaVersion="1.1.1" runDate="Thu Aug 21 12:46:30 EST 2014">
<summary high="0" significant="0" moderate="0" low="1" info="1" lineCoverage="82" branchCoverage="81" quality="98"/>
<source>
<line>package net.sf.sanity4j.workflow.tool;</line>
<line/>
<line>import java.io.File;</line>
<line>import java.util.List;</line>
<line>import java.util.Properties;</line>
<line/>
<line>import javax.xml.bind.JAXBException;</line>
<line>import javax.xml.bind.Unmarshaller;</line>
<line>import javax.xml.namespace.QName;</line>
<line>import javax.xml.stream.XMLEventReader;</line>
<line>import javax.xml.stream.events.StartElement;</line>
<line/>
<line>import net.sf.sanity4j.gen.cobertura_1_9_2.Clazz;</line>
<line>import net.sf.sanity4j.gen.cobertura_1_9_2.Line;</line>
<line>import net.sf.sanity4j.gen.cobertura_1_9_2.Package;</line>
<line>import net.sf.sanity4j.model.coverage.ClassCoverage;</line>
<line>import net.sf.sanity4j.model.coverage.Coverage;</line>
<line>import net.sf.sanity4j.model.coverage.PackageCoverage;</line>
<line>import net.sf.sanity4j.util.ExtractStats;</line>
<line>import net.sf.sanity4j.util.JaxbMarshaller;</line>
<line>import net.sf.sanity4j.util.StartElementListener;</line>
<line/>
<line>/**</line>
<line> * CoberturaResultReader - Translates cobertura results into the common format used by the QA tool.</line>
<line> *</line>
<line> * @author Yiannis Paschalidis</line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line covered="yes">public final class CoberturaResultReader implements ResultReader, StartElementListener</line>
<line>{</line>
<line>	/** The properties used to configure this {@link ResultReader}. */</line>
<line covered="yes">	private final Properties properties = new Properties();</line>
<line/>
<line>    /** The ExtractStats to add the results to. */</line>
<line>    private ExtractStats stats;</line>
<line/>
<line>    /** The Cobertura result file to read from. */</line>
<line>    private File coberturaResultFile;</line>
<line/>
<line>	/** {@inheritDoc} */</line>
<line>	public void setProperties(final Properties properties) </line>
<line>	{</line>
<line covered="no">		this.properties.putAll(properties);</line>
<line covered="no">	}</line>
<line/>
<line>	/** {@inheritDoc} */</line>
<line>    public void setResultFile(final File resultFile)</line>
<line>    {</line>
<line covered="yes">        this.coberturaResultFile = resultFile;</line>
<line covered="yes">    }</line>
<line/>
<line>    /** {@inheritDoc} */</line>
<line>    public void setStats(final ExtractStats stats)</line>
<line>    {</line>
<line covered="yes">        this.stats = stats;</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * Extracts the Coverage statistics from the coberturaResultFile.</line>
<line>     */</line>
<line>    public void run()</line>
<line>    {</line>
<line covered="yes">        JaxbMarshaller.traverse(coberturaResultFile, &quot;net.sf.sanity4j.gen.cobertura_1_9_2&quot;, &quot;http://net.sf.sanity4j/namespace/cobertura-1.9.2&quot;, this);</line>
<line covered="yes">    }</line>
<line/>
<line>    /** {@inheritDoc} */</line>
<line>    public void foundElement(final StartElement element, final XMLEventReader reader, final Unmarshaller unmarshaller) throws JAXBException</line>
<line>    {</line>
<line covered="yes">        if (&quot;coverage&quot;.equals(element.getName().getLocalPart()))</line>
<line>        {</line>
<line covered="yes">            Coverage coverage = stats.getCoverage();</line>
<line covered="yes">            coverage.setLineCoverage(Double.parseDouble(element.getAttributeByName(new QName(&quot;line-rate&quot;)).getValue()));</line>
<line covered="yes">            coverage.setBranchCoverage(Double.parseDouble(element.getAttributeByName(new QName(&quot;branch-rate&quot;)).getValue()));</line>
<line covered="yes">        }</line>
<line covered="yes">        else if (&quot;package&quot;.equals(element.getName().getLocalPart()))</line>
<line>	    {</line>
<line covered="yes">            Package pakage = (Package) unmarshaller.unmarshal(reader);</line>
<line covered="yes">            processPackage(pakage);</line>
<line>	    }</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * Processes the coverage results for a single package.</line>
<line>     * @param pakage the Package to process.</line>
<line>     */</line>
<line>    private void processPackage(final Package pakage)</line>
<line>    {</line>
<line covered="yes">        Coverage coverage = stats.getCoverage();</line>
<line covered="yes">        PackageCoverage packageCoverage = new PackageCoverage(pakage.getName());</line>
<line covered="yes">        coverage.addPackage(packageCoverage);</line>
<line/>
<line covered="yes">        packageCoverage.setLineCoverage(pakage.getLineRate().doubleValue());</line>
<line covered="yes">        packageCoverage.setBranchCoverage(pakage.getBranchRate().doubleValue());</line>
<line/>
<line covered="yes">        List&lt;Clazz&gt; classes = pakage.getClasses().getClazz();</line>
<line/>
<line>        // Loop through all the package's classes and add them to the coverage</line>
<line covered="yes">        for (Clazz clazz : classes)</line>
<line>        {</line>
<line>            // We always use the enclosing class's name</line>
<line covered="yes">            String fileName = clazz.getFilename();</line>
<line covered="yes">            String className = fileName.substring(0, fileName.length() - &quot;.java&quot;.length());</line>
<line covered="yes">            className = className.replaceAll(&quot;[/\\\\]&quot;, &quot;.&quot;);</line>
<line covered="yes">            boolean isEnclosingClass = className.equals(clazz.getName());</line>
<line/>
<line covered="yes">            ClassCoverage classCoverage = packageCoverage.getClassCoverage(className);</line>
<line/>
<line covered="partial">            if (classCoverage == null)</line>
<line>            {</line>
<line sev="0" covered="yes"><diag id="735"/>                classCoverage = new ClassCoverage(className);</line>
<line covered="yes">                packageCoverage.addClass(classCoverage);</line>
<line>            }</line>
<line/>
<line covered="partial">            if (isEnclosingClass)</line>
<line>            {</line>
<line covered="no">                classCoverage.setLineCoverage(clazz.getLineRate().doubleValue());</line>
<line covered="no">                classCoverage.setBranchCoverage(clazz.getBranchRate().doubleValue());</line>
<line>            }</line>
<line/>
<line>            // Add line coverage info</line>
<line covered="yes">            for (Object obj : clazz.getLines().getContent())</line>
<line>            {</line>
<line covered="yes">                if (obj instanceof Line)</line>
<line>                {</line>
<line covered="yes">                    Line line = (Line) obj;</line>
<line/>
<line covered="yes">                    classCoverage.addLineCoverage(line.getNumber(), line.getHits(), line.isBranch());</line>
<line/>
<line covered="partial">                    if (line.getConditionCoverage() != null)</line>
<line>                    {</line>
<line covered="no">                        String conditionCoverage = line.getConditionCoverage();</line>
<line covered="no">                        int index = conditionCoverage.indexOf('%');</line>
<line covered="no">                        int percent = Integer.parseInt(conditionCoverage.substring(0, index));</line>
<line/>
<line sev="1" covered="no"><diag id="326"/>                        classCoverage.addBranchCoverage(line.getNumber(), percent / 100.0);</line>
<line>                    }</line>
<line covered="yes">                }</line>
<line>            }</line>
<line covered="yes">        }</line>
<line covered="yes">    }</line>
<line/>
<line/>
<line>    /**</line>
<line>     * @return the description of this WorkUnit</line>
<line>     */</line>
<line>    public String getDescription()</line>
<line>    {</line>
<line covered="no">        return &quot;Reading Cobertura results&quot;;</line>
<line>    }</line>
<line>}</line>
</source>
<diags first="false">
<diag id="735" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="326" sev="1" tool="Checkstyle" rule="MagicNumberCheck">'100.0' is a magic number.</diag>
</diags>
</classDetails>
