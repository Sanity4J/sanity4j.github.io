<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../xslt/source-code.xsl"?>
<classDetails className="net.sf.sanity4j.ui.QaApp" pathToRoot="../../../../" qaVersion="1.1.1" runDate="Thu Aug 21 12:46:30 EST 2014">
<summary high="0" significant="1" moderate="0" low="2" info="2" lineCoverage="0" branchCoverage="0" quality="94"/>
<source>
<line>package net.sf.sanity4j.ui; </line>
<line/>
<line>import java.awt.Dimension;</line>
<line>import java.awt.GridBagConstraints;</line>
<line>import java.awt.GridBagLayout;</line>
<line>import java.awt.Toolkit;</line>
<line>import java.awt.event.ActionEvent;</line>
<line>import java.awt.event.ActionListener;</line>
<line>import java.awt.event.WindowAdapter;</line>
<line>import java.awt.event.WindowEvent;</line>
<line>import java.io.File;</line>
<line>import java.io.FileInputStream;</line>
<line>import java.io.FileOutputStream;</line>
<line>import java.io.IOException;</line>
<line>import java.util.Properties;</line>
<line/>
<line>import javax.swing.JButton;</line>
<line>import javax.swing.JCheckBox;</line>
<line>import javax.swing.JComponent;</line>
<line>import javax.swing.JFrame;</line>
<line>import javax.swing.JLabel;</line>
<line>import javax.swing.JOptionPane;</line>
<line>import javax.swing.JPanel;</line>
<line>import javax.swing.JScrollPane;</line>
<line>import javax.swing.JTextArea;</line>
<line>import javax.swing.JTextField;</line>
<line>import javax.swing.border.EmptyBorder;</line>
<line/>
<line>import net.sf.sanity4j.util.QaLogger;</line>
<line>import net.sf.sanity4j.util.QaUtil;</line>
<line>import net.sf.sanity4j.workflow.QAProcessor;</line>
<line/>
<line>/** </line>
<line> * QaApp is the main entry point to the Swing UI interface to Sanity4J.</line>
<line> * </line>
<line> * TODO: Multiple project source etc. directories, includes, excludes</line>
<line> * </line>
<line> * @author Yiannis Paschalidis </line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line sev="1" covered="no"><diag id="570"/>public final class QaApp extends JFrame</line>
<line sev="1"><diag id="571"/>{</line>
<line sev="1">    /** The file name that configuration data is saved in, in the user's home directory. */</line>
<line sev="1">    private static final String PROPERTIES_FILE_NAME = &quot;sanity4j-ui.properties&quot;;</line>
<line sev="1"/>
<line sev="1">    /** File input field for selecting the tools directory. */</line>
<line sev="1" covered="no">    private final FileInput productsDir = new FileInput(true);</line>
<line sev="1"/>
<line sev="1">    /** File input field for selecting the java runtime executable. */</line>
<line sev="1" covered="no">    private final FileInput javaRuntime = new FileInput(false);</line>
<line sev="1"/>
<line sev="1">    /** File input field for selecting the java runtime args. */</line>
<line sev="1" covered="no">    private final JTextField javaArgs = new JTextField(40);</line>
<line sev="1"/>
<line sev="1">    /** File input field for selecting the project's class directory. */</line>
<line sev="1" covered="no">    private final FileInput classDir = new FileInput(true);</line>
<line sev="1"/>
<line sev="1">    /** File input field for selecting the project's source directory. */</line>
<line sev="1" covered="no">    private final FileInput srcDir = new FileInput(true);</line>
<line sev="1"/>
<line sev="1">    /** File input field for selecting the project's library directory. */</line>
<line sev="1" covered="no">    private final FileInput libDir = new FileInput(true);</line>
<line sev="1"/>
<line sev="1">    /** File input field for selecting the project's coverage data file. */</line>
<line sev="1" covered="no">    private final FileInput coverageFile = new FileInput(false);</line>
<line sev="1"/>
<line sev="1">    /** File input field for selecting the report output directory. */</line>
<line sev="1" covered="no">    private final FileInput reportDir = new FileInput(true);</line>
<line sev="1"/>
<line sev="1">    /** File input field for selecting the summary CSV export. */</line>
<line sev="1" covered="no">    private final FileInput summaryOutputFile = new FileInput(false);</line>
<line sev="1"/>
<line sev="1">    /** Controls whether to open the report on successful completion. */</line>
<line sev="1" covered="no">    private final JCheckBox openReportOnCompletion = new JCheckBox(&quot;Open report on completion&quot;);</line>
<line sev="1"/>
<line sev="1">    ///** The button which displays the {@link QaConfigFrame}. */</line>
<line sev="1">    //private final JButton advancedButton = new JButton(&quot;Advanced&quot;);</line>
<line sev="1"/>
<line sev="1">    /** The configuration used by the sanity4j application. */</line>
<line sev="1" covered="no">    private final QAProcessor processor = new QAProcessor();</line>
<line sev="1"/>
<line sev="1">    // Disable the advanced button for now</line>
<line sev="1">    ///** A frame used to modify the {@link QAConfig}. */</line>
<line sev="1">    //private final QaConfigFrame qaConfigFrame = new QaConfigFrame(processor);</line>
<line sev="1"/>
<line sev="1">    /** The button which starts the analysis. */</line>
<line sev="1" covered="no">    private final JButton runButton = new JButton(&quot;Analyse&quot;);</line>
<line sev="1"/>
<line sev="1">    /** Displays console output which is generated during the analysis process. */</line>
<line sev="1" covered="no">    private final JTextArea console = new JTextArea(10, 60);</line>
<line sev="1"/>
<line sev="1">    /** The inset. */</line>
<line sev="1">    private static final int INSET = 5; </line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Creates a QaApp.</line>
<line sev="1">     */</line>
<line sev="1">    public QaApp()</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        super(&quot;Sanity4J UI &quot; + QAProcessor.QA_VERSION);</line>
<line sev="1"/>
<line sev="1" covered="no">        JPanel contentPane = new JPanel();</line>
<line sev="1" covered="no">        contentPane.setBorder(new EmptyBorder(INSET, INSET, INSET, INSET));</line>
<line sev="1" covered="no">        contentPane.setLayout(new GridBagLayout());</line>
<line sev="1" covered="no">        setContentPane(contentPane);</line>
<line sev="1"/>
<line sev="1" covered="no">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</line>
<line sev="1"/>
<line sev="1" covered="no">        addWindowListener(new WindowAdapter()</line>
<line sev="1" covered="no">        {</line>
<line sev="1">            @Override</line>
<line sev="1">            public void windowClosing(final WindowEvent event)</line>
<line sev="1">            {</line>
<line sev="1" covered="no">                writeConfig();</line>
<line sev="1" covered="no">            }</line>
<line sev="1">        });</line>
<line sev="1"/>
<line sev="1">        // Disable the &quot;Advanced&quot; button for now.</line>
<line sev="1">        //advancedButton.addActionListener(new ActionListener()</line>
<line sev="1">        //{</line>
<line sev="1">        //    public void actionPerformed(final ActionEvent event)</line>
<line sev="1">        //    {</line>
<line sev="1">        //        if (!validateInput())</line>
<line sev="1">        //        {</line>
<line sev="1">        //            return;</line>
<line sev="1">        //        }</line>
<line sev="1">        //</line>
<line sev="1">        //        saveConfig();</line>
<line sev="1">        //        qaConfigFrame.setVisible(true);</line>
<line sev="1">        //    }</line>
<line sev="1">        //});</line>
<line sev="1"/>
<line sev="1" covered="no">        runButton.addActionListener(new ActionListener()</line>
<line sev="1" covered="no">        {</line>
<line sev="1">            public void actionPerformed(final ActionEvent event)</line>
<line sev="1">            {</line>
<line sev="1" covered="no">                runQA();</line>
<line sev="1" covered="no">            }</line>
<line sev="1">        });</line>
<line sev="1"/>
<line sev="1" covered="no">        console.setEditable(false);</line>
<line sev="1"/>
<line sev="1" covered="no">        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();</line>
<line sev="1"/>
<line sev="1" covered="no">        layoutInterface();</line>
<line sev="1" covered="no">        pack();        </line>
<line sev="1" covered="no">        setLocation((screenSize.width - getWidth()) / 2, (screenSize.height - getHeight()) / 2); </line>
<line sev="1"/>
<line sev="1" covered="no">        readConfig();</line>
<line sev="1" covered="no">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Adds the various components to the app interace.</line>
<line sev="1">     */</line>
<line sev="1">    private void layoutInterface()</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        int gridy = 0;</line>
<line sev="1"/>
<line sev="1" covered="no">        add(new JLabel(&quot;Sanity4j Configuration&quot;), 0, gridy++, 1, 1, GridBagConstraints.WEST, GridBagConstraints.NONE);</line>
<line sev="1"/>
<line sev="1" covered="no">        add(new FieldLabel(&quot;Directory containing analysis tools&quot;, true), 0, gridy, 1, 1, GridBagConstraints.EAST, GridBagConstraints.NONE); </line>
<line sev="1" covered="no">        add(productsDir, 1, gridy++, 1, 1, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL); </line>
<line sev="1"/>
<line sev="1" covered="no">        add(new FieldLabel(&quot;Path to java executable&quot;, true), 0, gridy, 1, 1, GridBagConstraints.EAST, GridBagConstraints.NONE); </line>
<line sev="1" covered="no">        add(javaRuntime, 1, gridy++, 1, 1, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL);</line>
<line sev="1"/>
<line sev="1" covered="no">        add(new FieldLabel(&quot;Args to java executable&quot;, true), 0, gridy, 1, 1, GridBagConstraints.EAST, GridBagConstraints.NONE); </line>
<line sev="1" covered="no">        add(javaArgs, 1, gridy++, 1, 1, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL);</line>
<line sev="1"/>
<line sev="1" covered="no">        add(new JLabel(&quot; &quot;), 0, gridy++, 1, 1, GridBagConstraints.WEST, GridBagConstraints.NONE);</line>
<line sev="1" covered="no">        add(new JLabel(&quot;Project settings&quot;), 0, gridy++, 1, 1, GridBagConstraints.WEST, GridBagConstraints.NONE);</line>
<line sev="1"/>
<line sev="1" covered="no">        add(new FieldLabel(&quot;Source directory (or parent)&quot;, true), 0, gridy, 1, 1, GridBagConstraints.EAST, GridBagConstraints.NONE); </line>
<line sev="1" covered="no">        add(srcDir, 1, gridy++, 1, 1, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL);</line>
<line sev="1"/>
<line sev="1" covered="no">        add(new FieldLabel(&quot;Class directory (or parent)&quot;, true), 0, gridy, 1, 1, GridBagConstraints.EAST, GridBagConstraints.NONE); </line>
<line sev="1" covered="no">        add(classDir, 1, gridy++, 1, 1, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL);</line>
<line sev="1"/>
<line sev="1" covered="no">        add(new FieldLabel(&quot;Library directory (or parent)&quot;, false), 0, gridy, 1, 1, GridBagConstraints.EAST, GridBagConstraints.NONE); </line>
<line sev="1" covered="no">        add(libDir, 1, gridy++, 1, 1, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL);</line>
<line sev="1"/>
<line sev="1" covered="no">        add(new FieldLabel(&quot;Test coverage data file&quot;, false), 0, gridy, 1, 1, GridBagConstraints.EAST, GridBagConstraints.NONE); </line>
<line sev="1" covered="no">        add(coverageFile, 1, gridy++, 1, 1, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL);</line>
<line sev="1"/>
<line sev="1" covered="no">        add(new JLabel(&quot; &quot;), 0, gridy++, 1, 1, GridBagConstraints.WEST, GridBagConstraints.NONE);</line>
<line sev="1" covered="no">        add(new JLabel(&quot;Output options&quot;), 0, gridy++, 1, 1, GridBagConstraints.WEST, GridBagConstraints.NONE);</line>
<line sev="1"/>
<line sev="1" covered="no">        add(new FieldLabel(&quot;Report output directory&quot;, true), 0, gridy, 1, 1, GridBagConstraints.EAST, GridBagConstraints.NONE); </line>
<line sev="1" covered="no">        add(reportDir, 1, gridy++, 1, 1, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL);</line>
<line sev="1"/>
<line sev="1" covered="no">        add(new FieldLabel(&quot;Summary data CSV export file&quot;, false), 0, gridy, 1, 1, GridBagConstraints.EAST, GridBagConstraints.NONE); </line>
<line sev="1" covered="no">        add(summaryOutputFile, 1, gridy++, 1, 1, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL);</line>
<line sev="1"/>
<line sev="1">        // Disable the &quot;Advanced&quot; button for now.</line>
<line sev="1">        //add(advancedButton, 0, gridy++, 2, 1, GridBagConstraints.EAST, GridBagConstraints.NONE); </line>
<line sev="1"/>
<line sev="1">        try</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            Class.forName(&quot;java.awt.Desktop&quot;);</line>
<line sev="1" covered="no">            add(openReportOnCompletion, 1, gridy++, 1, 1, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL);</line>
<line sev="1">        }</line>
<line sev="1" covered="no">        catch (ClassNotFoundException ex)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            openReportOnCompletion.setVisible(false);</line>
<line sev="1" covered="no">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        add(new JLabel(&quot; &quot;), 0, gridy++, 1, 1, GridBagConstraints.WEST, GridBagConstraints.NONE);</line>
<line sev="1" covered="no">        add(runButton, 0, gridy++, 2, 1, GridBagConstraints.CENTER, GridBagConstraints.NONE);        </line>
<line sev="1"/>
<line sev="1" covered="no">        add(new JLabel(&quot;Console&quot;), 0, gridy++, 1, 1, GridBagConstraints.WEST, GridBagConstraints.NONE);</line>
<line sev="1" covered="no">        add(new JScrollPane(console), 0, gridy++, 2, 1, GridBagConstraints.WEST, GridBagConstraints.BOTH);</line>
<line sev="1" covered="no">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Validates the input which has been entered, returning false on error.</line>
<line sev="1">     * @return true if the input is valid, false otherwise.</line>
<line sev="1">     */</line>
<line sev="1"><diag id="585"/><diag id="586"/>    private boolean validateInput()</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        if (productsDir.getFile() == null || !productsDir.getFile().exists())</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            JOptionPane.showMessageDialog(this, &quot;The Products directory must be specified&quot;);</line>
<line sev="1" covered="no">            return false;</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        if (javaRuntime.getFile() == null || !javaRuntime.getFile().exists())</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            JOptionPane.showMessageDialog(this, &quot;The java runtime must be specified&quot;);</line>
<line sev="1" covered="no">            return false;</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        if (srcDir.getFile() == null || !srcDir.getFile().exists())</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            JOptionPane.showMessageDialog(this, &quot;The source directory must be specified&quot;);</line>
<line sev="1" covered="no">            return false;</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        if (classDir.getFile() == null || !classDir.getFile().exists())</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            JOptionPane.showMessageDialog(this, &quot;The class directory must be specified&quot;);</line>
<line sev="1" covered="no">            return false;</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        if (libDir.getFile() != null &amp;&amp; !libDir.getFile().exists())</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            JOptionPane.showMessageDialog(this, &quot;The library directory is invalid (file not found)&quot;);</line>
<line sev="1" covered="no">            return false;</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        if (coverageFile.getFile() != null &amp;&amp; !coverageFile.getFile().exists())</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            JOptionPane.showMessageDialog(this, &quot;The coverage data file is invalid (file not found)&quot;);</line>
<line sev="1" covered="no">            return false;</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        if (reportDir.getFile() == null || !reportDir.getFile().exists())</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            JOptionPane.showMessageDialog(this, &quot;The report directory must be specified&quot;);</line>
<line sev="1" covered="no">            return false;</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        return true;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Runs the QA tool with the configuration entered through the UI.</line>
<line sev="1">     */</line>
<line sev="1">    private void runQA()</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        if (!validateInput())</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            return;</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        runButton.setEnabled(false);</line>
<line sev="1" covered="no">        console.setText(&quot;&quot;);</line>
<line sev="1" covered="no">        saveConfig();</line>
<line sev="1"/>
<line sev="1" covered="no">        new Thread()</line>
<line sev="1" covered="no">        {</line>
<line sev="1">            @Override</line>
<line sev="1">            public void run()</line>
<line sev="1">            {</line>
<line sev="1">                try</line>
<line sev="1">                {</line>
<line sev="1" covered="no">                    processor.run();</line>
<line sev="1"/>
<line sev="1" covered="no">                    if (openReportOnCompletion.isVisible() &amp;&amp; openReportOnCompletion.isSelected())</line>
<line sev="1">                    {</line>
<line sev="1" covered="no">                        File index = new File(reportDir.getFile(), &quot;index.html&quot;);</line>
<line sev="1"/>
<line sev="1">                        // Use of reflections here is required as we still need to compile under java 1.5.</line>
<line sev="1">                        //Desktop.getDesktop().open(index);</line>
<line sev="1">                        try</line>
<line sev="1">                        {</line>
<line sev="1" covered="no">                            Class&lt;?&gt; clazz = Class.forName(&quot;java.awt.Desktop&quot;);</line>
<line sev="1" covered="no">                            Object instance = clazz.getMethod(&quot;getDesktop&quot;).invoke(null);</line>
<line sev="1" covered="no">                            clazz.getMethod(&quot;open&quot;, File.class).invoke(instance, index);</line>
<line sev="1">                        }</line>
<line sev="1" covered="no">                        catch (ClassNotFoundException ex)</line>
<line sev="1">                        {</line>
<line sev="1">                            // Pre-java 1.6</line>
<line sev="1" covered="no">                            QaLogger.getInstance().error(&quot;Open document failed, Requires java 1.6+&quot;, ex);</line>
<line sev="1">                        }</line>
<line sev="1" covered="no">                        catch (Exception ex)</line>
<line sev="1">                        {</line>
<line sev="1" covered="no">                            QaLogger.getInstance().error(&quot;Failed to open report&quot;, ex);</line>
<line sev="1" covered="no">                        }</line>
<line sev="1">                    }</line>
<line sev="1">                }</line>
<line sev="3" covered="no"><diag id="588"/>                catch (Throwable ex)</line>
<line sev="1">                {</line>
<line sev="1">                    // Need to catch throwable rather than exception, to e.g. catch JAXB LinkageErrors.</line>
<line sev="1" covered="no">                    QaLogger.getInstance().error(&quot;QA failed&quot;, ex);</line>
<line sev="1">                }</line>
<line sev="1">                finally</line>
<line sev="1">                {</line>
<line sev="1" covered="no">                    runButton.setEnabled(true);</line>
<line sev="1" covered="no">                }</line>
<line sev="1" covered="no">            }</line>
<line sev="1">        } .start();</line>
<line sev="1" covered="no">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Save the data input into the QaApp to the processor configuration.</line>
<line sev="1">     */</line>
<line sev="1">    private void saveConfig()</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        processor.getConfig().addSourcePath(srcDir.getFile().getPath());</line>
<line sev="1" covered="no">        processor.getConfig().addClassPath(classDir.getFile().getPath());</line>
<line sev="1" covered="no">        processor.getConfig().setProductsDir(productsDir.getFile().getPath());</line>
<line sev="1"/>
<line sev="1" covered="no">        if (coverageFile.getFile() != null)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            processor.getConfig().setCoverageDataFile(coverageFile.getFile().getPath());</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        processor.getConfig().setReportDir(reportDir.getFile().getPath());</line>
<line sev="1" covered="no">        processor.getConfig().setJavaRuntime(javaRuntime.getFile().getPath());</line>
<line sev="1" covered="no">        processor.getConfig().setJavaArgs(javaArgs.getText());</line>
<line sev="1"/>
<line sev="1" covered="no">        if (summaryOutputFile.getFile() != null)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            processor.getConfig().setSummaryDataFile(summaryOutputFile.getFile().getPath());</line>
<line sev="1">        }</line>
<line sev="1" covered="no">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Adds a component to the content pane.</line>
<line sev="1">     * @param component the component to add.</line>
<line sev="1">     * @param gridx the x grid co-ordinate.</line>
<line sev="1">     * @param gridy the y grid co-ordinate.</line>
<line sev="1">     * @param gridwidth the number of horizontal grid units to occupy.</line>
<line sev="1">     * @param gridheight the number of vertical grid units to occupy.</line>
<line sev="1">     * @param anchor the position of the component within the cell.</line>
<line sev="1">     * @param fill the fill mode when the component is smaller than the cell.</line>
<line sev="1">     */</line>
<line sev="1">    private void add(final JComponent component, final int gridx, final int gridy, final int gridwidth, </line>
<line sev="1">                     final int gridheight, final int anchor, final int fill)</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        GridBagConstraints constraints = new GridBagConstraints();</line>
<line sev="1" covered="no">        constraints.gridx = gridx;</line>
<line sev="1" covered="no">        constraints.gridy = gridy;</line>
<line sev="1" covered="no">        constraints.gridwidth = gridwidth;</line>
<line sev="1" covered="no">        constraints.gridheight = gridheight;</line>
<line sev="1" covered="no">        constraints.anchor = anchor;</line>
<line sev="1" covered="no">        constraints.fill = fill;</line>
<line sev="1"/>
<line sev="1" covered="no">        if (fill == GridBagConstraints.HORIZONTAL || fill == GridBagConstraints.BOTH)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            constraints.weightx = 1.0;</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        if (fill == GridBagConstraints.VERTICAL || fill == GridBagConstraints.BOTH)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            constraints.weighty = 1.0;</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        getContentPane().add(component);</line>
<line sev="1" covered="no">        ((GridBagLayout) getContentPane().getLayout()).setConstraints(component, constraints);</line>
<line sev="1" covered="no">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Reads the QaApp configuration file, applying settings as necessary.</line>
<line sev="1">     * This is normally called once on application start-up.</line>
<line sev="1">     */</line>
<line sev="1">    private void readConfig()</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        Properties props = new Properties();</line>
<line sev="1" covered="no">        File file = new File(System.getProperty(&quot;user.home&quot;), PROPERTIES_FILE_NAME);</line>
<line sev="1" covered="no">        FileInputStream fis = null;</line>
<line sev="1"/>
<line sev="1" covered="no">        if (file.exists())</line>
<line sev="1">        {</line>
<line sev="1">            try</line>
<line sev="1">            {</line>
<line sev="1" covered="no">                fis = new FileInputStream(file);</line>
<line sev="1" covered="no">                props.load(fis);</line>
<line sev="1">            }</line>
<line sev="1" covered="no">            catch (IOException e)</line>
<line sev="1">            {</line>
<line sev="1" covered="no">                JOptionPane.showMessageDialog(this, &quot;Failed to load preferences from &quot; + file);</line>
<line sev="1">            }</line>
<line sev="1">            finally</line>
<line sev="1">            {</line>
<line sev="1" covered="no">                QaUtil.safeClose(fis);</line>
<line sev="1" covered="no">            }</line>
<line sev="1"/>
<line sev="1" covered="no">            productsDir.setText(props.getProperty(&quot;productsDir&quot;));</line>
<line sev="1" covered="no">            javaRuntime.setText(props.getProperty(&quot;javaRuntime&quot;));</line>
<line sev="1" covered="no">            javaArgs.setText(props.getProperty(&quot;javaArgs&quot;));</line>
<line sev="1" covered="no">            classDir.setText(props.getProperty(&quot;classDir&quot;));</line>
<line sev="1" covered="no">            srcDir.setText(props.getProperty(&quot;srcDir&quot;));</line>
<line sev="1" covered="no">            libDir.setText(props.getProperty(&quot;libDir&quot;));</line>
<line sev="1" covered="no">            coverageFile.setText(props.getProperty(&quot;coverageFile&quot;));</line>
<line sev="1" covered="no">            reportDir.setText(props.getProperty(&quot;reportDir&quot;));</line>
<line sev="1" covered="no">            summaryOutputFile.setText(props.getProperty(&quot;summaryOutputFile&quot;));</line>
<line sev="1" covered="no">            openReportOnCompletion.setSelected(&quot;true&quot;.equalsIgnoreCase(props.getProperty(&quot;openReportOnCompletion&quot;)));</line>
<line sev="1">        }</line>
<line sev="1">        else</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            javaArgs.setText(processor.getConfig().getJavaArgs());</line>
<line sev="1">        }</line>
<line sev="1" covered="no">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Writes the QaApp configuration file with the current settings.</line>
<line sev="1">     * This is normally called once on application shut-down.</line>
<line sev="1">     */</line>
<line sev="1">    private void writeConfig()</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        Properties props = new Properties();</line>
<line sev="1" covered="no">        props.put(&quot;productsDir&quot;, productsDir.getText());</line>
<line sev="1" covered="no">        props.put(&quot;productsDir&quot;, productsDir.getText());</line>
<line sev="1" covered="no">        props.put(&quot;javaRuntime&quot;, javaRuntime.getText());</line>
<line sev="1" covered="no">        props.put(&quot;javaArgs&quot;, javaArgs.getText());</line>
<line sev="1" covered="no">        props.put(&quot;classDir&quot;, classDir.getText());</line>
<line sev="1" covered="no">        props.put(&quot;srcDir&quot;, srcDir.getText());</line>
<line sev="1" covered="no">        props.put(&quot;libDir&quot;, libDir.getText());</line>
<line sev="1" covered="no">        props.put(&quot;coverageFile&quot;, coverageFile.getText());</line>
<line sev="1" covered="no">        props.put(&quot;reportDir&quot;, reportDir.getText());</line>
<line sev="1" covered="no">        props.put(&quot;openReportOnCompletion&quot;, openReportOnCompletion.isSelected() ? &quot;true&quot; : &quot;false&quot;);</line>
<line sev="1" covered="no">        props.put(&quot;summaryOutputFile&quot;, summaryOutputFile.getText());</line>
<line sev="1"/>
<line sev="1" covered="no">        File file = new File(System.getProperty(&quot;user.home&quot;), PROPERTIES_FILE_NAME);</line>
<line sev="1" covered="no">        FileOutputStream fos = null;</line>
<line sev="1"/>
<line sev="1">        try</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            fos = new FileOutputStream(file);</line>
<line sev="1" covered="no">            props.store(fos, &quot;QaApp properties&quot;);</line>
<line sev="1">        }</line>
<line sev="1" covered="no">        catch (IOException e)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            JOptionPane.showMessageDialog(this, &quot;Failed to save preferences to &quot; + file);</line>
<line sev="1">        }</line>
<line sev="1">        finally</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            QaUtil.safeClose(fos);</line>
<line sev="1" covered="no">        }</line>
<line sev="1" covered="no">    }    </line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Main entry point to the QA App.</line>
<line sev="1">     * @param args ignored - there are no command line arguments.</line>
<line sev="1">     */</line>
<line sev="1">    public static void main(final String[] args)</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        QaApp app = new QaApp();</line>
<line sev="1" covered="no">        QaLogger.setLogger(new QaLoggerJTextAreaImpl(app.console));</line>
<line sev="1"/>
<line sev="1" covered="no">        app.setVisible(true);</line>
<line sev="1" covered="no">    }</line>
<line sev="1">}</line>
</source>
<diags first="false">
<diag id="570" sev="1" tool="PMD" rule="CyclomaticComplexity">
The class 'QaApp' has a Cyclomatic Complexity of 5 (Highest = 15).
</diag>
<diag id="571" sev="0" tool="PMD" rule="TooManyMethods">
This class has too many methods, consider refactoring it.
</diag>
<diag id="585" sev="1" tool="PMD" rule="CyclomaticComplexity">
The method 'validateInput' has a Cyclomatic Complexity of 15.
</diag>
<diag id="586" sev="0" tool="PMD" rule="NPathComplexity">
The method validateInput() has an NPath complexity of 2187
</diag>
<diag id="588" sev="3" tool="PMD" rule="AvoidCatchingThrowable">
A catch statement should never catch throwable since it includes errors.
</diag>
</diags>
</classDetails>
