<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../xslt/source-code.xsl"?>
<classDetails className="net.sf.sanity4j.util.FileUtil_Test" pathToRoot="../../../../" qaVersion="1.1.1" runDate="Thu Aug 21 12:46:30 EST 2014">
<summary high="0" significant="0" moderate="0" low="0" info="0" quality="100"/>
<source>
<line>package net.sf.sanity4j.util; </line>
<line/>
<line>import java.io.File;</line>
<line>import java.io.IOException;</line>
<line>import java.util.ArrayList;</line>
<line>import java.util.List;</line>
<line/>
<line>import junit.framework.TestCase;</line>
<line/>
<line>/**</line>
<line> * FileUtil_Test - unit tests for {@link FileUtil}. </line>
<line> * </line>
<line> * @author Yiannis Paschalidis </line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line>public class FileUtil_Test extends TestCase</line>
<line>{</line>
<line>    public void testCreateDir() throws IOException</line>
<line>    {</line>
<line>        File tempDir = getTempDir();</line>
<line/>
<line>        try</line>
<line>        {</line>
<line>            FileUtil.createDir(tempDir.getPath());</line>
<line>            assertTrue(&quot;Failed to create directory&quot;, tempDir.isDirectory());</line>
<line>        }</line>
<line>        finally</line>
<line>        {</line>
<line>            tempDir.delete();</line>
<line>            assertFalse(&quot;Failed to delete temp dir &quot; + tempDir.getPath(), tempDir.exists());</line>
<line>        }</line>
<line>    }</line>
<line/>
<line>    public void testFindJars() throws IOException</line>
<line>    {</line>
<line>        List&lt;String&gt; jars = new ArrayList&lt;String&gt;();</line>
<line>        File tempDir = getTempDir();</line>
<line/>
<line>        try</line>
<line>        {</line>
<line>            tempDir.mkdirs();</line>
<line>            assertTrue(&quot;Failed to create directory&quot;, tempDir.isDirectory());</line>
<line/>
<line>            File jar1 = new File(tempDir, &quot;file1.jar&quot;);</line>
<line>            jar1.createNewFile();</line>
<line/>
<line>            File nonJar = new File(tempDir, &quot;file.txt&quot;);</line>
<line>            nonJar.createNewFile();</line>
<line/>
<line>            File subDir1 = new File(tempDir, &quot;subdir1&quot;);</line>
<line>            subDir1.mkdirs();</line>
<line>            File jar2 = new File(subDir1, &quot;file2.jar&quot;);</line>
<line>            jar2.createNewFile();</line>
<line/>
<line>            File subDir2 = new File(subDir1, &quot;subdir2&quot;);</line>
<line>            subDir2.mkdirs();</line>
<line>            File jar3 = new File(subDir2, &quot;file3.jar&quot;);</line>
<line>            jar3.createNewFile();</line>
<line/>
<line>            FileUtil.findJars(tempDir, jars);</line>
<line>            assertEquals(&quot;Incorrect number of jars found&quot;, 3, jars.size());</line>
<line>            assertTrue(&quot;Missing jar at top level&quot;, jars.contains(jar1.getPath()));</line>
<line>            assertTrue(&quot;Missing jar at subdirectory level&quot;, jars.contains(jar2.getPath()));</line>
<line>            assertTrue(&quot;Missing jar at nested subdirectory level&quot;, jars.contains(jar3.getPath()));</line>
<line>        }</line>
<line>        finally</line>
<line>        {</line>
<line>            // test deletion</line>
<line>            if (tempDir.exists())</line>
<line>            {</line>
<line>                FileUtil.delete(tempDir);</line>
<line>                assertFalse(&quot;FileUtil.delete failed to delete &quot; + tempDir, tempDir.exists());</line>
<line>            }</line>
<line>        }</line>
<line>    }</line>
<line/>
<line>    private File getTempDir() throws IOException</line>
<line>    {</line>
<line>        // Alternatively, could read system property java.io.tmpdir ...</line>
<line>        File file = File.createTempFile(&quot;FileUtil_Test&quot;, &quot;tmp&quot;);</line>
<line>        file.delete();</line>
<line>        assertFalse(&quot;Failed to delete temp file &quot; + file.getPath(), file.exists());</line>
<line/>
<line>        return file;</line>
<line>    }</line>
<line>}</line>
</source>
</classDetails>
