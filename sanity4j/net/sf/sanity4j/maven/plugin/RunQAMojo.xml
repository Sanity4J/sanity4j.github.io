<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../../xslt/source-code.xsl"?>
<classDetails className="net.sf.sanity4j.maven.plugin.RunQAMojo" pathToRoot="../../../../../" qaVersion="1.1.1" runDate="Thu Aug 21 12:46:30 EST 2014">
<summary high="0" significant="0" moderate="0" low="29" info="27" lineCoverage="0" branchCoverage="0" quality="95"/>
<source>
<line sev="0"><diag id="382"/>package net.sf.sanity4j.maven.plugin;</line>
<line sev="0"/>
<line sev="0">import java.io.BufferedWriter;</line>
<line sev="0">import java.io.File;</line>
<line sev="0">import java.io.FileWriter;</line>
<line sev="0">import java.io.IOException;</line>
<line sev="0">import java.lang.reflect.InvocationTargetException;</line>
<line sev="0">import java.util.Collections;</line>
<line sev="0">import java.util.HashSet;</line>
<line sev="0">import java.util.LinkedHashSet;</line>
<line sev="0">import java.util.List;</line>
<line sev="0">import java.util.Locale;</line>
<line sev="0">import java.util.Properties;</line>
<line sev="0">import java.util.ResourceBundle;</line>
<line sev="0">import java.util.Set;</line>
<line sev="0"/>
<line sev="0">import net.sf.sanity4j.util.FileUtil;</line>
<line sev="0">import net.sf.sanity4j.util.QAException;</line>
<line sev="0">import net.sf.sanity4j.util.QaLogger;</line>
<line sev="0">import net.sf.sanity4j.util.QaLoggerMavenImpl;</line>
<line sev="0">import net.sf.sanity4j.util.Tool;</line>
<line sev="0">import net.sf.sanity4j.workflow.QAConfig;</line>
<line sev="0">import net.sf.sanity4j.workflow.QAProcessor;</line>
<line sev="0"/>
<line sev="0">import org.apache.maven.artifact.Artifact;</line>
<line sev="0">import org.apache.maven.artifact.DefaultArtifact;</line>
<line sev="0">import org.apache.maven.artifact.handler.DefaultArtifactHandler;</line>
<line sev="0">import org.apache.maven.artifact.repository.ArtifactRepository;</line>
<line sev="0">import org.apache.maven.artifact.resolver.ArtifactResolver;</line>
<line sev="0">import org.apache.maven.artifact.resolver.filter.ArtifactFilter;</line>
<line sev="0">import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;</line>
<line sev="0">import org.apache.maven.artifact.versioning.VersionRange;</line>
<line sev="0">import org.apache.maven.doxia.siterenderer.Renderer;</line>
<line sev="0">import org.apache.maven.model.DistributionManagement;</line>
<line sev="0">import org.apache.maven.model.Site;</line>
<line sev="0">import org.apache.maven.plugin.MojoExecutionException;</line>
<line sev="0">import org.apache.maven.plugin.dependency.utils.resolvers.ArtifactsResolver;</line>
<line sev="0">import org.apache.maven.plugin.dependency.utils.resolvers.DefaultArtifactsResolver;</line>
<line sev="0">import org.apache.maven.plugins.annotations.Component;</line>
<line sev="0">import org.apache.maven.plugins.annotations.Mojo;</line>
<line sev="0">import org.apache.maven.plugins.annotations.Parameter;</line>
<line sev="0">import org.apache.maven.plugins.annotations.ResolutionScope;</line>
<line sev="0">import org.apache.maven.project.DefaultProjectBuildingRequest;</line>
<line sev="0">import org.apache.maven.project.MavenProject;</line>
<line sev="0">import org.apache.maven.project.ProjectBuilder;</line>
<line sev="0">import org.apache.maven.project.ProjectBuildingException;</line>
<line sev="0">import org.apache.maven.project.ProjectBuildingRequest;</line>
<line sev="0">import org.apache.maven.reporting.AbstractMavenReport;</line>
<line sev="0">import org.apache.maven.reporting.MavenReportException;</line>
<line sev="0">import org.apache.maven.shared.dependency.graph.DependencyGraphBuilder;</line>
<line sev="0">import org.apache.maven.shared.dependency.graph.DependencyGraphBuilderException;</line>
<line sev="0">import org.apache.maven.shared.dependency.graph.DependencyNode;</line>
<line sev="0">import org.apache.maven.shared.invoker.DefaultInvocationRequest;</line>
<line sev="0">import org.apache.maven.shared.invoker.DefaultInvoker;</line>
<line sev="0">import org.apache.maven.shared.invoker.InvocationRequest;</line>
<line sev="0">import org.apache.maven.shared.invoker.Invoker;</line>
<line sev="0"/>
<line sev="0">/**</line>
<line sev="0"> * &lt;p&gt;</line>
<line sev="0"> * This class is a Maven plugin that runs Sanity4J against a project's source</line>
<line sev="0"> * code and classes.</line>
<line sev="0"> * &lt;/p&gt;</line>
<line sev="0"> *</line>
<line sev="0"> * &lt;p&gt;</line>
<line sev="0"> * This task simply configures up a {@link QAProcessor} and then runs it in the</line>
<line sev="0"> * {@link #executeReport()} method.</line>
<line sev="0"> * &lt;/p&gt;</line>
<line sev="0"> *</line>
<line sev="0"> * @author Darian Bridge</line>
<line sev="0"> * @since Sanity4J 1.0</line>
<line sev="0"> */</line>
<line sev="0">@Mojo(name = &quot;sanity4j&quot;, requiresProject = false, requiresDependencyResolution = ResolutionScope.TEST, requiresDependencyCollection = ResolutionScope.TEST)</line>
<line sev="1"><diag id="383"/><diag id="384"/><diag id="385"/>public class RunQAMojo extends AbstractMavenReport</line>
<line sev="1"><diag id="386"/>{</line>
<line sev="1">    /** Mojo and goal to download historical coverage stats. */</line>
<line sev="1">    private static final String DOWNLOAD_SINGLE_MOJO = &quot;org.codehaus.mojo:wagon-maven-plugin:1.0-beta-5:download-single&quot;;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * The Maven Project to interact with.</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter(defaultValue = &quot;${project}&quot;, readonly = true, required = true)</line>
<line sev="1">    private MavenProject project;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * The projects in the reactor for aggregation report.</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter(defaultValue = &quot;${reactorProjects}&quot;, readonly = true, required = true)    </line>
<line sev="1">    private List&lt;MavenProject&gt; reactorProjects;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Helper for locating Dependencies.</line>
<line sev="1">     */</line>
<line sev="1">    @Component(hint = &quot;default&quot;)</line>
<line sev="1">    private DependencyGraphBuilder dependencyGraphBuilder;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Helper for resolving Artifacts against the Repository.</line>
<line sev="1">     */</line>
<line sev="1">    @Component</line>
<line sev="1">    private ArtifactResolver resolver;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Helper for creating a Maven Project.</line>
<line sev="1">     */</line>
<line sev="1">    @Component(role = ProjectBuilder.class)</line>
<line sev="1">    private ProjectBuilder projectBuilder;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Can be one of the below.</line>
<line sev="1">     * &lt;pre&gt; </line>
<line sev="1">     * org.sonatype.aether.RepositorySystemSession</line>
<line sev="1">     * org.eclipse.aether.RepositorySystemSession</line>
<line sev="1">     * &lt;/pre&gt;</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter(defaultValue = &quot;${repositorySystemSession}&quot;, readonly = true, required = true)</line>
<line sev="1">    private Object session;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * The Local Repository.</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter(defaultValue = &quot;${localRepository}&quot;, readonly = true, required = true)</line>
<line sev="1">    private ArtifactRepository localRepo;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * The Remote Repositories.</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter(defaultValue = &quot;${project.remoteArtifactRepositories}&quot;, readonly = true, required = true)</line>
<line sev="1">    private List&lt;ArtifactRepository&gt; remoteRepos;    </line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Flag to indicate that this mojo should run it in a multi module way.</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter(defaultValue = &quot;false&quot;)</line>
<line sev="1">    private boolean aggregate;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * &lt;i&gt;Maven Internal&lt;/i&gt;: The Doxia Site Renderer.</line>
<line sev="1">     */</line>
<line sev="1">    @Component</line>
<line sev="1">    private Renderer siteRenderer;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * The source file paths for analysis.</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter    </line>
<line sev="1">    private String[] sources;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * The test source file paths for analysis.</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter    </line>
<line sev="1">    private String[] testSources;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * The class file paths for analysis.</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter    </line>
<line sev="1">    private String[] classes;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * The test class file paths for analysis.</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter    </line>
<line sev="1">    private String[] testClasses;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * The library file paths for analysis.</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter    </line>
<line sev="1">    private String[] libraries;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * The location of the directory containing the various tools.</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter</line>
<line sev="1">    private String productsDir;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * The directory in which to place report output.</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter(defaultValue = &quot;${project.reporting.outputDirectory}/sanity4j&quot;)  </line>
<line sev="1">    private String reportDir;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * The file containing the jUnit coverage data.</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter(defaultValue = &quot;target/cobertura/cobertura.ser&quot;)    </line>
<line sev="1">    private String coverageDataFile;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * The file containing the merged jUnit coverage data.</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter(defaultValue = &quot;${project.build.directory}/cobertura/cobertura-merged.ser&quot;)    </line>
<line sev="1">    private String coverageMergeDataFile;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * The summary data file, if used.</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter(defaultValue = &quot;${project.reporting.outputDirectory}/${project.name}_analyse_summary.csv&quot;)    </line>
<line sev="1">    private String summaryDataFile;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * The path location to the external properties file (sanity4j.properties).</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter(defaultValue = &quot;&quot;)    </line>
<line sev="1">    private String externalPropertiesPath;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * The configuration passed to the checkStyle ${sanity4j.tool.checkstyle.command} as ${sanity4j.tool.checkstyle.config}.</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter    </line>
<line sev="1">    private String checkStyleConfig;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * The class path used by the configuration passed to the checkStyle ${sanity4j.tool.checkstyle.command} as ${sanity4j.tool.checkstyle.config}.</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter    </line>
<line sev="1">    private String checkStyleConfigClasspath;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * The configuration passed to the FindBugs ${sanity4j.tool.findbugs.command} as ${sanity4j.tool.findbugs.config}.</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter    </line>
<line sev="1">    private String findBugsConfig;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * The class path used by the configuration passed to the FindBugs ${sanity4j.tool.findbugs.command} as ${sanity4j.tool.findbugs.config}.</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter    </line>
<line sev="1">    private String findBugsConfigClasspath;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * The configuration passed to the PMD ${sanity4j.tool.pmd.command} as ${sanity4j.tool.pmd.config}.</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter    </line>
<line sev="1">    private String pmdConfig;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Any additional properties to be passed to the tools.</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter    </line>
<line sev="1">    private String additionalProperties;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * The class path used by the configuration passed to the PMD ${sanity4j.tool.pmd.command} as ${sanity4j.tool.pmd.config}.</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter    </line>
<line sev="1">    private String pmdConfigClasspath;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * The temporary directory.</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter(defaultValue = &quot;${project.build.directory}/sanity4jAnalysis&quot;)    </line>
<line sev="1">    private File tempDir;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * The java runtime to use when running external tasks.</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter(defaultValue = QAProcessor.DEFAULT_JAVA_RUNTIME)    </line>
<line sev="1">    private String javaRuntime;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * The java args to use when running external tasks.</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter(defaultValue = &quot;${env.MAVEN_OPTS}&quot;)    </line>
<line sev="1">    private String javaArgs;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * If true, the raw tool output is included in the report directory.</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter(defaultValue = &quot;false&quot;)</line>
<line sev="1">    private boolean includeToolOutput;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * The number of threads to use to run the tools and produce the report</line>
<line sev="1">     * output.</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter(defaultValue = &quot;1&quot;)</line>
<line sev="1">    private int numThreads; </line>
<line sev="1">    // TODO: Add support for concurrent tasks</line>
<line sev="1">    // (Note: some tasks can not be run in parallel).</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Whether to use historical statistics when generating sanity4j reports.</line>
<line sev="1">     */</line>
<line sev="1">    @Parameter(defaultValue = &quot;true&quot;)    </line>
<line sev="1">    private boolean useHistory;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Override the default constructor to initialise the logger. No logging</line>
<line sev="1">     * methods should be called before this method.</line>
<line sev="1">     */</line>
<line sev="1">    public RunQAMojo()</line>
<line sev="1" covered="no">    {</line>
<line sev="1" covered="no">        QaLogger.setLogger(new QaLoggerMavenImpl(this));</line>
<line sev="1" covered="no">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Executes this mojo, invoking the {@link QAProcessor} which has already</line>
<line sev="1">     * been configured by Maven using either the annotations or the POM (through</line>
<line sev="1">     * reflection).</line>
<line sev="1">     *</line>
<line sev="1">     * @param locale The locale</line>
<line sev="1">     * @throws MavenReportException Thrown if a problem occurs generating the report.</line>
<line sev="1">     */</line>
<line sev="1"><diag id="11"/>    @Override</line>
<line sev="1"><diag id="12"/><diag id="421"/><diag id="422"/><diag id="423"/><diag id="424"/>    public void executeReport(final Locale locale) throws MavenReportException</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        if (isAggregate() &amp;&amp; !getProject().isExecutionRoot())</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            getLog().info(getProject().getName() + &quot; aggregation is on, but this is not the execution root. Skipping 'sanity4j' check.&quot;);</line>
<line sev="1"/>
<line sev="1">            // Write out an small index.html file so that Maven</line>
<line sev="1">            // doesn't complain about empty files when deploying the site.</line>
<line sev="1" covered="no">            File index = new File(getReportDir(), &quot;index.html&quot;);</line>
<line sev="1" covered="no">            writeTextFile(index, &quot; &quot;);</line>
<line sev="1"/>
<line sev="1" covered="no">            return;</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        FileUtil.createDir(getReportDir());</line>
<line sev="1"/>
<line sev="1" covered="no">        boolean aggregating = isAggregate() &amp;&amp; getProject().isExecutionRoot();</line>
<line sev="1"/>
<line sev="1" covered="no">        QAProcessor sanity4j = new QAProcessor();</line>
<line sev="1" covered="no">        QAConfig qaConfig = sanity4j.getConfig();</line>
<line sev="1" covered="no">        qaConfig.setRunQAMojo(this);</line>
<line sev="1"/>
<line sev="1" covered="no">        if (aggregating)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            for (MavenProject reactorProject : getReactorProjects())</line>
<line sev="1">            {</line>
<line sev="1" covered="no">                if (getSources() == null)</line>
<line sev="1">                {</line>
<line sev="1" covered="no">                    qaConfig.addSourcePath(</line>
<line sev="1"><diag id="425"/>                        new File(reactorProject.getBasedir(), &quot;src/main&quot;).getPath());</line>
<line sev="1">                }</line>
<line sev="1">                else</line>
<line sev="1">                {</line>
<line sev="1" covered="no">                    for (String source : getSources())</line>
<line sev="1">                    {</line>
<line sev="1" covered="no">                        qaConfig.addSourcePath(</line>
<line sev="1"><diag id="426"/>                            new File(reactorProject.getBasedir(), source).getPath());</line>
<line sev="1">                    }</line>
<line sev="1">                }</line>
<line sev="1">            }</line>
<line sev="1">        }</line>
<line sev="1" covered="no">        else if (getSources() == null)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            qaConfig.addSourcePath(</line>
<line sev="1">                new File(getProject().getBasedir(), &quot;src/main&quot;).getPath());</line>
<line sev="1">        }</line>
<line sev="1">        else</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            for (String source : getSources())</line>
<line sev="1">            {</line>
<line sev="1" covered="no">                qaConfig.addSourcePath(</line>
<line sev="1"><diag id="427"/>                     new File(getProject().getBasedir(), source).getPath());</line>
<line sev="1">            }</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        if (aggregating)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            for (MavenProject reactorProject : getReactorProjects())</line>
<line sev="1">            {</line>
<line sev="1" covered="no">                if (getTestSources() == null)</line>
<line sev="1">                {</line>
<line sev="1" covered="no">                    qaConfig.addSourcePath(</line>
<line sev="1"><diag id="428"/>                        new File(reactorProject.getBasedir(), &quot;src/test&quot;).getPath());</line>
<line sev="1">                }</line>
<line sev="1">                else</line>
<line sev="1">                {</line>
<line sev="1" covered="no">                    for (String testSource : getTestSources())</line>
<line sev="1">                    {</line>
<line sev="1" covered="no">                        qaConfig.addSourcePath(</line>
<line sev="1"><diag id="429"/>                            new File(reactorProject.getBasedir(), testSource).getPath());</line>
<line sev="1">                    }</line>
<line sev="1">                }</line>
<line sev="1">            }</line>
<line sev="1">        }</line>
<line sev="1" covered="no">        else if (getTestSources() == null)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            qaConfig.addSourcePath(</line>
<line sev="1">                new File(getProject().getBasedir(), &quot;src/test&quot;).getPath());</line>
<line sev="1">        }</line>
<line sev="1">        else</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            for (String testSource : getTestSources())</line>
<line sev="1">            {</line>
<line sev="1" covered="no">                qaConfig.addSourcePath(</line>
<line sev="1"><diag id="430"/>                    new File(getProject().getBasedir(), testSource).getPath());</line>
<line sev="1">            }</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        boolean sourceFileDetected = false;</line>
<line sev="1"/>
<line sev="1" covered="no">        for (String srcDir : qaConfig.getSourceDirs())</line>
<line sev="1">        {</line>
<line sev="1" covered="no"><diag id="431"/>            if (checkForSource(new File(srcDir)))</line>
<line sev="1">            {</line>
<line sev="1" covered="no">                sourceFileDetected = true;</line>
<line sev="1" covered="no">                break;</line>
<line sev="1">            }</line>
<line sev="1">        }</line>
<line sev="1" covered="no">        if (!sourceFileDetected)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            getLog().info(getProject().getName() + &quot; contains no source code. Skipping 'sanity4j' check.&quot;);</line>
<line sev="1" covered="no">            return;</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        if (aggregating)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            for (MavenProject reactorProject : getReactorProjects())</line>
<line sev="1">            {</line>
<line sev="1" covered="no">                if (getClasses() == null)</line>
<line sev="1">                {</line>
<line sev="1" covered="no">                qaConfig.addClassPath(</line>
<line sev="1"><diag id="432"/>                        new File(reactorProject.getBasedir(), &quot;target/classes&quot;).getPath());</line>
<line sev="1">                }</line>
<line sev="1">                else</line>
<line sev="1">                {</line>
<line sev="1" covered="no">                    for (String clazz : getClasses())</line>
<line sev="1">                    {</line>
<line sev="1" covered="no">                        qaConfig.addClassPath(</line>
<line sev="1"><diag id="433"/>                            new File(reactorProject.getBasedir(), clazz).getPath());</line>
<line sev="1">                    }</line>
<line sev="1">                }</line>
<line sev="1">            }</line>
<line sev="1">        }</line>
<line sev="1" covered="no">        else if (getClasses() == null)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            qaConfig.addClassPath(</line>
<line sev="1">                new File(getProject().getBasedir(), &quot;target/classes&quot;).getPath());</line>
<line sev="1">        }</line>
<line sev="1">        else</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            for (String clazz : getClasses())</line>
<line sev="1">            {</line>
<line sev="1" covered="no">                qaConfig.addClassPath(</line>
<line sev="1"><diag id="434"/>                    new File(getProject().getBasedir(), clazz).getPath());</line>
<line sev="1">            }</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        if (aggregating)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            for (MavenProject reactorProject : getReactorProjects())</line>
<line sev="1">            {</line>
<line sev="1" covered="no">                if (getTestClasses() == null)</line>
<line sev="1">                {</line>
<line sev="1" covered="no">                    qaConfig.addClassPath(</line>
<line sev="1"><diag id="435"/>                        new File(reactorProject.getBasedir(), &quot;target/test-classes&quot;).getPath());</line>
<line sev="1">                }</line>
<line sev="1">                else</line>
<line sev="1">                {</line>
<line sev="1" covered="no">                    for (String testClazz : getTestClasses())</line>
<line sev="1">                    {</line>
<line sev="1" covered="no">                        qaConfig.addClassPath(</line>
<line sev="1"><diag id="436"/>                            new File(reactorProject.getBasedir(), testClazz).getPath());</line>
<line sev="1">                    }</line>
<line sev="1">                }</line>
<line sev="1">            }</line>
<line sev="1">        }</line>
<line sev="1" covered="no">        else if (getTestClasses() == null)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            qaConfig.addClassPath(</line>
<line sev="1">                new File(getProject().getBasedir(), &quot;target/test-classes&quot;).getPath());</line>
<line sev="1">        }</line>
<line sev="1">        else</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            for (String testClazz : getTestClasses())</line>
<line sev="1">            {</line>
<line sev="1" covered="no">                qaConfig.addClassPath(</line>
<line sev="1"><diag id="437"/>                    new File(getProject().getBasedir(), testClazz).getPath());</line>
<line sev="1">            }</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        if (aggregating)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            if (getLibraries() == null)</line>
<line sev="1">            {</line>
<line sev="1" covered="no">                for (MavenProject reactorProject : getReactorProjects())</line>
<line sev="1">            {</line>
<line sev="1">                try</line>
<line sev="1">                {</line>
<line sev="1" covered="no">                    for (Artifact artifact : getTransitiveDependencies(reactorProject))</line>
<line sev="1">                    {</line>
<line sev="1" covered="no">                        qaConfig.addLibraryPath(artifact.getFile().getPath());</line>
<line sev="1">                    }</line>
<line sev="1">                }</line>
<line sev="1" covered="no">                catch (Exception e)</line>
<line sev="1">                {</line>
<line sev="1">                    // QA task will not be as accurate, log a warning</line>
<line sev="1" covered="no">                    getLog().warn(&quot;Unable to resolve library dependencies, analysis may not be as accurate.&quot;, e);</line>
<line sev="1" covered="no">                }</line>
<line sev="1">            }</line>
<line sev="1">        }</line>
<line sev="1">            else</line>
<line sev="1">            {</line>
<line sev="1" covered="no">                for (String library : getLibraries())</line>
<line sev="1">                {</line>
<line sev="1" covered="no">                    qaConfig.addLibraryPath(library);</line>
<line sev="1">                }</line>
<line sev="1">            }</line>
<line sev="1">        }</line>
<line sev="1" covered="no">        else if (getLibraries() == null)</line>
<line sev="1">        {</line>
<line sev="1">            try</line>
<line sev="1">            {</line>
<line sev="1" covered="no">                for (Artifact artifact : getTransitiveDependencies(getProject()))</line>
<line sev="1">                {</line>
<line sev="1" covered="no">                    qaConfig.addLibraryPath(artifact.getFile().getPath());</line>
<line sev="1">                }</line>
<line sev="1">            }</line>
<line sev="1" covered="no">            catch (Exception e)</line>
<line sev="1">            {</line>
<line sev="1">                // QA task will not be as accurate, log a warning</line>
<line sev="1" covered="no">                getLog().warn(&quot;Unable to resolve library dependencies, analysis may not be as accurate.&quot;, e);</line>
<line sev="1" covered="no">            }</line>
<line sev="1">        }</line>
<line sev="1">        else</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            for (String library : getLibraries())</line>
<line sev="1">            {</line>
<line sev="1" covered="no">                qaConfig.addLibraryPath(library);</line>
<line sev="1">            }</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        if (aggregating)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            for (MavenProject reactorProject : getReactorProjects())</line>
<line sev="1">            {</line>
<line sev="1" covered="no">                qaConfig.addCoverageDataFile(</line>
<line sev="1"><diag id="438"/>                    new File(reactorProject.getBasedir(), getCoverageDataFile()).getPath());</line>
<line sev="1">            }</line>
<line sev="1">        }</line>
<line sev="1">        else</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            qaConfig.setCoverageDataFile(</line>
<line sev="1">                new File(getProject().getBasedir(), getCoverageDataFile()).getPath());</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        qaConfig.setCoverageMergeDataFile(getCoverageMergeDataFile());</line>
<line sev="1" covered="no">        qaConfig.setIncludeToolOutput(isIncludeToolOutput());</line>
<line sev="1" covered="no">        qaConfig.setJavaRuntime(getJavaRuntime());</line>
<line sev="1" covered="no">        qaConfig.setJavaArgs(getJavaArgs());</line>
<line sev="1" covered="no">        qaConfig.setNumThreads(getNumThreads());</line>
<line sev="1" covered="no">        qaConfig.setProductsDir(getProductsDir());</line>
<line sev="1" covered="no">        qaConfig.setReportDir(getReportDir());</line>
<line sev="1" covered="no">        qaConfig.setSummaryDataFile(getSummaryDataFile().replaceAll(&quot; &quot;, &quot;&quot;));</line>
<line sev="1" covered="no">        qaConfig.setTempDir(getTempDir());</line>
<line sev="1" covered="no">        qaConfig.setExternalPropertiesPath(getExternalPropertiesPath(), getAdditionalProperties());</line>
<line sev="1"/>
<line sev="1" covered="no">        if (isUseHistory())</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            retrieveSanity4jStats();</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        if (getCheckStyleConfig() != null)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            String version = qaConfig.getToolVersion(Tool.CHECKSTYLE.getId());</line>
<line sev="1" covered="no">            qaConfig.setToolConfig(Tool.CHECKSTYLE.getId(), null, getCheckStyleConfig(), getCheckStyleConfigClasspath());</line>
<line sev="1" covered="no">            qaConfig.setToolConfig(Tool.CHECKSTYLE.getId(), version, getCheckStyleConfig(), getCheckStyleConfigClasspath());</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        if (getFindBugsConfig() != null)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            String version = qaConfig.getToolVersion(Tool.FINDBUGS.getId());</line>
<line sev="1" covered="no">            qaConfig.setToolConfig(Tool.FINDBUGS.getId(), null, getFindBugsConfig(), getFindBugsConfigClasspath());</line>
<line sev="1" covered="no">            qaConfig.setToolConfig(Tool.FINDBUGS.getId(), version, getFindBugsConfig(), getFindBugsConfigClasspath());</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        if (getPmdConfig() != null)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            String version = qaConfig.getToolVersion(Tool.PMD.getId());</line>
<line sev="1" covered="no">            qaConfig.setToolConfig(Tool.PMD.getId(), null, getPmdConfig(), getPmdConfigClasspath());</line>
<line sev="1" covered="no">            qaConfig.setToolConfig(Tool.PMD.getId(), version, getPmdConfig(), getPmdConfigClasspath());</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1">        // TODO: HACK! Get around Stax using the context classloader rather than this class's.</line>
<line sev="1">        // Need to write a custom class loader which combines the two.</line>
<line sev="1" covered="no">        ClassLoader oldLoader = Thread.currentThread().getContextClassLoader();</line>
<line sev="1" covered="no">        Thread.currentThread().setContextClassLoader(getClass().getClassLoader());</line>
<line sev="1" covered="no">        sanity4j.run();</line>
<line sev="1" covered="no">        Thread.currentThread().setContextClassLoader(oldLoader);</line>
<line sev="1" covered="no">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Resolves the list of Transitive Dependencies for the specified artifact.</line>
<line sev="1">     * </line>
<line sev="1">     * @param artifact The artifact for which to resolve the transitive dependencies.</line>
<line sev="1">     * @param jars The list for which to populate the resolved file paths for all the transitive dependencies.</line>
<line sev="1">     */</line>
<line sev="1">    public void getTransitiveDependencies(final String artifact, final List&lt;String&gt; jars) </line>
<line sev="1">    {</line>
<line sev="1">        try </line>
<line sev="1">        {</line>
<line sev="1" covered="no">            for (Artifact artifactItem : getTransitiveDependencies(artifact))</line>
<line sev="1">            {</line>
<line sev="1" covered="no">                jars.add(artifactItem.getFile().getPath());</line>
<line sev="1">            }</line>
<line sev="1">        } </line>
<line sev="1" covered="no">        catch (Exception ex) </line>
<line sev="1">        {</line>
<line sev="1" covered="no">            throw new QAException(ex.getClass().getName() + &quot;: &quot;, ex);</line>
<line sev="1" covered="no">        }</line>
<line sev="1" covered="no">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Resolves the list of Transitive Dependencies for the specified artifact.</line>
<line sev="1">     * </line>
<line sev="1">     * @param artifact The artifact for which to resolve the transitive dependencies.</line>
<line sev="1">     * @return The set of resolved transitive dependencies.</line>
<line sev="1">     * </line>
<line sev="1">     * @throws DependencyGraphBuilderException Thrown if a problem occurs.</line>
<line sev="1">     * @throws MojoExecutionException Thrown if a problem occurs.</line>
<line sev="1">     * @throws CloneNotSupportedException Thrown if a problem occurs.</line>
<line sev="1">     * @throws InvalidVersionSpecificationException Thrown if a problem occurs.</line>
<line sev="1">     * @throws ProjectBuildingException Thrown if a problem occurs.</line>
<line sev="1">     * @throws IllegalAccessException Thrown if a problem occurs.</line>
<line sev="1">     * @throws InvocationTargetException Thrown if a problem occurs.</line>
<line sev="1">     * @throws NoSuchMethodException Thrown if a problem occurs.</line>
<line sev="1">     */</line>
<line sev="1">    private Set&lt;Artifact&gt; getTransitiveDependencies(final String artifact) </line>
<line sev="1"><diag id="13"/><diag id="14"/><diag id="15"/><diag id="16"/><diag id="17"/><diag id="18"/><diag id="19"/>        throws DependencyGraphBuilderException, MojoExecutionException, CloneNotSupportedException, InvalidVersionSpecificationException, ProjectBuildingException, IllegalAccessException, InvocationTargetException, NoSuchMethodException</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        Coordinate coordinate = new Coordinate(artifact);</line>
<line sev="1" covered="no">        Artifact mavenArtifact = getArtifact(coordinate.getGroupId(), coordinate.getArtifactId(), coordinate.getVersion(), coordinate.getScope(), coordinate.getPackaging(), coordinate.getClassifier());</line>
<line sev="1" covered="no">        return getTransitiveDependencies(mavenArtifact);</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Assembles a Maven Artifact object.</line>
<line sev="1">     * </line>
<line sev="1">     * @param groupId The groupId.</line>
<line sev="1">     * @param artifactId The artifactId.</line>
<line sev="1">     * @param version The version.</line>
<line sev="1">     * @param scope The scope.</line>
<line sev="1">     * @param type The type.</line>
<line sev="1">     * @param classifier The classifier.</line>
<line sev="1">     * @return The assembled Maven Artifact object.</line>
<line sev="1">     * @throws InvalidVersionSpecificationException Thrown if the version could not be idientified.</line>
<line sev="1">     */</line>
<line sev="1">    private Artifact getArtifact(final String groupId, final String artifactId, final String version, final String scope, final String type, final String classifier) </line>
<line sev="1"><diag id="20"/>        throws InvalidVersionSpecificationException</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return new DefaultArtifact(</line>
<line sev="1">            groupId, artifactId, VersionRange.createFromVersionSpec(version), scope, type, classifier, new DefaultArtifactHandler(type));</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Resolves the list of Transitive Dependencies for the specified artifact.</line>
<line sev="1">     * </line>
<line sev="1">     * @param artifact The artifact for which to resolve the transitive dependencies.</line>
<line sev="1">     * @return The set of resolved transitive dependencies.</line>
<line sev="1">     * </line>
<line sev="1">     * @throws DependencyGraphBuilderException Thrown if a problem occurs.</line>
<line sev="1">     * @throws MojoExecutionException Thrown if a problem occurs.</line>
<line sev="1">     * @throws CloneNotSupportedException Thrown if a problem occurs.</line>
<line sev="1">     * @throws InvalidVersionSpecificationException Thrown if a problem occurs.</line>
<line sev="1">     * @throws ProjectBuildingException Thrown if a problem occurs.</line>
<line sev="1">     * @throws IllegalAccessException Thrown if a problem occurs.</line>
<line sev="1">     * @throws InvocationTargetException Thrown if a problem occurs.</line>
<line sev="1">     * @throws NoSuchMethodException Thrown if a problem occurs.</line>
<line sev="1">     */</line>
<line sev="1">    private Set&lt;Artifact&gt; getTransitiveDependencies(final Artifact artifact) </line>
<line sev="1"><diag id="21"/><diag id="22"/><diag id="23"/><diag id="24"/><diag id="25"/><diag id="26"/><diag id="27"/>        throws DependencyGraphBuilderException, MojoExecutionException, CloneNotSupportedException, InvalidVersionSpecificationException, ProjectBuildingException, IllegalAccessException, InvocationTargetException, NoSuchMethodException</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        ProjectBuildingRequest request = new DefaultProjectBuildingRequest();</line>
<line sev="1">        //request.setUserProperties(getProject().getProperties());</line>
<line sev="1" covered="no">        request.setSystemProperties(System.getProperties());</line>
<line sev="1" covered="no">        request.setLocalRepository(getLocalRepo());</line>
<line sev="1" covered="no">        request.setRemoteRepositories(getRemoteRepos());</line>
<line sev="1"/>
<line sev="1">        // Support for Maven 3.0 / 3.1+ (Move from Sonatype-Aether to Eclipse-Aether).</line>
<line sev="1">        //request.setRepositorySession(session);</line>
<line sev="1" covered="no">        invoke(request, &quot;setRepositorySession&quot;, getSession());</line>
<line sev="1"/>
<line sev="1" covered="no"><diag id="28"/>        MavenProject project = getProjectBuilder().build(artifact, request).getProject();</line>
<line sev="1"/>
<line sev="1" covered="no">        return getTransitiveDependencies(project);</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Uses reflection to invoke a method on an object, passing in the arguments as parameters.</line>
<line sev="1">     * Attempts to determine the method signature by using the first Interface of each argument's Class. </line>
<line sev="1">     * </line>
<line sev="1">     * Note, we should probably try to make a better attempt at identifying the method signature rather </line>
<line sev="1">     * than simply using the first Interface of the argument's Class. However for the moment it is enough </line>
<line sev="1">     * for it to support the use by it's only caller. </line>
<line sev="1">     * </line>
<line sev="1">     * @param object The Object on which to invoke the method.</line>
<line sev="1">     * @param method The name of the method to invoke on the Object.</line>
<line sev="1">     * @param args The parameters to pass to the method.</line>
<line sev="1">     * @return The returned object of the method invoked.</line>
<line sev="1">     * </line>
<line sev="1">     * @throws IllegalAccessException Thrown if the method cannot be invoked.</line>
<line sev="1">     * @throws InvocationTargetException Thrown if the invoked method throws an Exception. </line>
<line sev="1">     * @throws NoSuchMethodException Thrown if the method cannot be identified.</line>
<line sev="1">     */</line>
<line sev="1">    private Object invoke(final Object object, final String method, final Object... args)</line>
<line sev="1">        throws IllegalAccessException, InvocationTargetException, NoSuchMethodException</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        Class&lt;?&gt;[] types = new Class&lt;?&gt;[args.length];</line>
<line sev="1"/>
<line sev="1" covered="no">        for (int i = 0; i &lt; args.length; i++)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            types[i] = args[i].getClass().getInterfaces()[0];</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        return object.getClass().getMethod(method, types).invoke(object, args);</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Resolves the list of Transitive Dependencies for the specified Maven Project.</line>
<line sev="1">     * </line>
<line sev="1">     * @param project The Maven Project for which to resolve the transitive dependencies.</line>
<line sev="1">     * @return The set of resolved transitive dependencies.</line>
<line sev="1">     * </line>
<line sev="1">     * @throws DependencyGraphBuilderException Thrown if a problem occurs.</line>
<line sev="1">     * @throws MojoExecutionException Thrown if a problem occurs.</line>
<line sev="1">     */</line>
<line sev="1"><diag id="29"/>    private Set&lt;Artifact&gt; getTransitiveDependencies(final MavenProject project) </line>
<line sev="1"><diag id="30"/><diag id="31"/><diag id="32"/>        throws DependencyGraphBuilderException, MojoExecutionException</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        DependencyNode rootNode = getDependencyGraphBuilder().buildDependencyGraph(project, new ArtifactFilter()</line>
<line sev="1" covered="no">        {</line>
<line sev="1">            public boolean include(final Artifact artifact) </line>
<line sev="1">            {</line>
<line sev="1" covered="no">                return !Artifact.SCOPE_SYSTEM.equals(artifact.getScope());</line>
<line sev="1">            }</line>
<line sev="1">        });</line>
<line sev="1"/>
<line sev="1" covered="no">        Set&lt;Artifact&gt; sortedArtifacts = new LinkedHashSet&lt;Artifact&gt;();</line>
<line sev="1"/>
<line sev="1" covered="no">        sortedArtifacts.add(rootNode.getArtifact());</line>
<line sev="1" covered="no">        flattenChildren(sortedArtifacts, rootNode);</line>
<line sev="1"/>
<line sev="1" covered="no">        ArtifactsResolver artifactsResolver = new DefaultArtifactsResolver(getResolver(), getLocalRepo(), getRemoteRepos(), true);</line>
<line sev="1"/>
<line sev="1" covered="no">        Set&lt;Artifact&gt; resolvedArtifacts = artifactsResolver.resolve(sortedArtifacts, getLog());</line>
<line sev="1"/>
<line sev="1" covered="no">        Set&lt;Artifact&gt; orderedArtifacts = new LinkedHashSet&lt;Artifact&gt;();</line>
<line sev="1"/>
<line sev="1" covered="no">        for (Artifact sortedArtifact : sortedArtifacts)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            for (Artifact resolvedArtifact : resolvedArtifacts)</line>
<line sev="1">            {</line>
<line sev="1" covered="no">                if (sortedArtifact.compareTo(resolvedArtifact) == 0)</line>
<line sev="1">                {</line>
<line sev="1" covered="no">                    orderedArtifacts.add(resolvedArtifact);</line>
<line sev="1">                }</line>
<line sev="1">            }</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        return orderedArtifacts;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Resolves a single Artifact.</line>
<line sev="1">     * </line>
<line sev="1">     * @param artifact The Artifact for which to resolve.</line>
<line sev="1">     * @return The File referencing the resolved Artifact.</line>
<line sev="1">     */</line>
<line sev="1">    public File resolveArtifact(final String artifact) </line>
<line sev="1">    {</line>
<line sev="1">        try</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            Coordinate coordinate = new Coordinate(artifact);</line>
<line sev="1"/>
<line sev="1" covered="no">        Set&lt;Artifact&gt; artifacts = new HashSet&lt;Artifact&gt;();</line>
<line sev="1" covered="no">            artifacts.add(getArtifact(coordinate.getGroupId(), coordinate.getArtifactId(), coordinate.getVersion(), coordinate.getScope(), coordinate.getPackaging(), coordinate.getClassifier()));</line>
<line sev="1"/>
<line sev="1" covered="no">            ArtifactsResolver artifactsResolver = new DefaultArtifactsResolver(getResolver(), getLocalRepo(), getRemoteRepos(), true);</line>
<line sev="1"/>
<line sev="1" covered="no">            artifacts = artifactsResolver.resolve(artifacts, getLog());</line>
<line sev="1"/>
<line sev="1" covered="no">            return artifacts.toArray(new Artifact[1])[0].getFile();</line>
<line sev="1"/>
<line sev="1">        } </line>
<line sev="1" covered="no">        catch (Exception ex) </line>
<line sev="1">        {</line>
<line sev="1" covered="no">            throw new QAException(ex.getClass().getName() + &quot;: &quot;, ex);</line>
<line sev="1">        }</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Recursively traverses the hierarchy of the dependency tree flattening it's contents into a Set of Artifacts.</line>
<line sev="1">     * </line>
<line sev="1">     * @param artifacts The Set for which to populate the Artifacts. </line>
<line sev="1">     * @param rootNode The start or currently positioned node within the dependency tree.</line>
<line sev="1">     * @return The same Set of Artifacts as passed in, with the Artifacts populated.</line>
<line sev="1">     */</line>
<line sev="1">    private Set&lt;Artifact&gt; flattenChildren(final Set&lt;Artifact&gt; artifacts, final DependencyNode rootNode)</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        if (rootNode.getChildren() != null)</line>
<line sev="1">        {</line>
<line sev="1">            // Add all the child artifacts first.</line>
<line sev="1" covered="no">            for (DependencyNode node : rootNode.getChildren())</line>
<line sev="1">            {</line>
<line sev="1" covered="no">                artifacts.add(node.getArtifact());</line>
<line sev="1">            }</line>
<line sev="1"/>
<line sev="1">            // Then add all the grand children second.</line>
<line sev="1" covered="no">            for (DependencyNode node : rootNode.getChildren())</line>
<line sev="1">            {</line>
<line sev="1" covered="no">                flattenChildren(artifacts, node);</line>
<line sev="1">            }</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        return artifacts;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * If available, retrieves sanity4j historical results from 'site' repository.</line>
<line sev="1">     */</line>
<line sev="1">    private void retrieveSanity4jStats()</line>
<line sev="1">    {</line>
<line sev="1">        try</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            DistributionManagement distributionManagement = getProject().getDistributionManagement();</line>
<line sev="1" covered="no">            if (distributionManagement == null)</line>
<line sev="1">            {</line>
<line sev="1" covered="no">                getLog().info(&quot;'Site' distribution management not defined. No build history will be graphed. Continuing 'sanity4j' checks.&quot;);</line>
<line sev="1">            }</line>
<line sev="1">            else</line>
<line sev="1">            {</line>
<line sev="1" covered="no">                Site site = distributionManagement.getSite();</line>
<line sev="1"/>
<line sev="1" covered="no">                if (site == null)</line>
<line sev="1">                {</line>
<line sev="1" covered="no">                    getLog().info(&quot;'Site' distribution management not defined. No build history will be graphed. Continuing 'sanity4j' checks.&quot;);</line>
<line sev="1">                }</line>
<line sev="1">                else</line>
<line sev="1">                {</line>
<line sev="1" covered="no">                    InvocationRequest request = new DefaultInvocationRequest();</line>
<line sev="1" covered="no">                    request.setGoals(Collections.singletonList(DOWNLOAD_SINGLE_MOJO));</line>
<line sev="1" covered="no">                    Properties props = new Properties();</line>
<line sev="1"/>
<line sev="1" covered="no">                    String siteUrl = site.getUrl();</line>
<line sev="1" covered="no">                    props.put(&quot;wagon.url&quot;, siteUrl);</line>
<line sev="1" covered="no">                    String dataFileName = getSummaryDataFile().replaceAll(&quot; &quot;, &quot;&quot;);</line>
<line sev="1" covered="no">                    props.put(&quot;wagon.fromFile&quot;, new File(dataFileName).getName());</line>
<line sev="1" covered="no">                    props.put(&quot;wagon.toDir&quot;, getProject().getReporting().getOutputDirectory());</line>
<line sev="1" covered="no">                    request.setProperties(props);</line>
<line sev="1"/>
<line sev="1" covered="no">                    getLog().info(&quot;Retrieveing 'sanity4j' statistics from URL: &quot; + props);</line>
<line sev="1" covered="no">                    Invoker invoker = new DefaultInvoker();</line>
<line sev="1" covered="no">                    invoker.execute(request);</line>
<line sev="1">                }</line>
<line sev="1">            }</line>
<line sev="1">        }</line>
<line sev="1" covered="no">        catch (Exception e)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            getLog().error(&quot;Unable to retrieve extisting report statistics. Continuing 'sanity4j' checks.&quot;, e);</line>
<line sev="1" covered="no">        }</line>
<line sev="1" covered="no">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Recursive check for existence of .java file.</line>
<line sev="1">     *</line>
<line sev="1">     * @param srcFile the &lt;code&gt;File&lt;/code&gt; to start .java check from</line>
<line sev="1">     * @return true if .java file exists; otherwise false</line>
<line sev="1">     */</line>
<line sev="1">    private boolean checkForSource(final File srcFile)</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        if (getLog().isDebugEnabled())</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            getLog().debug(&quot;checking if '.java' file: Location: &quot; + srcFile.getAbsolutePath());</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        boolean srcFileMatch = false;</line>
<line sev="1"/>
<line sev="1" covered="no">        if (srcFile.isDirectory())</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            File[] srcFiles = srcFile.listFiles();</line>
<line sev="1" covered="no">            for (File files : srcFiles)</line>
<line sev="1">            {</line>
<line sev="1" covered="no">                if (checkForSource(files))</line>
<line sev="1">                {</line>
<line sev="1" covered="no">                    srcFileMatch = true;</line>
<line sev="1" covered="no">                    break;</line>
<line sev="1">                }</line>
<line sev="1">            }</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        if (srcFile.getName().endsWith(&quot;.java&quot;))</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            srcFileMatch = true;</line>
<line sev="1" covered="no">            getLog().debug(&quot;Found '.java' file. Remaining recursive call will be skipped&quot;);</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="no">        return srcFileMatch;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Write out some small text to a file.</line>
<line sev="1">     *</line>
<line sev="1">     * @param file The file to write to.</line>
<line sev="1">     * @param text The text to write to that file.</line>
<line sev="1">     */</line>
<line sev="1">    private void writeTextFile(final File file, final String text)</line>
<line sev="1">    {</line>
<line sev="1">        try</line>
<line sev="1">        {</line>
<line sev="1" covered="no"><diag id="329"/>            BufferedWriter writer = new BufferedWriter(new FileWriter(file));</line>
<line sev="1" covered="no">            writer.write(text);</line>
<line sev="1" covered="no">            writer.close();</line>
<line sev="1">        }</line>
<line sev="1" covered="no">        catch (IOException ex)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            getLog().warn(&quot;Unable to write file: &quot; + file.getName());</line>
<line sev="1" covered="no">        }</line>
<line sev="1" covered="no">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @see org.apache.maven.reporting.AbstractMavenReport#getProject()</line>
<line sev="1">     *</line>
<line sev="1">     * @return the maven project.</line>
<line sev="1">     */</line>
<line sev="1">    @Override</line>
<line sev="1">    public MavenProject getProject()</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return project;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @see org.apache.maven.reporting.AbstractMavenReport#getOutputDirectory()</line>
<line sev="1">     *</line>
<line sev="1">     * @return the output directory.</line>
<line sev="1">     */</line>
<line sev="1">    @Override</line>
<line sev="1">    protected String getOutputDirectory()</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return reportDir;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @see org.apache.maven.reporting.AbstractMavenReport#getSiteRenderer()</line>
<line sev="1">     *</line>
<line sev="1">     * @return the site renderer.</line>
<line sev="1">     */</line>
<line sev="1">    @Override</line>
<line sev="1">    protected Renderer getSiteRenderer()</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return siteRenderer;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @see org.apache.maven.reporting.MavenReport#getDescription(java.util.Locale)</line>
<line sev="1">     *</line>
<line sev="1">     * @param locale the locale</line>
<line sev="1">     * @return the description.</line>
<line sev="1">     */</line>
<line sev="1">    public String getDescription(final Locale locale)</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return getBundle(locale).getString(&quot;report.sanity4j.description&quot;);</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @see org.apache.maven.reporting.MavenReport#getName(java.util.Locale)</line>
<line sev="1">     *</line>
<line sev="1">     * @param locale the locale</line>
<line sev="1">     * @return the name.</line>
<line sev="1">     */</line>
<line sev="1">    public String getName(final Locale locale)</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return getBundle(locale).getString(&quot;report.sanity4j.name&quot;);</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @see org.apache.maven.reporting.MavenReport#getOutputName()</line>
<line sev="1">     *</line>
<line sev="1">     * @return the output name.</line>
<line sev="1">     */</line>
<line sev="1">    public String getOutputName()</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return &quot;sanity4j/index&quot;;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Indicates that this report is external so that the generated index.html</line>
<line sev="1">     * file is not overwritten by the default maven template.</line>
<line sev="1">     *</line>
<line sev="1">     * @see org.apache.maven.reporting.MavenReport#isExternalReport()</line>
<line sev="1">     *</line>
<line sev="1">     * @return true to indicate that the report is external.</line>
<line sev="1">     */</line>
<line sev="1">    @Override</line>
<line sev="1">    public boolean isExternalReport()</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return true;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Gets the resource bundle for the report text.</line>
<line sev="1">     *</line>
<line sev="1">     * @param locale The locale for the report, must not be &lt;code&gt;null&lt;/code&gt;.</line>
<line sev="1">     * @return The resource bundle for the requested locale.</line>
<line sev="1">     */</line>
<line sev="1">    private ResourceBundle getBundle(final Locale locale)</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return ResourceBundle.getBundle(&quot;sanity4j-maven-report&quot;, locale,</line>
<line sev="1">            getClass().getClassLoader());</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return The Reactor Projects.</line>
<line sev="1">     */</line>
<line sev="1">    public List&lt;MavenProject&gt; getReactorProjects() </line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return reactorProjects;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return The Dependency Graph Builder. </line>
<line sev="1">     */</line>
<line sev="1">    public DependencyGraphBuilder getDependencyGraphBuilder() </line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return dependencyGraphBuilder;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return The Artifact Resolver.</line>
<line sev="1">     */</line>
<line sev="1">    public ArtifactResolver getResolver() </line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return resolver;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return The Project Builder.</line>
<line sev="1">     */</line>
<line sev="1">    public ProjectBuilder getProjectBuilder() </line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return projectBuilder;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Can be one of the below.</line>
<line sev="1">     * &lt;pre&gt; </line>
<line sev="1">     * org.sonatype.aether.RepositorySystemSession</line>
<line sev="1">     * org.eclipse.aether.RepositorySystemSession</line>
<line sev="1">     * &lt;/pre&gt;</line>
<line sev="1">     * </line>
<line sev="1">     * @return The Repository System Session.</line>
<line sev="1">     */</line>
<line sev="1">    public Object getSession() </line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return session;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return The Local Artifact Repsoitory.</line>
<line sev="1">     */</line>
<line sev="1">    public ArtifactRepository getLocalRepo() </line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return localRepo;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return The List of Remote Artifact Repositories.  </line>
<line sev="1">     */</line>
<line sev="1">    public List&lt;ArtifactRepository&gt; getRemoteRepos() </line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return remoteRepos;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return Is Aggregate.</line>
<line sev="1">     */</line>
<line sev="1">    public boolean isAggregate() </line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return aggregate;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return The Sources.</line>
<line sev="1">     */</line>
<line sev="1">    public String[] getSources() </line>
<line sev="1">    {</line>
<line sev="1" covered="no"><diag id="332"/><diag id="441"/>        return sources;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return The Test Sources.</line>
<line sev="1">     */</line>
<line sev="1">    public String[] getTestSources() </line>
<line sev="1">    {</line>
<line sev="1" covered="no"><diag id="334"/><diag id="442"/>        return testSources;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return The Classes.</line>
<line sev="1">     */</line>
<line sev="1">    public String[] getClasses() </line>
<line sev="1">    {</line>
<line sev="1" covered="no"><diag id="330"/><diag id="443"/>        return classes;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return The Test Classes.</line>
<line sev="1">     */</line>
<line sev="1">    public String[] getTestClasses() </line>
<line sev="1">    {</line>
<line sev="1" covered="no"><diag id="333"/><diag id="444"/>        return testClasses;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return The Libraries.</line>
<line sev="1">     */</line>
<line sev="1">    public String[] getLibraries() </line>
<line sev="1">    {</line>
<line sev="1" covered="no"><diag id="331"/><diag id="445"/>        return libraries;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return The Products Dir.</line>
<line sev="1">     */</line>
<line sev="1">    public String getProductsDir() </line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return productsDir;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return The Report Dir.</line>
<line sev="1">     */</line>
<line sev="1">    public String getReportDir() </line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return reportDir;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return The Coverage Data File.</line>
<line sev="1">     */</line>
<line sev="1">    public String getCoverageDataFile() </line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return coverageDataFile;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return The Coverage Merge Data File.</line>
<line sev="1">     */</line>
<line sev="1">    public String getCoverageMergeDataFile() </line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return coverageMergeDataFile;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return The Summary Data File.</line>
<line sev="1">     */</line>
<line sev="1">    public String getSummaryDataFile() </line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return summaryDataFile;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return The External Properties Path.</line>
<line sev="1">     */</line>
<line sev="1">    public String getExternalPropertiesPath() </line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return externalPropertiesPath;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return The Check Style Config.</line>
<line sev="1">     */</line>
<line sev="1">    public String getCheckStyleConfig() </line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return checkStyleConfig;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return The Check Style Config Classpath.</line>
<line sev="1">     */</line>
<line sev="1">    public String getCheckStyleConfigClasspath() </line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return checkStyleConfigClasspath;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return The Fins Bugs Config.</line>
<line sev="1">     */</line>
<line sev="1">    public String getFindBugsConfig() </line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return findBugsConfig;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return The Find Bugs Config Classpath. </line>
<line sev="1">     */</line>
<line sev="1">    public String getFindBugsConfigClasspath() </line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return findBugsConfigClasspath;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return The Pmd Config.</line>
<line sev="1">     */</line>
<line sev="1">    public String getPmdConfig() </line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return pmdConfig;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return The Additional Properties.</line>
<line sev="1">     */</line>
<line sev="1">    public String getAdditionalProperties() </line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return additionalProperties;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return The Pmd Config Classpath.</line>
<line sev="1">     */</line>
<line sev="1">    public String getPmdConfigClasspath() </line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return pmdConfigClasspath;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return The Temp Dir.</line>
<line sev="1">     */</line>
<line sev="1">    public File getTempDir() </line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return tempDir;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return The Java Runtime. </line>
<line sev="1">     */</line>
<line sev="1">    public String getJavaRuntime() </line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return javaRuntime;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return The Java Args.</line>
<line sev="1">     */</line>
<line sev="1">    public String getJavaArgs() </line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return javaArgs;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return Is Include Tool Output.</line>
<line sev="1">     */</line>
<line sev="1">    public boolean isIncludeToolOutput() </line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return includeToolOutput;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return The Num Threads.</line>
<line sev="1">     */</line>
<line sev="1">    public int getNumThreads() </line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return numThreads;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * @return Is Use History.</line>
<line sev="1">     */</line>
<line sev="1">    public boolean isUseHistory() </line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return useHistory;</line>
<line sev="1">    }</line>
<line sev="1">}</line>
</source>
<diags first="false">
<diag id="382" sev="0" tool="PMD" rule="ExcessiveImports">
A high number of imports can indicate a high degree of coupling within an object.
</diag>
<diag id="383" sev="0" tool="PMD" rule="ExcessiveClassLength">
Avoid really long classes.
</diag>
<diag id="384" sev="1" tool="PMD" rule="CyclomaticComplexity">
The class 'RunQAMojo' has a Cyclomatic Complexity of 2 (Highest = 46).
</diag>
<diag id="385" sev="0" tool="PMD" rule="TooManyFields">
Too many fields
</diag>
<diag id="386" sev="0" tool="PMD" rule="TooManyMethods">
This class has too many methods, consider refactoring it.
</diag>
<diag id="11" sev="1" tool="Checkstyle" rule="MethodLengthCheck">Method length is 278 lines (max allowed is 150).</diag>
<diag id="12" sev="1" tool="Checkstyle" rule="RedundantThrowsCheck">Unable to get class information for MavenReportException.</diag>
<diag id="421" sev="0" tool="PMD" rule="ExcessiveMethodLength">
Avoid really long methods.
</diag>
<diag id="422" sev="1" tool="PMD" rule="CyclomaticComplexity">
The method 'executeReport' has a Cyclomatic Complexity of 46.
</diag>
<diag id="423" sev="0" tool="PMD" rule="NcssMethodCount">
The method executeReport() has an NCSS line count of 142
</diag>
<diag id="424" sev="0" tool="PMD" rule="NPathComplexity">
The method executeReport() has an NPath complexity of 22819104
</diag>
<diag id="425" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="426" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="427" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="428" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="429" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="430" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="431" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="432" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="433" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="434" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="435" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="436" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="437" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="438" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="13" sev="1" tool="Checkstyle" rule="RedundantThrowsCheck">Unable to get class information for DependencyGraphBuilderException.</diag>
<diag id="14" sev="1" tool="Checkstyle" rule="RedundantThrowsCheck">Redundant throws: 'MojoExecutionException' listed more then one time.</diag>
<diag id="15" sev="1" tool="Checkstyle" rule="RedundantThrowsCheck">Unable to get class information for MojoExecutionException.</diag>
<diag id="16" sev="1" tool="Checkstyle" rule="RedundantThrowsCheck">Redundant throws: 'InvalidVersionSpecificationException' listed more then one time.</diag>
<diag id="17" sev="1" tool="Checkstyle" rule="RedundantThrowsCheck">Unable to get class information for InvalidVersionSpecificationException.</diag>
<diag id="18" sev="1" tool="Checkstyle" rule="RedundantThrowsCheck">Redundant throws: 'ProjectBuildingException' listed more then one time.</diag>
<diag id="19" sev="1" tool="Checkstyle" rule="RedundantThrowsCheck">Unable to get class information for ProjectBuildingException.</diag>
<diag id="20" sev="1" tool="Checkstyle" rule="RedundantThrowsCheck">Unable to get class information for InvalidVersionSpecificationException.</diag>
<diag id="21" sev="1" tool="Checkstyle" rule="RedundantThrowsCheck">Unable to get class information for DependencyGraphBuilderException.</diag>
<diag id="22" sev="1" tool="Checkstyle" rule="RedundantThrowsCheck">Redundant throws: 'MojoExecutionException' listed more then one time.</diag>
<diag id="23" sev="1" tool="Checkstyle" rule="RedundantThrowsCheck">Unable to get class information for MojoExecutionException.</diag>
<diag id="24" sev="1" tool="Checkstyle" rule="RedundantThrowsCheck">Redundant throws: 'InvalidVersionSpecificationException' listed more then one time.</diag>
<diag id="25" sev="1" tool="Checkstyle" rule="RedundantThrowsCheck">Unable to get class information for InvalidVersionSpecificationException.</diag>
<diag id="26" sev="1" tool="Checkstyle" rule="RedundantThrowsCheck">Redundant throws: 'ProjectBuildingException' listed more then one time.</diag>
<diag id="27" sev="1" tool="Checkstyle" rule="RedundantThrowsCheck">Unable to get class information for ProjectBuildingException.</diag>
<diag id="28" sev="1" tool="Checkstyle" rule="HiddenFieldCheck">'project' hides a field.</diag>
<diag id="29" sev="1" tool="Checkstyle" rule="HiddenFieldCheck">'project' hides a field.</diag>
<diag id="30" sev="1" tool="Checkstyle" rule="RedundantThrowsCheck">Unable to get class information for DependencyGraphBuilderException.</diag>
<diag id="31" sev="1" tool="Checkstyle" rule="RedundantThrowsCheck">Redundant throws: 'MojoExecutionException' listed more then one time.</diag>
<diag id="32" sev="1" tool="Checkstyle" rule="RedundantThrowsCheck">Unable to get class information for MojoExecutionException.</diag>
<diag id="329" sev="0" tool="Findbugs" rule="DM_DEFAULT_ENCODING">Found reliance on default encoding in net.sf.sanity4j.maven.plugin.RunQAMojo.writeTextFile(File, String): new java.io.FileWriter(File)</diag>
<diag id="332" sev="0" tool="Findbugs" rule="EI_EXPOSE_REP">net.sf.sanity4j.maven.plugin.RunQAMojo.getSources() may expose internal representation by returning RunQAMojo.sources</diag>
<diag id="441" sev="1" tool="PMD" rule="MethodReturnsInternalArray">
Returning 'sources' may expose an internal array.
</diag>
<diag id="334" sev="0" tool="Findbugs" rule="EI_EXPOSE_REP">net.sf.sanity4j.maven.plugin.RunQAMojo.getTestSources() may expose internal representation by returning RunQAMojo.testSources</diag>
<diag id="442" sev="1" tool="PMD" rule="MethodReturnsInternalArray">
Returning 'testSources' may expose an internal array.
</diag>
<diag id="330" sev="0" tool="Findbugs" rule="EI_EXPOSE_REP">net.sf.sanity4j.maven.plugin.RunQAMojo.getClasses() may expose internal representation by returning RunQAMojo.classes</diag>
<diag id="443" sev="1" tool="PMD" rule="MethodReturnsInternalArray">
Returning 'classes' may expose an internal array.
</diag>
<diag id="333" sev="0" tool="Findbugs" rule="EI_EXPOSE_REP">net.sf.sanity4j.maven.plugin.RunQAMojo.getTestClasses() may expose internal representation by returning RunQAMojo.testClasses</diag>
<diag id="444" sev="1" tool="PMD" rule="MethodReturnsInternalArray">
Returning 'testClasses' may expose an internal array.
</diag>
<diag id="331" sev="0" tool="Findbugs" rule="EI_EXPOSE_REP">net.sf.sanity4j.maven.plugin.RunQAMojo.getLibraries() may expose internal representation by returning RunQAMojo.libraries</diag>
<diag id="445" sev="1" tool="PMD" rule="MethodReturnsInternalArray">
Returning 'libraries' may expose an internal array.
</diag>
</diags>
</classDetails>
