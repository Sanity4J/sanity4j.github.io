<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../../xslt/source-code.xsl"?>
<classDetails className="com.github.sanity4j.model.summary.SummaryCsvMarshaller_Test" pathToRoot="../../../../../" qaVersion="1.8.1" runDate="Mon May 29 13:41:29 AEST 2017">
<summary high="0" significant="0" moderate="0" low="2" info="0" lineCoverage="100" branchCoverage="100" quality="97"/>
<source>
<line>package com.github.sanity4j.model.summary; </line>
<line/>
<line>import java.io.File;</line>
<line>import java.io.FileOutputStream;</line>
<line>import java.io.IOException;</line>
<line>import java.util.Calendar;</line>
<line>import java.util.GregorianCalendar;</line>
<line/>
<line sev="1"><diag id="451"/>import com.github.sanity4j.model.summary.PackageSummary;</line>
<line sev="1"><diag id="452"/>import com.github.sanity4j.model.summary.SummaryCsvMarshaller;</line>
<line/>
<line>import junit.framework.TestCase;</line>
<line/>
<line>/** </line>
<line> * SummaryCsvMarshaller_Test - unit tests for {@link SummaryCsvMarshaller}. </line>
<line> * </line>
<line> * @author Yiannis Paschalidis</line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line covered="yes">public class SummaryCsvMarshaller_Test extends TestCase</line>
<line>{</line>
<line>    /** The tolerance for comparing doubles (as floating point arithmetic is imprecise) - 0.01%. */</line>
<line>    private static final double DOUBLE_FIELD_TOLERANCE = 0.0001;</line>
<line/>
<line>    /**</line>
<line>     * Tests summary marshalling by writing/reading in a set of summaries</line>
<line>     * and comparing the original and read data.</line>
<line>     */</line>
<line>    public void testMarshalling() throws Exception</line>
<line>    {</line>
<line covered="yes">        PackageSummary[] summaries = new PackageSummary[]</line>
<line>        {</line>
<line covered="yes">             createSummary(0, &quot;&quot;, 0.0, 0.0, new int[] { 1, 2, 3, 4, 5 }, 100),</line>
<line covered="yes">             createSummary(-1, &quot;&quot;, 0.0, 0.0, new int[] { 1, 0, 0, 0, 0 }, 101),</line>
<line covered="yes">             createSummary(0, &quot;a&quot;, 0.0, 0.2, new int[] { 0, 1, 0, 0, 0 }, 102),</line>
<line covered="yes">             createSummary(0, &quot;a.b&quot;, 0.3, 0.0, new int[] { 0, 1, 0, 0, 0 }, 103),</line>
<line covered="yes">             createSummary(-1, &quot;a.b&quot;, 0.3, 0.0, new int[] { 0, 0, 1, 0, 0 }, 104),</line>
<line covered="yes">             createSummary(-2, &quot;a.b&quot;, 0.5, 0.6, new int[] { 0, 0, 0, 1, 0 }, 105),</line>
<line covered="yes">             createSummary(0, &quot;a.b.c&quot;, 0.7, 0.8, new int[] { 0, 0, 0, 0, 1 }, 106),</line>
<line covered="yes">             createSummary(0, &quot;b&quot;, 1.0, 1.0, new int[] { 0, 0, 0, 0, 0 }, 107)</line>
<line>        };</line>
<line/>
<line covered="yes">        File tempFile = File.createTempFile(&quot;SummaryCsvMarshaller_Test&quot;, &quot;csv&quot;);</line>
<line covered="yes">        tempFile.deleteOnExit();</line>
<line/>
<line covered="yes">        SummaryCsvMarshaller marshaller = new SummaryCsvMarshaller();</line>
<line covered="yes">        marshaller.write(summaries, tempFile);</line>
<line/>
<line covered="yes">        marshaller = new SummaryCsvMarshaller();</line>
<line covered="yes">        PackageSummary[] readSummaries = marshaller.read(tempFile);</line>
<line/>
<line covered="yes">        assertNotNull(&quot;Read summaries were null&quot;, readSummaries);</line>
<line covered="yes">        assertEquals(&quot;Incorrect number of summaries read&quot;, </line>
<line>                     summaries.length, readSummaries.length);</line>
<line/>
<line covered="yes">        for (int i = 0; i &lt; summaries.length; i++)</line>
<line>        {</line>
<line covered="yes">            assertEquals(&quot;Incorrect run date read&quot;, </line>
<line covered="yes">                         summaries[i].getRunDate(), readSummaries[i].getRunDate());</line>
<line/>
<line covered="yes">            assertEquals(&quot;Incorrect package name read&quot;, </line>
<line covered="yes">                         summaries[i].getPackageName(), readSummaries[i].getPackageName());</line>
<line/>
<line covered="yes">            assertEquals(&quot;Incorrect line coverage read&quot;, </line>
<line covered="yes">                         summaries[i].getLineCoverage(), readSummaries[i].getLineCoverage(), DOUBLE_FIELD_TOLERANCE);</line>
<line/>
<line covered="yes">            assertEquals(&quot;Incorrect branch coverage read&quot;, </line>
<line covered="yes">                         summaries[i].getBranchCoverage(), readSummaries[i].getBranchCoverage(), DOUBLE_FIELD_TOLERANCE);</line>
<line/>
<line covered="yes">            assertEquals(&quot;Incorrect Line count read&quot;, </line>
<line covered="yes">                         summaries[i].getLineCount(), readSummaries[i].getLineCount());</line>
<line/>
<line covered="yes">            assertEquals(&quot;Incorrect Info count read&quot;, </line>
<line covered="yes">                         summaries[i].getInfoCount(), readSummaries[i].getInfoCount());</line>
<line/>
<line covered="yes">            assertEquals(&quot;Incorrect Low count read&quot;, </line>
<line covered="yes">                         summaries[i].getLowCount(), readSummaries[i].getLowCount());</line>
<line/>
<line covered="yes">            assertEquals(&quot;Incorrect Moderate cound read&quot;, </line>
<line covered="yes">                         summaries[i].getModerateCount(), readSummaries[i].getModerateCount());</line>
<line/>
<line covered="yes">            assertEquals(&quot;Incorrect Significant count read&quot;, </line>
<line covered="yes">                         summaries[i].getSignificantCount(), readSummaries[i].getSignificantCount());</line>
<line/>
<line covered="yes">            assertEquals(&quot;Incorrect High count read&quot;, </line>
<line covered="yes">                         summaries[i].getHighCount(), readSummaries[i].getHighCount());</line>
<line>        }</line>
<line/>
<line covered="yes">        tempFile.delete();</line>
<line covered="yes">    }</line>
<line/>
<line>    public void testTruncatedAndBadData() throws Exception</line>
<line>    {</line>
<line covered="yes">        File tempFile = File.createTempFile(&quot;SummaryCsvMarshaller_Test&quot;, &quot;csv&quot;);</line>
<line covered="yes">        tempFile.deleteOnExit();</line>
<line/>
<line>        // Write a run for yesterday</line>
<line covered="yes">        PackageSummary[] summaries = new PackageSummary[]</line>
<line>        {</line>
<line covered="yes">             createSummary(-1, &quot;a.b.c&quot;, 0.3, 0.4, new int[] { 5, 6, 7, 8, 9}, 100)</line>
<line>        };</line>
<line/>
<line>        // Write some bad data        </line>
<line covered="yes">        append(&quot;\r\nBAD DATE,mydomain.dummy,0.0,0.0,1.0&quot;, tempFile);</line>
<line covered="yes">        append(&quot;\r\n2008/10/16-07:00,mydomain.dummy,BAD NUMBER,0.0,1.0&quot;, tempFile);</line>
<line/>
<line covered="yes">        SummaryCsvMarshaller marshaller = new SummaryCsvMarshaller();</line>
<line covered="yes">        marshaller.write(summaries, tempFile);</line>
<line/>
<line>        // Write a run for today</line>
<line covered="yes">        summaries = new PackageSummary[]</line>
<line>        {</line>
<line covered="yes">            createSummary(0, &quot;a.b.c&quot;, 0.6, 0.7, new int[] { 1, 2, 3, 4, 5}, 110)</line>
<line>        };</line>
<line/>
<line covered="yes">        marshaller = new SummaryCsvMarshaller();</line>
<line covered="yes">        marshaller.write(summaries, tempFile);</line>
<line/>
<line>        // Write some truncated data</line>
<line covered="yes">        append(&quot;\r\n2008/10/16-07:00,mydomain.dummy,&quot;, tempFile);</line>
<line/>
<line>        // Read in the data</line>
<line covered="yes">        marshaller = new SummaryCsvMarshaller();</line>
<line covered="yes">        PackageSummary[] readSummaries = marshaller.read(tempFile);</line>
<line/>
<line covered="yes">        assertNotNull(&quot;Read summaries were null&quot;, readSummaries);</line>
<line covered="yes">        assertEquals(&quot;Incorrect number of summaries read&quot;, </line>
<line>                     2, readSummaries.length);        </line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * Creates a PackageSummary.</line>
<line>     * </line>
<line>     * @param daysAgo the number of days ago the summary was created</line>
<line>     * @param packageName the package name</line>
<line>     * @param lineCoverage the line coverage </line>
<line>     * @param branchCoverage the branch coverage</line>
<line>     * @param diagCounts the diagnostic counts (info --&amp;gt; high)</line>
<line>     * @param lineCount the line count</line>
<line>     * </line>
<line>     * @return a PackageSummary with the specified attributes</line>
<line>     */</line>
<line>    private PackageSummary createSummary(final int daysAgo, final String packageName, </line>
<line>                                         final double lineCoverage, final double branchCoverage,</line>
<line>                                         final int[] diagCounts, final int lineCount)</line>
<line>    {</line>
<line>        // Seconds / milliseconds aren't stored in the CSV file</line>
<line covered="yes">        Calendar cal = new GregorianCalendar();</line>
<line covered="yes">        cal.set(Calendar.MILLISECOND, 0);</line>
<line covered="yes">        cal.set(Calendar.SECOND, 0);</line>
<line covered="yes">        cal.add(Calendar.DAY_OF_MONTH, daysAgo);</line>
<line/>
<line covered="yes">        PackageSummary summary = new PackageSummary();</line>
<line covered="yes">        summary.setRunDate(cal.getTime());</line>
<line covered="yes">        summary.setPackageName(packageName);</line>
<line covered="yes">        summary.setBranchCoverage(branchCoverage);</line>
<line covered="yes">        summary.setLineCoverage(lineCoverage);</line>
<line covered="yes">        summary.setInfoCount(diagCounts[0]);</line>
<line covered="yes">        summary.setLowCount(diagCounts[1]);</line>
<line covered="yes">        summary.setModerateCount(diagCounts[2]);</line>
<line covered="yes">        summary.setSignificantCount(diagCounts[3]);</line>
<line covered="yes">        summary.setHighCount(diagCounts[4]);</line>
<line covered="yes">        summary.setLineCount(lineCount);</line>
<line/>
<line covered="yes">        return summary;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Appends a string to a file.</line>
<line>     * </line>
<line>     * @param string the string to append</line>
<line>     * @param file the file to append to</line>
<line>     * @throws IOException if there was an error writing to the file</line>
<line>     */</line>
<line>    private void append(final String string, final File file) throws IOException</line>
<line>    {</line>
<line covered="yes">        FileOutputStream fos = new FileOutputStream(file, true);</line>
<line covered="yes">        fos.write(string.getBytes(&quot;UTF-8&quot;));</line>
<line covered="yes">        fos.close();</line>
<line covered="yes">    }</line>
<line>}</line>
</source>
<diags first="false">
<diag id="451" sev="1" tool="PMD" rule="ImportFromSamePackage">
No need to import a type that lives in the same package
</diag>
<diag id="452" sev="1" tool="PMD" rule="ImportFromSamePackage">
No need to import a type that lives in the same package
</diag>
</diags>
</classDetails>
