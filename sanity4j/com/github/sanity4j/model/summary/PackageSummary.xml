<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../../xslt/source-code.xsl"?>
<classDetails className="com.github.sanity4j.model.summary.PackageSummary" pathToRoot="../../../../../" qaVersion="1.8.0" runDate="Tue May 23 15:28:50 AEST 2017">
<summary high="0" significant="0" moderate="0" low="1" info="2" lineCoverage="100" branchCoverage="0" quality="99"/>
<source>
<line sev="1"><diag id="153"/>package com.github.sanity4j.model.summary; </line>
<line/>
<line>import java.util.Date;</line>
<line/>
<line>/** </line>
<line> * PackageSummary - a quality summary entry. </line>
<line> * </line>
<line> * @author Yiannis Paschalidis</line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line covered="yes">public final class PackageSummary</line>
<line>{</line>
<line>    /** The date that the analysis was performed. */</line>
<line>    private Date runDate;</line>
<line/>
<line>    /** The java package name that this summary is for. */</line>
<line>    private String packageName;</line>
<line/>
<line>    /** jUnit test line coverage [0.0 .. 1.0]. */</line>
<line>    private double lineCoverage;</line>
<line/>
<line>    /** jUnit test branch coverage [0.0 .. 1.0]. */</line>
<line>    private double branchCoverage;</line>
<line/>
<line>    /** The number of 'info' level diagnostics. */</line>
<line>    private int infoCount;</line>
<line/>
<line>    /** The number of 'low' level diagnostics. */</line>
<line>    private int lowCount;</line>
<line/>
<line>    /** The number of 'moderate' level diagnostics. */</line>
<line>    private int moderateCount;</line>
<line/>
<line>    /** The number of 'significant' level diagnostics. */</line>
<line>    private int significantCount;</line>
<line/>
<line>    /** The number of 'high' level diagnostics. */</line>
<line>    private int highCount;</line>
<line/>
<line>    /** The number of lines of code in the package. */</line>
<line>    private int lineCount;</line>
<line/>
<line>    /**</line>
<line>     * @return Returns the branchCoverage.</line>
<line>     */</line>
<line>    public double getBranchCoverage()</line>
<line>    {</line>
<line covered="yes">        return branchCoverage;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @param branchCoverage The branchCoverage to set.</line>
<line>     */</line>
<line>    public void setBranchCoverage(final double branchCoverage)</line>
<line>    {</line>
<line covered="yes">        this.branchCoverage = branchCoverage;</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * @return Returns the lineCoverage.</line>
<line>     */</line>
<line>    public double getLineCoverage()</line>
<line>    {</line>
<line covered="yes">        return lineCoverage;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @param lineCoverage The lineCoverage to set.</line>
<line>     */</line>
<line>    public void setLineCoverage(final double lineCoverage)</line>
<line>    {</line>
<line covered="yes">        this.lineCoverage = lineCoverage;</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * @return Returns the packageName.</line>
<line>     */</line>
<line>    public String getPackageName()</line>
<line>    {</line>
<line covered="yes">        return packageName;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @param packageName The packageName to set.</line>
<line>     */</line>
<line>    public void setPackageName(final String packageName)</line>
<line>    {</line>
<line covered="yes">        this.packageName = packageName;</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * @return the infoCount</line>
<line>     */</line>
<line>    public int getInfoCount()</line>
<line>    {</line>
<line covered="yes">        return infoCount;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @param infoCount the infoCount to set</line>
<line>     */</line>
<line>    public void setInfoCount(final int infoCount)</line>
<line>    {</line>
<line covered="yes">        this.infoCount = infoCount;</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * @return the lowCount</line>
<line>     */</line>
<line>    public int getLowCount()</line>
<line>    {</line>
<line covered="yes">        return lowCount;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @param lowCount the lowCount to set</line>
<line>     */</line>
<line>    public void setLowCount(final int lowCount)</line>
<line>    {</line>
<line covered="yes">        this.lowCount = lowCount;</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * @return the moderateCount</line>
<line>     */</line>
<line>    public int getModerateCount()</line>
<line>    {</line>
<line covered="yes">        return moderateCount;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @param moderateCount the moderateCount to set</line>
<line>     */</line>
<line>    public void setModerateCount(final int moderateCount)</line>
<line>    {</line>
<line covered="yes">        this.moderateCount = moderateCount;</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * @return the significantCount</line>
<line>     */</line>
<line>    public int getSignificantCount()</line>
<line>    {</line>
<line covered="yes">        return significantCount;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @param significantCount the significantCount to set</line>
<line>     */</line>
<line>    public void setSignificantCount(final int significantCount)</line>
<line>    {</line>
<line covered="yes">        this.significantCount = significantCount;</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * @return the highCount</line>
<line>     */</line>
<line>    public int getHighCount()</line>
<line>    {</line>
<line covered="yes">        return highCount;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @param highCount the highCount to set</line>
<line>     */</line>
<line>    public void setHighCount(final int highCount)</line>
<line>    {</line>
<line covered="yes">        this.highCount = highCount;</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * @return Returns the runDate.</line>
<line>     */</line>
<line>    public Date getRunDate()</line>
<line>    {</line>
<line sev="0" covered="yes"><diag id="295"/>        return runDate;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @param runDate The runDate to set.</line>
<line>     */</line>
<line>    public void setRunDate(final Date runDate)</line>
<line>    {</line>
<line sev="0" covered="yes"><diag id="296"/>        this.runDate = runDate;</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * @return the lineCount</line>
<line>     */</line>
<line>    public int getLineCount()</line>
<line>    {</line>
<line covered="yes">        return lineCount;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @param lineCount the lineCount to set</line>
<line>     */</line>
<line>    public void setLineCount(final int lineCount)</line>
<line>    {</line>
<line covered="yes">        this.lineCount = lineCount;</line>
<line covered="yes">    }</line>
<line>}</line>
</source>
<diags first="false">
<diag id="153" sev="1" tool="Checkstyle" rule="JavadocPackageCheck">Missing package-info.java file.</diag>
<diag id="295" sev="0" tool="Findbugs" rule="EI_EXPOSE_REP">com.github.sanity4j.model.summary.PackageSummary.getRunDate() may expose internal representation by returning PackageSummary.runDate</diag>
<diag id="296" sev="0" tool="Findbugs" rule="EI_EXPOSE_REP2">com.github.sanity4j.model.summary.PackageSummary.setRunDate(Date) may expose internal representation by storing an externally mutable object into PackageSummary.runDate</diag>
</diags>
</classDetails>
