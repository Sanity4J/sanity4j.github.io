<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../../xslt/source-code.xsl"?>
<classDetails className="com.github.sanity4j.model.diagnostic.DiagnosticFactory" pathToRoot="../../../../../" qaVersion="1.8.1" runDate="Mon May 29 13:41:29 AEST 2017">
<summary high="0" significant="1" moderate="0" low="2" info="0" lineCoverage="100" branchCoverage="0" quality="76"/>
<source>
<line>package com.github.sanity4j.model.diagnostic;</line>
<line/>
<line>import java.util.Properties;</line>
<line/>
<line>import com.github.sanity4j.util.QaUtil;</line>
<line/>
<line>/**</line>
<line> * A factory for creating {@link Diagnostic} Messages. The factory is associated with a given set of</line>
<line> * &quot;external properties&quot;. These properties are used to define the diagnostic severities, exclusions and categorisation</line>
<line> * for all of the {@link Diagnostic} messages created by this factory.</line>
<line> * </line>
<line> * @author Brian Kavanagh</line>
<line> */</line>
<line>public final class DiagnosticFactory</line>
<line>{</line>
<line>    /**</line>
<line>     * The &lt;b&gt;default&lt;/b&gt; {@link DiagnosticFactory} instance properties. These properties control the severities,</line>
<line>     * exclusions and categorisation of the {@link Diagnostic} messages created by the default {@link DiagnosticFactory}</line>
<line>     * .</line>
<line>     */</line>
<line sev="3" covered="yes"><diag id="106"/><diag id="294"/>    private static final Properties properties = QaUtil.getProperties(&quot;/com/github/sanity4j/model/diagnostic/Diagnostic.properties&quot;);</line>
<line/>
<line>    /**</line>
<line>     * The default {@link DiagnosticFactory} instance.</line>
<line>     */</line>
<line covered="yes">    private static DiagnosticFactory instance = new DiagnosticFactory();</line>
<line/>
<line>    /**</line>
<line>     * Private constructor to disallow explicit instantiation of a {@link DiagnosticFactory}.</line>
<line>     */</line>
<line>    private DiagnosticFactory()</line>
<line covered="yes">    {</line>
<line>        // NO-OP.</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * Private constructor used by {@link #getInstance(Properties)} to create a {@link DiagnosticFactory} with a</line>
<line>     * specific set of external properties.</line>
<line>     * </line>
<line>     * @param properties The specific set of external properties to be used by the newly created</line>
<line>     *            {@link DiagnosticFactory}</line>
<line>     */</line>
<line>    private DiagnosticFactory(final Properties properties)</line>
<line covered="yes">    {</line>
<line covered="yes">        DiagnosticFactory.properties.putAll(properties);</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * Returns the {@link DiagnosticFactory} default singleton.</line>
<line>     * </line>
<line>     * @return The {@link DiagnosticFactory} default singleton.</line>
<line>     */</line>
<line>    public static DiagnosticFactory getInstance()</line>
<line>    {</line>
<line covered="yes">        return instance;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Returns a {@link DiagnosticFactory} with a specific set of external properties.</line>
<line>     * </line>
<line>     * @param properties The specific set of external properties to be used by the newly created</line>
<line>     *            {@link DiagnosticFactory}.</line>
<line>     * @return a {@link DiagnosticFactory} with the specified set of &lt;em&gt;properties&lt;/em&gt;</line>
<line>     */</line>
<line sev="1"><diag id="107"/>    public static DiagnosticFactory getInstance(final Properties properties)</line>
<line>    {</line>
<line covered="yes">        return new DiagnosticFactory(properties);</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Returns a newly created {@link Diagnostic}.</line>
<line>     * </line>
<line>     * @return A newly created {@link Diagnostic}.</line>
<line>     */</line>
<line>    public Diagnostic getDiagnostic()</line>
<line>    {</line>
<line covered="yes">        return new Diagnostic(this);</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Gets a {@link DiagnosticFactory} property.</line>
<line>     * </line>
<line>     * @param key the key for the property to be retrieved.</line>
<line>     * @return The value of the property associated with the given &lt;em&gt;key&lt;/em&gt;, or &lt;b&gt;null&lt;/b&gt; if no property with the</line>
<line>     *         given &lt;em&gt;key&lt;/em&gt; exists.</line>
<line>     */</line>
<line>    public String getProperty(final String key)</line>
<line>    {</line>
<line covered="yes">        return properties.getProperty(key);</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Sets a {@link DiagnosticFactory} property.</line>
<line>     * </line>
<line>     * @param key the key for the property to be set.</line>
<line>     * @param value the value of the property to be associated with the given &lt;em&gt;key&lt;/em&gt;.</line>
<line>     */</line>
<line>    public void setProperty(final String key, final String value)</line>
<line>    {</line>
<line covered="yes">        properties.setProperty(key, value);</line>
<line covered="yes">    }</line>
<line>}</line>
</source>
<diags first="false">
<diag id="106" sev="1" tool="Checkstyle" rule="ConstantNameCheck">Name 'properties' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$|^log$'.</diag>
<diag id="294" sev="3" tool="Findbugs" rule="DMI_HARDCODED_ABSOLUTE_FILENAME">Hard coded reference to an absolute pathname in com.github.sanity4j.model.diagnostic.DiagnosticFactory.&lt;static initializer for DiagnosticFactory&gt;()</diag>
<diag id="107" sev="1" tool="Checkstyle" rule="HiddenFieldCheck">'properties' hides a field.</diag>
</diags>
</classDetails>
