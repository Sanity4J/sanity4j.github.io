<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../../xslt/source-code.xsl"?>
<classDetails className="com.github.sanity4j.model.diagnostic.Diagnostic" pathToRoot="../../../../../" qaVersion="1.8.1" runDate="Mon May 29 13:41:29 AEST 2017">
<summary high="0" significant="0" moderate="1" low="2" info="0" lineCoverage="85" branchCoverage="57" quality="98"/>
<source>
<line sev="1"><diag id="68"/>package com.github.sanity4j.model.diagnostic;</line>
<line/>
<line>import java.util.StringTokenizer;</line>
<line>import java.util.regex.Pattern;</line>
<line/>
<line>import com.github.sanity4j.util.QaLogger;</line>
<line/>
<line>/**</line>
<line> * Diagnostic - represents a diagnostic message that has been generated from one of the QA tools.</line>
<line> * </line>
<line> * @author Yiannis Paschalidis</line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line>public class Diagnostic</line>
<line>{</line>
<line>    /**</line>
<line>     * A sequence used to generate id numbers. Safe as Sanity4J only runs within one VM.</line>
<line>     */</line>
<line covered="yes">    private static int idCounter = 1;</line>
<line/>
<line>    /** The diagnostic properties, which controls severities, exclusions and categorisation. */</line>
<line>    private final DiagnosticFactory diagnosticFactory;</line>
<line/>
<line>    // Source of the diagnostic.</line>
<line>    // Integer range from SOURCE_ALL to SOURCE_CHECKSTYLE</line>
<line/>
<line>    /** Any source. */</line>
<line>    public static final int SOURCE_ALL = -1;</line>
<line/>
<line>    /** A Diagnostic sourced from an undefined tool. Should not occur. */</line>
<line>    public static final int SOURCE_OTHER = 0;</line>
<line/>
<line>    /** A Diagnostic sourced from FindBugs. */</line>
<line>    public static final int SOURCE_FINDBUGS = 1;</line>
<line/>
<line>    /** A Diagnostic sourced from PMD. */</line>
<line>    public static final int SOURCE_PMD = 2;</line>
<line/>
<line>    /** A Diagnostic sourced from PMD CPD. */</line>
<line>    public static final int SOURCE_PMD_CPD = 3;</line>
<line/>
<line>    /** A Diagnostic sourced from Checkstyle. */</line>
<line>    public static final int SOURCE_CHECKSTYLE = 4;</line>
<line/>
<line>    // Ratings taken from the Risk Rating table in the code review template</line>
<line>    // Int range from SEVERITY_ALL to SEVERITY_HIGH</line>
<line>    /** Any severity. */</line>
<line>    public static final int SEVERITY_ALL = -1;</line>
<line/>
<line>    /** Information-only - for advice to junior developers. */</line>
<line>    public static final int SEVERITY_INFO = 0;</line>
<line/>
<line>    /** Low priority - e.g. formatting issues. */</line>
<line>    public static final int SEVERITY_LOW = 1;</line>
<line/>
<line>    /** Moderate priority - e.g. hard to understand code. */</line>
<line>    public static final int SEVERITY_MODERATE = 2;</line>
<line/>
<line>    /** Significant priority - e.g. Probable NullPointerException. */</line>
<line>    public static final int SEVERITY_SIGNIFICANT = 3;</line>
<line/>
<line>    /** High priority - e.g. calling System.exit from a Web-app. */</line>
<line>    public static final int SEVERITY_HIGH = 4;</line>
<line/>
<line>    /** Class name. */</line>
<line>    private String className;</line>
<line/>
<line>    /** Source file name. */</line>
<line>    private String fileName;</line>
<line/>
<line>    /** Start line in source code. */</line>
<line covered="yes">    private int startLine = -1;</line>
<line/>
<line>    /** End line in source code. */</line>
<line covered="yes">    private int endLine = -1;</line>
<line/>
<line>    /** Start column in source code. */</line>
<line covered="yes">    private int startColumn = -1;</line>
<line/>
<line>    /** End column in source code. */</line>
<line covered="yes">    private int endColumn = -1;</line>
<line/>
<line>    /** Severity of the error. */</line>
<line covered="yes">    private int severity = -1;</line>
<line/>
<line>    /** Source of the Diagnostic (which tool). */</line>
<line covered="yes">    private int source = -1;</line>
<line/>
<line>    /** Tool's rule name, if applicable. */</line>
<line>    private String ruleName;</line>
<line/>
<line>    /** Diagnostic message. */</line>
<line>    private String message;</line>
<line/>
<line>    /** The identifier of the diagnostic. */</line>
<line covered="yes">    private final int identifier = nextId();</line>
<line/>
<line>    /** Default constructor. */</line>
<line>    public Diagnostic()</line>
<line covered="yes">    {</line>
<line covered="yes">        diagnosticFactory = DiagnosticFactory.getInstance();</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * Package protected constructor.</line>
<line>     * </line>
<line>     * @param diagnosticFactory The diagnosticFactory which contains the properties used by this {@link Diagnostic}.</line>
<line>     */</line>
<line>    Diagnostic(final DiagnosticFactory diagnosticFactory)</line>
<line covered="yes">    {</line>
<line covered="yes">        this.diagnosticFactory = diagnosticFactory;</line>
<line covered="yes">    }</line>
<line/>
<line>    /** @return the next id in the id sequence. */</line>
<line sev="2"><diag id="429"/>    private static synchronized int nextId()</line>
<line sev="2">    {</line>
<line sev="2" covered="yes">        return idCounter++;</line>
<line sev="2">    }</line>
<line/>
<line>    /**</line>
<line>     * @return Returns the className.</line>
<line>     */</line>
<line>    public String getClassName()</line>
<line>    {</line>
<line covered="yes">        return className;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @return Returns the package name.</line>
<line>     */</line>
<line>    public String getPackageName()</line>
<line>    {</line>
<line covered="yes">        int index = className.lastIndexOf('.');</line>
<line/>
<line covered="partial">        return (index == -1) ? &quot;&quot; : className.substring(0, index);</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @param className The className to set.</line>
<line>     */</line>
<line>    public void setClassName(final String className)</line>
<line>    {</line>
<line covered="yes">        this.className = className;</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * @return Returns the endColumn.</line>
<line>     */</line>
<line>    public int getEndColumn()</line>
<line>    {</line>
<line covered="yes">        return endColumn;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @param endColumn The endColumn to set.</line>
<line>     */</line>
<line>    public void setEndColumn(final int endColumn)</line>
<line>    {</line>
<line covered="yes">        this.endColumn = endColumn;</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * @return Returns the endLine.</line>
<line>     */</line>
<line>    public int getEndLine()</line>
<line>    {</line>
<line covered="yes">        return endLine;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @param endLine The endLine to set.</line>
<line>     */</line>
<line>    public void setEndLine(final int endLine)</line>
<line>    {</line>
<line covered="yes">        this.endLine = Math.max(1, endLine);</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * @return Returns the fileName.</line>
<line>     */</line>
<line>    public String getFileName()</line>
<line>    {</line>
<line covered="yes">        return fileName;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @param fileName The fileName to set.</line>
<line>     */</line>
<line>    public void setFileName(final String fileName)</line>
<line>    {</line>
<line covered="yes">        this.fileName = fileName;</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * @return Returns the message.</line>
<line>     */</line>
<line>    public String getMessage()</line>
<line>    {</line>
<line covered="yes">        return message;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @param message The message to set.</line>
<line>     */</line>
<line>    public void setMessage(final String message)</line>
<line>    {</line>
<line covered="yes">        this.message = message;</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * @return Returns the severity.</line>
<line>     */</line>
<line>    public int getSeverity()</line>
<line>    {</line>
<line covered="yes">        return severity;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @param severity The severity to set.</line>
<line>     */</line>
<line>    public void setSeverity(final int severity)</line>
<line>    {</line>
<line covered="yes">        this.severity = severity;</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * @return Returns the source.</line>
<line>     */</line>
<line>    public int getSource()</line>
<line>    {</line>
<line covered="yes">        return source;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @param source The source to set.</line>
<line>     */</line>
<line>    public void setSource(final int source)</line>
<line>    {</line>
<line covered="yes">        this.source = source;</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * @return Returns the className.</line>
<line>     */</line>
<line>    public String getRuleName()</line>
<line>    {</line>
<line covered="yes">        return ruleName;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @param ruleName The ruleName to set.</line>
<line>     */</line>
<line>    public void setRuleName(final String ruleName)</line>
<line>    {</line>
<line covered="yes">        this.ruleName = ruleName;</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * @return Returns the startColumn.</line>
<line>     */</line>
<line>    public int getStartColumn()</line>
<line>    {</line>
<line covered="yes">        return startColumn;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @param startColumn The startColumn to set.</line>
<line>     */</line>
<line>    public void setStartColumn(final int startColumn)</line>
<line>    {</line>
<line covered="yes">        this.startColumn = startColumn;</line>
<line/>
<line covered="yes">        if (endColumn &lt; startColumn)</line>
<line>        {</line>
<line covered="yes">            endColumn = startColumn;</line>
<line>        }</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * @return Returns the startLine.</line>
<line>     */</line>
<line>    public int getStartLine()</line>
<line>    {</line>
<line covered="yes">        return startLine;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @param startLine The startLine to set.</line>
<line>     */</line>
<line>    public void setStartLine(final int startLine)</line>
<line>    {</line>
<line covered="yes">        this.startLine = Math.max(1, startLine);</line>
<line/>
<line covered="yes">        if (endLine &lt; startLine)</line>
<line>        {</line>
<line covered="yes">            endLine = startLine;</line>
<line>        }</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * @return this Diagnostic's unique (within a VM) id.</line>
<line>     */</line>
<line>    public int getId()</line>
<line>    {</line>
<line covered="yes">        return identifier;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @return a textual description of this Diagnostic's severity.</line>
<line>     */</line>
<line>    public String getSeverityDescription()</line>
<line>    {</line>
<line covered="yes">        return getSeverityDescription(getSeverity());</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Returns a textual description of the severity.</line>
<line>     * </line>
<line>     * @param severity the severity</line>
<line>     * @return a textual description of the severity</line>
<line>     */</line>
<line>    public static String getSeverityDescription(final int severity)</line>
<line>    {</line>
<line covered="yes">        switch (severity)</line>
<line>        {</line>
<line>            case SEVERITY_ALL:</line>
<line covered="yes">                return &quot;All&quot;;</line>
<line/>
<line>            case SEVERITY_INFO:</line>
<line covered="yes">                return &quot;Info&quot;;</line>
<line/>
<line>            case SEVERITY_LOW:</line>
<line covered="yes">                return &quot;Low&quot;;</line>
<line/>
<line>            case SEVERITY_MODERATE:</line>
<line covered="yes">                return &quot;Moderate&quot;;</line>
<line/>
<line>            case SEVERITY_SIGNIFICANT:</line>
<line covered="yes">                return &quot;Significant&quot;;</line>
<line/>
<line>            case SEVERITY_HIGH:</line>
<line covered="yes">                return &quot;High&quot;;</line>
<line/>
<line>            default:</line>
<line covered="yes">                return &quot;Other&quot;;</line>
<line>        }</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @return a textual description of this Diagnostic's source.</line>
<line>     */</line>
<line>    public String getSourceDescription()</line>
<line>    {</line>
<line covered="yes">        return getSourceDescription(getSource());</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Returns a textual description of the source.</line>
<line>     * </line>
<line>     * @param source the source</line>
<line>     * @return a textual description of the source</line>
<line>     */</line>
<line>    public static String getSourceDescription(final int source)</line>
<line>    {</line>
<line covered="yes">        switch (source)</line>
<line>        {</line>
<line>            case SOURCE_ALL:</line>
<line covered="yes">                return &quot;All&quot;;</line>
<line/>
<line>            case SOURCE_OTHER:</line>
<line covered="yes">                return &quot;Other&quot;;</line>
<line/>
<line>            case SOURCE_FINDBUGS:</line>
<line covered="yes">                return &quot;Findbugs&quot;;</line>
<line/>
<line>            case SOURCE_PMD:</line>
<line covered="yes">                return &quot;PMD&quot;;</line>
<line/>
<line>            case SOURCE_PMD_CPD:</line>
<line covered="yes">                return &quot;PMD-CPD&quot;;</line>
<line/>
<line>            case SOURCE_CHECKSTYLE:</line>
<line covered="yes">                return &quot;Checkstyle&quot;;</line>
<line/>
<line>            default:</line>
<line covered="yes">                return &quot;Other&quot;;</line>
<line>        }</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Returns the categories of this diagnostic, based upon the source and ruleName. The categories are read from</line>
<line>     * Diagnostic.properties.</line>
<line>     * </line>
<line>     * @return the categories of this diagnostic</line>
<line>     */</line>
<line>    public String[] getCategories()</line>
<line>    {</line>
<line covered="no">        String sourceName = getSourceDescription();</line>
<line covered="no">        String key = sourceName + '.' + ruleName + &quot;.category&quot;;</line>
<line covered="no">        String value = diagnosticFactory.getProperty(key);</line>
<line/>
<line covered="no">        return (value == null) ? new String[0] : value.split(&quot;,&quot;);</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Calculates the severity based on the Diagnostic.properties.</line>
<line>     */</line>
<line>    public void calcSeverity()</line>
<line>    {</line>
<line covered="yes">        String sourceName = getSourceDescription();</line>
<line/>
<line covered="yes">        String key = sourceName + '.' + ruleName + &quot;.severity&quot;;</line>
<line covered="yes">        String value = diagnosticFactory.getProperty(key);</line>
<line/>
<line covered="partial">        if (value == null)</line>
<line>        {</line>
<line covered="yes">            String msg = &quot;Missing diagnostic severity for [&quot; + key + &quot;]: will default to [&quot; + SEVERITY_INFO</line>
<line>                         + &quot; (INFO)]&quot;;</line>
<line/>
<line covered="yes">            QaLogger.getInstance().warn(msg);</line>
<line covered="yes">            diagnosticFactory.setProperty(key, String.valueOf(SEVERITY_INFO));</line>
<line covered="yes">            setSeverity(SEVERITY_INFO);</line>
<line covered="yes">        }</line>
<line>        else</line>
<line>        {</line>
<line covered="no">            setSeverity(Integer.parseInt(value));</line>
<line>        }</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * Should this diagnostic be excluded from the report? This is controlled by the Diagnostic.properties file, as some</line>
<line>     * of the tools don't support exclusions by class + rule.</line>
<line>     * </line>
<line>     * @return true if the diagnostic should be excluded</line>
<line>     */</line>
<line>    public boolean isExcluded()</line>
<line>    {</line>
<line covered="yes">        String sourceName = getSourceDescription();</line>
<line covered="yes">        String keyBase = sourceName + '.' + ruleName;</line>
<line/>
<line covered="yes">        String includes = diagnosticFactory.getProperty(keyBase + &quot;.includes&quot;);</line>
<line sev="1" covered="yes"><diag id="430"/>        String excludes = diagnosticFactory.getProperty(keyBase + &quot;.excludes&quot;);</line>
<line/>
<line>        // Is the file included by at least one include?</line>
<line covered="partial">        if (includes != null)</line>
<line>        {</line>
<line covered="no">            boolean include = false;</line>
<line/>
<line covered="no">            for (StringTokenizer st = new StringTokenizer(includes, &quot;,&quot;); st.hasMoreTokens();)</line>
<line>            {</line>
<line covered="no">                if (Pattern.matches(st.nextToken(), className))</line>
<line>                {</line>
<line covered="no">                    include = true;</line>
<line covered="no">                    break;</line>
<line>                }</line>
<line>            }</line>
<line/>
<line covered="no">            if (!include)</line>
<line>            {</line>
<line covered="no">                return true;</line>
<line>            }</line>
<line>        }</line>
<line/>
<line>        // Is the file excluded by at least one exclude?</line>
<line covered="partial">        if (excludes != null)</line>
<line>        {</line>
<line covered="no">            for (StringTokenizer st = new StringTokenizer(excludes, &quot;,&quot;); st.hasMoreTokens();)</line>
<line>            {</line>
<line covered="no">                if (Pattern.matches(st.nextToken(), className))</line>
<line>                {</line>
<line covered="no">                    return true;</line>
<line>                }</line>
<line>            }</line>
<line>        }</line>
<line/>
<line covered="yes">        return false;</line>
<line>    }</line>
<line>}</line>
</source>
<diags first="false">
<diag id="68" sev="1" tool="Checkstyle" rule="JavadocPackageCheck">Missing package-info.java file.</diag>
<diag id="429" sev="2" tool="PMD" rule="AvoidSynchronizedAtMethodLevel">
Use block level rather than method level synchronization
</diag>
<diag id="430" sev="1" tool="PMD" rule="PrematureDeclaration">
Avoid declaring a variable if it is unreferenced before a possible exit point.
</diag>
</diags>
</classDetails>
