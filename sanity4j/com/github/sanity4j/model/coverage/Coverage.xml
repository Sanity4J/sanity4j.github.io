<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../../xslt/source-code.xsl"?>
<classDetails className="com.github.sanity4j.model.coverage.Coverage" pathToRoot="../../../../../" qaVersion="1.8.0" runDate="Tue May 23 15:28:50 AEST 2017">
<summary high="0" significant="0" moderate="0" low="0" info="0" lineCoverage="97" branchCoverage="91" quality="100"/>
<source>
<line>package com.github.sanity4j.model.coverage; </line>
<line/>
<line>import java.util.Collections;</line>
<line>import java.util.HashMap;</line>
<line>import java.util.Map;</line>
<line>import java.util.Set;</line>
<line/>
<line>/** </line>
<line> * Coverage information for a project. </line>
<line> * </line>
<line> * @author Yiannis Paschalidis</line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line covered="yes">public class Coverage extends AbstractCoverage</line>
<line>{</line>
<line>    /** PackageCoverages keyed by package name. */</line>
<line covered="yes">    private final Map&lt;String, PackageCoverage&gt; packagesByName = new HashMap&lt;String, PackageCoverage&gt;();</line>
<line/>
<line>    /**</line>
<line>     * Retrieves the coverage information for the given package.</line>
<line>     *  </line>
<line>     * @param packageName the package name.</line>
<line>     * @return the coverage for the given package, or null if there isn't any.</line>
<line>     */</line>
<line>    public PackageCoverage getPackageCoverage(final String packageName)</line>
<line>    {</line>
<line covered="yes">        return packagesByName.get(packageName);</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Retrieves the coverage information for the given class.</line>
<line>     *  </line>
<line>     * @param className the fully qualified class name.</line>
<line>     * @return the coverage for the given class, or null if there isn't any.</line>
<line>     */</line>
<line>    public ClassCoverage getClassCoverage(final String className)</line>
<line>    {</line>
<line covered="yes">        String packageName = null;</line>
<line covered="yes">        int dotIndex = className.lastIndexOf('.');</line>
<line/>
<line covered="partial">        if (dotIndex != -1)</line>
<line>        {</line>
<line covered="yes">           	packageName = className.substring(0, dotIndex);</line>
<line>        }</line>
<line/>
<line covered="yes">        PackageCoverage packageCoverage = getPackageCoverage(packageName);</line>
<line/>
<line covered="yes">        if (packageCoverage != null)</line>
<line>        {</line>
<line covered="yes">            return packageCoverage.getClassCoverage(className);</line>
<line>        }</line>
<line/>
<line covered="yes">        return null;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Adds package coverage.</line>
<line>     * @param coverage the package coverage to add.</line>
<line>     */</line>
<line>    public void addPackage(final PackageCoverage coverage)</line>
<line>    {</line>
<line covered="yes">        packagesByName.put(coverage.getPackageName(), coverage);</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * @return the number of executable lines in this coverage.</line>
<line>     */</line>
<line>    @Override</line>
<line>    public int getLineCount()</line>
<line>    {</line>
<line covered="yes">        int count = 0;</line>
<line/>
<line covered="yes">        for (PackageCoverage coverage : packagesByName.values())</line>
<line>        {</line>
<line covered="yes">            count += coverage.getLineCount();</line>
<line covered="yes">        }</line>
<line/>
<line covered="yes">        return count;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @return the number of covered lines in this coverage.</line>
<line>     */</line>
<line>    @Override</line>
<line>    public int getCoveredLineCount()</line>
<line>    {</line>
<line covered="yes">        int count = 0;</line>
<line/>
<line covered="yes">        for (PackageCoverage coverage : packagesByName.values())</line>
<line>        {</line>
<line covered="yes">            count += coverage.getCoveredLineCount();</line>
<line covered="yes">        }</line>
<line/>
<line covered="yes">        return count;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @return the number of branches in this coverage.</line>
<line>     */</line>
<line>    @Override</line>
<line>    public int getBranchCount()</line>
<line>    {</line>
<line covered="yes">        int count = 0;</line>
<line/>
<line covered="yes">        for (PackageCoverage coverage : packagesByName.values())</line>
<line>        {</line>
<line covered="yes">            count += coverage.getBranchCount();</line>
<line covered="yes">        }</line>
<line/>
<line covered="yes">        return count;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @return the number of covered branches in this coverage.</line>
<line>     */</line>
<line>    @Override</line>
<line>    public int getCoveredBranchCount()</line>
<line>    {</line>
<line covered="yes">        int count = 0;</line>
<line/>
<line covered="yes">        for (PackageCoverage coverage : packagesByName.values())</line>
<line>        {</line>
<line covered="yes">            count += coverage.getCoveredBranchCount();</line>
<line covered="yes">        }</line>
<line/>
<line covered="yes">        return count;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @return the packages within this coverage.</line>
<line>     */</line>
<line>    public Set&lt;String&gt; getPackageNames()</line>
<line>    {</line>
<line covered="no">       return Collections.unmodifiableSet(packagesByName.keySet());</line>
<line>    }</line>
<line>}</line>
</source>
</classDetails>
