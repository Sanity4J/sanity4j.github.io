<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../../xslt/source-code.xsl"?>
<classDetails className="com.github.sanity4j.model.coverage.ClassCoverage_Test" pathToRoot="../../../../../" qaVersion="1.8.0" runDate="Tue May 23 15:28:50 AEST 2017">
<summary high="0" significant="0" moderate="0" low="1" info="0" lineCoverage="100" branchCoverage="0" quality="98"/>
<source>
<line>package com.github.sanity4j.model.coverage; </line>
<line/>
<line sev="1"><diag id="416"/>import com.github.sanity4j.model.coverage.ClassCoverage;</line>
<line/>
<line>import junit.framework.TestCase;</line>
<line/>
<line>/** </line>
<line> * ClassCoverage_Test - unit tests for ClassCoverage. </line>
<line> * </line>
<line> * @author Yiannis Paschalidis </line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line covered="yes">public class ClassCoverage_Test extends TestCase</line>
<line>{</line>
<line>    /** The ClassCoverage to be tested. */</line>
<line>    private ClassCoverage coverage;</line>
<line/>
<line>    /** A dummy string. */</line>
<line>    private static final String DUMMY_STRING = &quot;dummy&quot;;</line>
<line/>
<line>    public void setUp()</line>
<line>    {</line>
<line covered="yes">        coverage = new ClassCoverage(DUMMY_STRING);</line>
<line covered="yes">        coverage.addLineCoverage(121, 0, false);</line>
<line covered="yes">        coverage.addLineCoverage(122, 0, true);</line>
<line covered="yes">        coverage.addLineCoverage(123, 1, true);</line>
<line covered="yes">        coverage.addLineCoverage(124, 2, false);</line>
<line covered="yes">    }</line>
<line/>
<line>    public void testConstructor()</line>
<line>    {</line>
<line covered="yes">        String className = &quot;ClassCoverage_Test&quot;; </line>
<line covered="yes">        coverage = new ClassCoverage(className);</line>
<line/>
<line covered="yes">        assertEquals(&quot;incorrect class name&quot;, className, coverage.getClassName());</line>
<line covered="yes">    }</line>
<line/>
<line>    public void testBranchCoverageAccessors()</line>
<line>    {</line>
<line covered="yes">        double branchCoverage = 12.3;</line>
<line/>
<line covered="yes">        coverage.setBranchCoverage(branchCoverage);        </line>
<line covered="yes">        assertEquals(&quot;branchCoverage accessor incorrect&quot;, branchCoverage, coverage.getBranchCoverage(), 0.0);</line>
<line covered="yes">    }</line>
<line/>
<line>    public void testLineCoverageAccessors()</line>
<line>    {</line>
<line covered="yes">        double lineCoverage = 12.3;</line>
<line/>
<line covered="yes">        coverage.setLineCoverage(lineCoverage);        </line>
<line covered="yes">        assertEquals(&quot;lineCoverage accessor incorrect&quot;, lineCoverage, coverage.getLineCoverage(), 0.0);</line>
<line covered="yes">    }</line>
<line/>
<line>    public void testGetInvocationsForLine()</line>
<line>    {</line>
<line covered="yes">        assertEquals(&quot;Incorrect invocations returned for empty coverage&quot;, </line>
<line covered="yes">                     -1, new ClassCoverage(DUMMY_STRING).getInvocationsForLine(1));</line>
<line/>
<line covered="yes">        assertEquals(&quot;Incorrect invocations returned for line 121&quot;, </line>
<line covered="yes">                     0, coverage.getInvocationsForLine(121));</line>
<line/>
<line covered="yes">        assertEquals(&quot;Incorrect invocations returned for line 122&quot;, </line>
<line covered="yes">                     0, coverage.getInvocationsForLine(122));</line>
<line/>
<line covered="yes">        assertEquals(&quot;Incorrect invocations returned for line 123&quot;, </line>
<line covered="yes">                     1, coverage.getInvocationsForLine(123));</line>
<line/>
<line covered="yes">        assertEquals(&quot;Incorrect invocations returned for line 124&quot;, </line>
<line covered="yes">                     2, coverage.getInvocationsForLine(124));</line>
<line/>
<line covered="yes">        assertEquals(&quot;Incorrect invocations returned for line 125&quot;, </line>
<line covered="yes">                     -1, coverage.getInvocationsForLine(125));</line>
<line covered="yes">    }</line>
<line/>
<line>    public void testGetLineCount()</line>
<line>    {</line>
<line covered="yes">        assertEquals(&quot;Incorrect line count returned for empty coverage&quot;, </line>
<line covered="yes">                     0, new ClassCoverage(DUMMY_STRING).getLineCount());</line>
<line/>
<line covered="yes">        assertEquals(&quot;Incorrect line count returned&quot;, </line>
<line covered="yes">                     4, coverage.getLineCount());</line>
<line covered="yes">    }</line>
<line/>
<line>    public void testGetCoveredLineCount()</line>
<line>    {</line>
<line covered="yes">        assertEquals(&quot;Incorrect covered line count returned for empty coverage&quot;, </line>
<line covered="yes">                     0, new ClassCoverage(DUMMY_STRING).getCoveredLineCount());</line>
<line/>
<line covered="yes">        assertEquals(&quot;Incorrect covered line count returned&quot;, </line>
<line covered="yes">                     2, coverage.getCoveredLineCount());</line>
<line covered="yes">    }</line>
<line/>
<line>    public void testGetBranchCount()</line>
<line>    {</line>
<line covered="yes">        assertEquals(&quot;Incorrect branch count returned for empty coverage&quot;, </line>
<line covered="yes">                     0, new ClassCoverage(DUMMY_STRING).getBranchCount());</line>
<line/>
<line covered="yes">        assertEquals(&quot;Incorrect branch count returned&quot;, 2, coverage.getBranchCount());</line>
<line covered="yes">    }</line>
<line/>
<line>    public void testGetCoveredBranchCount()</line>
<line>    {</line>
<line covered="yes">        assertEquals(&quot;Incorrect covered branch count returned for empty coverage&quot;, </line>
<line covered="yes">                     0, new ClassCoverage(DUMMY_STRING).getCoveredBranchCount());</line>
<line/>
<line covered="yes">        assertEquals(&quot;Incorrect covered branch count returned&quot;, </line>
<line covered="yes">                     1, coverage.getCoveredBranchCount());</line>
<line covered="yes">    }    </line>
<line>}</line>
</source>
<diags first="false">
<diag id="416" sev="1" tool="PMD" rule="ImportFromSamePackage">
No need to import a type that lives in the same package
</diag>
</diags>
</classDetails>
