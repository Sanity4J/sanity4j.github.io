<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../../xslt/source-code.xsl"?>
<classDetails className="com.github.sanity4j.model.coverage.PackageCoverage" pathToRoot="../../../../../" qaVersion="1.8.2" runDate="Tue Oct 30 11:02:22 AEDT 2018">
<summary high="0" significant="0" moderate="0" low="0" info="0" lineCoverage="100" branchCoverage="100" quality="100"/>
<source>
<line>package com.github.sanity4j.model.coverage; </line>
<line/>
<line>import java.util.Collections;</line>
<line>import java.util.HashMap;</line>
<line>import java.util.Map;</line>
<line>import java.util.Set;</line>
<line/>
<line>/** </line>
<line> * PackageCoverage - Coverage information for a package.</line>
<line> * </line>
<line> * @author Yiannis Paschalidis </line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line>public class PackageCoverage extends AbstractCoverage</line>
<line>{</line>
<line>    /** The package name. */</line>
<line>    private final String packageName;</line>
<line/>
<line>    /** ClassCoverages in this package, keyed by name. */</line>
<line covered="yes">    private final Map&lt;String, ClassCoverage&gt; classesByName = new HashMap&lt;String, ClassCoverage&gt;();</line>
<line/>
<line>    /**</line>
<line>     * Creates a PackageCoverage.</line>
<line>     * @param packageName the package name.</line>
<line>     */</line>
<line>    public PackageCoverage(final String packageName)</line>
<line covered="yes">    {</line>
<line covered="yes">        this.packageName = packageName;</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * @return the package name.</line>
<line>     */</line>
<line>    public String getPackageName()</line>
<line>    {</line>
<line covered="yes">        return packageName;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Retrieves the coverage information for the given class.</line>
<line>     *  </line>
<line>     * @param className the fully qualified class name.</line>
<line>     * @return the coverage for the given class, or null if there isn't any.</line>
<line>     */</line>
<line>    public ClassCoverage getClassCoverage(final String className)</line>
<line>    {</line>
<line covered="yes">        return classesByName.get(className);</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Adds class coverage.</line>
<line>     * @param coverage the class coverage to add.</line>
<line>     */</line>
<line>    public void addClass(final ClassCoverage coverage)</line>
<line>    {</line>
<line covered="yes">        classesByName.put(coverage.getClassName(), coverage);</line>
<line covered="yes">    }    </line>
<line/>
<line>    /**</line>
<line>     * @return the number of classes in this package.</line>
<line>     */</line>
<line>    public int getClassCount()</line>
<line>    {</line>
<line covered="yes">        return classesByName.size();</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @return the number of executable lines in this package.</line>
<line>     */</line>
<line>    @Override</line>
<line>    public int getLineCount()</line>
<line>    {</line>
<line covered="yes">        int count = 0;</line>
<line/>
<line covered="yes">        for (ClassCoverage coverage : classesByName.values())</line>
<line>        {</line>
<line covered="yes">            count += coverage.getLineCount();</line>
<line covered="yes">        }</line>
<line/>
<line covered="yes">        return count;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @return the number of covered lines in this package.</line>
<line>     */</line>
<line>    @Override</line>
<line>    public int getCoveredLineCount()</line>
<line>    {</line>
<line covered="yes">        int count = 0;</line>
<line/>
<line covered="yes">        for (ClassCoverage coverage : classesByName.values())</line>
<line>        {</line>
<line covered="yes">            count += coverage.getCoveredLineCount();</line>
<line covered="yes">        }</line>
<line/>
<line covered="yes">        return count;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @return the number of branches in this package.</line>
<line>     */</line>
<line>    @Override</line>
<line>    public int getBranchCount()</line>
<line>    {</line>
<line covered="yes">        int count = 0;</line>
<line/>
<line covered="yes">        for (ClassCoverage coverage : classesByName.values())</line>
<line>        {</line>
<line covered="yes">            count += coverage.getBranchCount();</line>
<line covered="yes">        }</line>
<line/>
<line covered="yes">        return count;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @return the number of covered branches in this package.</line>
<line>     */</line>
<line>    @Override</line>
<line>    public int getCoveredBranchCount()</line>
<line>    {</line>
<line covered="yes">        int count = 0;</line>
<line/>
<line covered="yes">        for (ClassCoverage coverage : classesByName.values())</line>
<line>        {</line>
<line covered="yes">            count += coverage.getCoveredBranchCount();</line>
<line covered="yes">        }</line>
<line/>
<line covered="yes">        return count;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @return the covered classes within this package.</line>
<line>     */</line>
<line>    public Set&lt;String&gt; getClassNames()</line>
<line>    {</line>
<line covered="yes">       return Collections.unmodifiableSet(classesByName.keySet());</line>
<line>    }    </line>
<line>}</line>
</source>
</classDetails>
