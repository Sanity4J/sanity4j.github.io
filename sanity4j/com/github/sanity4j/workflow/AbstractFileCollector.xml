<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../xslt/source-code.xsl"?>
<classDetails className="com.github.sanity4j.workflow.AbstractFileCollector" pathToRoot="../../../../" qaVersion="1.8.1" runDate="Mon May 29 13:41:29 AEST 2017">
<summary high="0" significant="0" moderate="0" low="3" info="5" quality="97"/>
<source>
<line sev="1"><diag id="276"/>package com.github.sanity4j.workflow; </line>
<line/>
<line>import java.io.File;</line>
<line>import java.io.IOException;</line>
<line>import java.util.ArrayList;</line>
<line>import java.util.Arrays;</line>
<line>import java.util.Iterator;</line>
<line>import java.util.List;</line>
<line>import java.util.Set;</line>
<line/>
<line>import com.github.sanity4j.util.FileUtil;</line>
<line>import com.github.sanity4j.util.QAException;</line>
<line>import com.github.sanity4j.util.QaLogger;</line>
<line>import com.github.sanity4j.util.QaUtil;</line>
<line/>
<line>/** </line>
<line> * AbstractFileCollector collects files from multiple directory </line>
<line> * hierarchies and places them in a single directory hierarchy. This is </line>
<line> * necessary, as some tools don't allow multiple directories </line>
<line> * to be specified.</line>
<line> * </line>
<line> * @author Yiannis Paschalidis</line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line>public abstract class AbstractFileCollector implements WorkUnit</line>
<line>{</line>
<line>    /** The file extensions to include in the collection.  */</line>
<line>    private final Set&lt;String&gt; includedFileExtensions;</line>
<line/>
<line>    /** The destination directory. */</line>
<line>    private final File destDir;</line>
<line/>
<line>    /** The source directories. */</line>
<line>    private final List&lt;File&gt; sourceDirs;</line>
<line/>
<line>    /**</line>
<line>     * Creates a AbstractFileCollector.</line>
<line>     * @param includedFileExtensions the file extensions to include in the copy.</line>
<line>     * @param sourceDirs the list of source directories to copy from.</line>
<line>     * @param destDir the destination directory to copy to.</line>
<line>     */</line>
<line>    public AbstractFileCollector(final Set&lt;String&gt; includedFileExtensions, final List&lt;String&gt; sourceDirs, final File destDir)</line>
<line>    {</line>
<line>        this.includedFileExtensions = includedFileExtensions;</line>
<line>        this.destDir = destDir;</line>
<line/>
<line>        this.sourceDirs = new ArrayList&lt;File&gt;(sourceDirs.size());</line>
<line/>
<line>        for (String dir : sourceDirs)</line>
<line>        {</line>
<line sev="0"><diag id="793"/>            this.sourceDirs.add(new File(dir));</line>
<line>        }</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Indicates whether at least one file must be copied. </line>
<line>     * This default implementation returns false. </line>
<line>     * </line>
<line>     * @return false</line>
<line>     */</line>
<line>    protected boolean isMandatory()</line>
<line>    {</line>
<line>        return false;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Performs the file copying.</line>
<line>     */</line>
<line>    public void run()</line>
<line>    {</line>
<line>        QaLogger.getInstance().info(&quot;Creating combined &quot; + getItemType() + &quot; directory.&quot;);        </line>
<line>        FileUtil.createDir(destDir.getPath());</line>
<line/>
<line>        int count = copyFiles(sourceDirs, destDir);        </line>
<line>        QaLogger.getInstance().info(&quot;Copied &quot; + count + &quot; files.&quot;);</line>
<line/>
<line>        if (count == 0 &amp;&amp; isMandatory())</line>
<line>        {</line>
<line>            throw new QAException(&quot;\&quot;&quot; + getItemDescription() + &quot;\&quot; are required, but none were found.&quot;);</line>
<line>        }        </line>
<line>    }</line>
<line/>
<line>    /** @return the type of item being copied, e.g. &quot;source&quot;, &quot;class&quot;. */</line>
<line>    protected abstract String getItemType();</line>
<line/>
<line>    /** @return the brief description of the type of item being copied, e.g. &quot;sources&quot;, &quot;classes&quot;. */</line>
<line>    protected abstract String getItemDescription();</line>
<line/>
<line>    /**</line>
<line>     * Copies class files to the given directory, correcting for package names</line>
<line>     * along the way. Optionally copies all files with the given extension.</line>
<line>     * </line>
<line>     * The root packages is set to be the top level of the destination directory, </line>
<line>     * regardless of where the file originated from.</line>
<line>     * </line>
<line>     * @param filePaths the files to copy</line>
<line>     * @param destDir the destination directory</line>
<line>     * </line>
<line>     * @return the number of files copied</line>
<line>     */</line>
<line sev="1"><diag id="277"/>    private int copyFiles(final List&lt;File&gt; filePaths, final File destDir)</line>
<line>    {</line>
<line>        int count = 0;</line>
<line/>
<line>        // We want to copy files from arbitrary subdirectories,</line>
<line>        // while maintaining the package structure</line>
<line>        for (Iterator&lt;File&gt; i = filePaths.iterator(); i.hasNext();)</line>
<line>        {</line>
<line>            File source = i.next();</line>
<line/>
<line>            // If it's a directory, recurse...</line>
<line>            if (source.isDirectory())</line>
<line>            {</line>
<line sev="0"><diag id="315"/>                String[] containedNames = source.list();</line>
<line sev="0"><diag id="794"/>                File[] containedFiles = new File[containedNames.length];</line>
<line/>
<line>                for (int j = 0; j &lt; containedFiles.length; j++)</line>
<line>                {</line>
<line sev="0"><diag id="795"/>                    containedFiles[j] = new File(source, containedNames[j]);</line>
<line>                }</line>
<line/>
<line>                count += copyFiles(Arrays.asList(containedFiles), destDir);</line>
<line>            }           </line>
<line>            else</line>
<line>            {</line>
<line>                // Check whether it is a file which we should be copying</line>
<line>                String fileExt = source.getName().substring(source.getName().lastIndexOf('.') + 1);</line>
<line/>
<line>                if (includedFileExtensions.contains(fileExt.toLowerCase()))</line>
<line>                {</line>
<line>                    copyFile(source, destDir);</line>
<line>                    count++;</line>
<line>                }</line>
<line>            }</line>
<line>        }</line>
<line/>
<line>        return count;       </line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Copies a single file, placing it in the correct package.</line>
<line>     * @param file the file to copy</line>
<line>     * @param destDir the destination directory root.</line>
<line>     */</line>
<line sev="1"><diag id="278"/>    protected void copyFile(final File file, final File destDir)</line>
<line>    {</line>
<line>        try</line>
<line>        {</line>
<line>            String packageName = QaUtil.getPackageForFile(file);</line>
<line/>
<line>            if (packageName == null)</line>
<line>            {</line>
<line>                // Unable to determine package, use relative path from root.</line>
<line>                StringBuffer relativePath = new StringBuffer(file.getName());</line>
<line>                File parent = null;</line>
<line/>
<line>                for (parent = file.getParentFile(); parent != null; parent = parent.getParentFile())</line>
<line>                {</line>
<line>                    if (sourceDirs.contains(parent))</line>
<line>                    {</line>
<line>                        // We've hit one of the top-level dirs, so copy using the relative path from this dir</line>
<line sev="0"><diag id="796"/>                        File dest = new File(destDir, relativePath.toString());</line>
<line>                        FileUtil.copy(file, dest);</line>
<line>                        break;</line>
<line>                    }</line>
<line>                    else</line>
<line>                    {</line>
<line>                        // Prepend the parent directory name to the relative path</line>
<line>                        relativePath.insert(0, File.separatorChar);</line>
<line>                        relativePath.insert(0, parent.getName());</line>
<line>                    }</line>
<line>                }</line>
<line/>
<line>                // If we couldn't find a relative path, then just copy the file.</line>
<line>                if (parent == null)</line>
<line>                {</line>
<line>                    File dest = new File(destDir, file.getName());</line>
<line>                    FileUtil.copy(file, dest);</line>
<line>                }</line>
<line>            }</line>
<line>            else</line>
<line>            {                    </line>
<line>                String destPath = packageName.replace('.', File.separatorChar) + File.separatorChar + file.getName();</line>
<line>                File destFile = new File(destDir, destPath);</line>
<line/>
<line>                if (destFile.exists())</line>
<line>                {</line>
<line>                    String msg = &quot;Duplicate file, analysis may be innaccurate: &quot; + destPath;</line>
<line>                    QaLogger.getInstance().warn(msg); </line>
<line>                }</line>
<line>                else</line>
<line>                {</line>
<line>                    FileUtil.copy(file, destFile);</line>
<line>                }</line>
<line>            }</line>
<line>        }</line>
<line>        catch (IOException e)</line>
<line>        {</line>
<line>            throw new QAException(&quot;Failed to copy file&quot;, e);</line>
<line>        }           </line>
<line>    }</line>
<line>}</line>
</source>
<diags first="false">
<diag id="276" sev="1" tool="Checkstyle" rule="JavadocPackageCheck">Missing package-info.java file.</diag>
<diag id="793" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="277" sev="1" tool="Checkstyle" rule="HiddenFieldCheck">'destDir' hides a field.</diag>
<diag id="315" sev="0" tool="Findbugs" rule="NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE">Possible null pointer dereference in com.github.sanity4j.workflow.AbstractFileCollector.copyFiles(List, File) due to return value of called method</diag>
<diag id="794" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="795" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="278" sev="1" tool="Checkstyle" rule="HiddenFieldCheck">'destDir' hides a field.</diag>
<diag id="796" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
</diags>
</classDetails>
