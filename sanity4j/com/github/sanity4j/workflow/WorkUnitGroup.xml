<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../xslt/source-code.xsl"?>
<classDetails className="com.github.sanity4j.workflow.WorkUnitGroup" pathToRoot="../../../../" qaVersion="1.8.0" runDate="Tue May 23 15:28:50 AEST 2017">
<summary high="0" significant="0" moderate="0" low="1" info="0" quality="97"/>
<source>
<line>package com.github.sanity4j.workflow; </line>
<line/>
<line>import java.util.ArrayList;</line>
<line>import java.util.List;</line>
<line/>
<line>/** </line>
<line> * WorkUnitGroup provides a way to group {@link WorkUnit}s. </line>
<line> * </line>
<line> * @author Yiannis Paschalidis</line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line>public class WorkUnitGroup implements WorkUnit</line>
<line>{</line>
<line>    /** A short description of this WorkUnitGroup. */</line>
<line>    private final String description;</line>
<line/>
<line>    /** The WorkUnits contained in this group. */</line>
<line>    private final List&lt;WorkUnit&gt; work = new ArrayList&lt;WorkUnit&gt;();</line>
<line/>
<line>    /**</line>
<line>     * Creates a WorkUnitGroup where parallel work unit execution is disabled.</line>
<line>     * @param description a short textual description of the WorkUnitGroup's purpose.</line>
<line>     */</line>
<line>    public WorkUnitGroup(final String description)</line>
<line>    {</line>
<line>        this(false, description);</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Creates a WorkUnitGroup where parallel work unit execution is allowed.</line>
<line>     * </line>
<line>     * @param allowConcurrent true if WorkUnits in this group can be executed in parallel, false if not.</line>
<line>     * @param description a short textual description of the WorkUnitGroup's purpose.</line>
<line>     */</line>
<line sev="1"><diag id="830"/>    public WorkUnitGroup(final boolean allowConcurrent, final String description)</line>
<line>    {</line>
<line>        // TODO: this.allowConcurrent = allowConcurrent;</line>
<line>        this.description = description;</line>
<line>    }</line>
<line/>
<line>    /** {@inheritDoc} */</line>
<line>    public String getDescription()</line>
<line>    {</line>
<line>        return description;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Executes all the WorkUnits in this group.</line>
<line>     */</line>
<line>    public void run()</line>
<line>    {</line>
<line>        // TODO: Implement threading</line>
<line/>
<line>        for (WorkUnit workUnit : work)</line>
<line>        {</line>
<line>            workUnit.run();</line>
<line>        }</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Adds a unit of work to this work group.</line>
<line>     * @param workUnit the work unit to add.</line>
<line>     */</line>
<line>    public void add(final WorkUnit workUnit) </line>
<line>    {</line>
<line>        work.add(workUnit);</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Sets the maximum number of threads which are allowed globally for WorkUnitGroups.</line>
<line>     * This effectively controls how many WorkUnits can be run in parallel.</line>
<line>     * </line>
<line>     * @param maxThreads the maximum number of threads allowed.</line>
<line>     */</line>
<line>    public static final void setMaxThreads(final int maxThreads)</line>
<line>    {</line>
<line>        // TODO: set up thread pool.</line>
<line>    }    </line>
<line>}</line>
</source>
<diags first="false">
<diag id="830" sev="1" tool="PMD" rule="UnusedFormalParameter">
Avoid unused constructor parameters such as 'allowConcurrent'.
</diag>
</diags>
</classDetails>
