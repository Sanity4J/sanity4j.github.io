<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../../xslt/source-code.xsl"?>
<classDetails className="com.github.sanity4j.workflow.tool.FindBugsResultReader" pathToRoot="../../../../../" qaVersion="1.8.1" runDate="Mon May 29 13:41:29 AEST 2017">
<summary high="0" significant="0" moderate="0" low="3" info="1" lineCoverage="88" branchCoverage="68" quality="96"/>
<source>
<line>package com.github.sanity4j.workflow.tool;</line>
<line/>
<line>import java.io.File;</line>
<line>import java.io.IOException;</line>
<line>import java.util.List;</line>
<line>import java.util.Properties;</line>
<line/>
<line>import javax.xml.bind.JAXBElement;</line>
<line/>
<line>import com.github.sanity4j.model.diagnostic.Diagnostic;</line>
<line>import com.github.sanity4j.model.diagnostic.DiagnosticFactory;</line>
<line>import com.github.sanity4j.model.diagnostic.DiagnosticSet;</line>
<line>import com.github.sanity4j.util.ExtractStats;</line>
<line>import com.github.sanity4j.util.JaxbMarshaller;</line>
<line>import com.github.sanity4j.util.QAException;</line>
<line/>
<line>import com.github.sanity4j.gen.findbugs_1_3_9.BugCollection;</line>
<line>import com.github.sanity4j.gen.findbugs_1_3_9.BugInstance;</line>
<line>import com.github.sanity4j.gen.findbugs_1_3_9.Clazz;</line>
<line>import com.github.sanity4j.gen.findbugs_1_3_9.SourceLine;</line>
<line/>
<line>/**</line>
<line> * FindBugsResultReader - Translates FindBugs results into the common format used by the QA tool.</line>
<line> *</line>
<line> * @author Yiannis Paschalidis</line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line sev="1" covered="yes"><diag id="844"/>public final class FindBugsResultReader implements ResultReader</line>
<line sev="1">{</line>
<line sev="1">	/** The properties used to configure this {@link ResultReader}. */</line>
<line sev="1" covered="yes">	private final Properties properties = new Properties();</line>
<line sev="1"/>
<line sev="1">    /** The ExtractStats to add the results to. */</line>
<line sev="1">    private ExtractStats stats;</line>
<line sev="1"/>
<line sev="1">    /** The FindBugs XML result file to read from. */</line>
<line sev="1">    private File findBugsResultFile;</line>
<line sev="1"/>
<line sev="1">	/** {@inheritDoc} */</line>
<line sev="1">	public void setProperties(final Properties properties) </line>
<line sev="1">	{</line>
<line sev="1" covered="no">		this.properties.putAll(properties);</line>
<line sev="1" covered="no">	}</line>
<line sev="1"/>
<line sev="1">    /** {@inheritDoc} */</line>
<line sev="1">    public void setResultFile(final File resultFile)</line>
<line sev="1">    {</line>
<line sev="1" covered="yes">        this.findBugsResultFile = resultFile;</line>
<line sev="1" covered="yes">    }</line>
<line sev="1"/>
<line sev="1">    /** {@inheritDoc} */</line>
<line sev="1">    public void setStats(final ExtractStats stats)</line>
<line sev="1">    {</line>
<line sev="1" covered="yes">        this.stats = stats;</line>
<line sev="1" covered="yes">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Extracts FindBugs statistics from findBugsResultFile.</line>
<line sev="1">     */</line>
<line sev="1"><diag id="848"/>    public void run()</line>
<line sev="1">    {</line>
<line sev="1" covered="yes">        DiagnosticFactory diagnosticFactory = DiagnosticFactory.getInstance(properties);</line>
<line sev="1" covered="yes">    	DiagnosticSet diagnostics = stats.getDiagnostics();</line>
<line sev="1"/>
<line sev="1" covered="yes">        BugCollection result = (BugCollection)</line>
<line sev="1" covered="yes">        JaxbMarshaller.unmarshal(findBugsResultFile, &quot;com.github.sanity4j.gen.findbugs_1_3_9&quot;, &quot;http://com.github.sanity4j/namespace/findbugs-1.3.9&quot;);</line>
<line sev="1"/>
<line sev="1" covered="yes">        List&lt;BugInstance&gt; bugs = result.getBugInstance();</line>
<line sev="1"/>
<line sev="1" covered="yes">        for (BugInstance bug : bugs)</line>
<line sev="1">        {</line>
<line sev="1" covered="yes">            Diagnostic diagnostic = diagnosticFactory.getDiagnostic();</line>
<line sev="1" covered="yes">            diagnostic.setSource(Diagnostic.SOURCE_FINDBUGS);</line>
<line sev="1" covered="yes">            diagnostic.setRuleName(bug.getType());</line>
<line sev="1" covered="yes">            diagnostic.calcSeverity();</line>
<line sev="1"/>
<line sev="1">            // Unfortunately, there is a whole set of information that may or</line>
<line sev="1">            // may not be present. We have to iterate through the whole list</line>
<line sev="1">            // and pick out the summary information that we're interested in.</line>
<line sev="1" covered="yes">            List&lt;Object&gt; details = bug.getShortMessageOrLongMessageOrClazz();</line>
<line sev="1"/>
<line sev="1" covered="yes">            for (Object detail : details)</line>
<line sev="1">            {</line>
<line sev="1" covered="yes">                if (detail instanceof Clazz)</line>
<line sev="1">                {</line>
<line sev="1" covered="yes">                    Clazz clazz = (Clazz) detail;</line>
<line sev="1"/>
<line sev="1" covered="partial">                    if (Boolean.TRUE.equals(clazz.getPrimary()))</line>
<line sev="1">                    {</line>
<line sev="1" covered="yes">                        diagnostic.setClassName(clazz.getClassname());</line>
<line sev="1"/>
<line sev="1" covered="yes">                        SourceLine sourceLine = clazz.getSourceLine();</line>
<line sev="1"/>
<line sev="1" covered="partial">                        if (sourceLine != null &amp;&amp; sourceLine.getSourcepath() != null)</line>
<line sev="1">                        {</line>
<line sev="1">                            try</line>
<line sev="1">                            {</line>
<line sev="1" covered="yes">                                diagnostic.setFileName(stats.getCanonicalPath(sourceLine.getSourcepath()));</line>
<line sev="1">                            }</line>
<line sev="1" covered="no">                            catch (IOException e)</line>
<line sev="1">                            {</line>
<line sev="1" covered="no">                                throw new QAException(&quot;Failed to get canonicalPath for &quot;</line>
<line sev="1" covered="no">                                                         + sourceLine.getSourcepath(), e);</line>
<line sev="1" covered="yes">                            }</line>
<line sev="1"/>
<line sev="1" covered="partial"><diag id="849"/>							if (sourceLine.getStart() != null &amp;&amp; sourceLine.getEnd() != 0</line>
<line sev="1" covered="partial">								&amp;&amp; sourceLine.getStart() != 0 &amp;&amp; sourceLine.getEnd() != 0)</line>
<line sev="1">							{</line>
<line sev="1" covered="yes">								diagnostic.setStartLine(sourceLine.getStart());</line>
<line sev="1" covered="yes">								diagnostic.setEndLine(sourceLine.getEnd());</line>
<line sev="1">							}</line>
<line sev="1">                        }</line>
<line sev="1">                    }</line>
<line sev="1" covered="yes">                }</line>
<line sev="1" covered="yes">                else if (detail instanceof SourceLine)</line>
<line sev="1">                {</line>
<line sev="1">                    // The SourceLine further narrows down where the problem is... in most cases</line>
<line sev="1" covered="yes">                    SourceLine sourceLine = (SourceLine) detail;</line>
<line sev="1"/>
<line sev="1" covered="partial">                    if (sourceLine.getStart() != null &amp;&amp; sourceLine.getEnd() != 0</line>
<line sev="1" covered="partial">                        &amp;&amp; sourceLine.getStart() != 0 &amp;&amp; sourceLine.getEnd() != 0)</line>
<line sev="1">                    {</line>
<line sev="1" covered="yes">                        diagnostic.setStartLine(sourceLine.getStart());</line>
<line sev="1" covered="yes">                        diagnostic.setEndLine(sourceLine.getEnd());</line>
<line sev="1">                    }</line>
<line sev="1" covered="yes">                }</line>
<line sev="1" covered="yes">                else if (detail instanceof JAXBElement&lt;?&gt;)</line>
<line sev="1">                {</line>
<line sev="1" covered="yes">                    JAXBElement&lt;?&gt; message = (JAXBElement&lt;?&gt;) detail;</line>
<line sev="1" covered="yes">                    boolean shortMessage = message.getName().getLocalPart().equals(&quot;ShortMessage&quot;);</line>
<line sev="1" covered="yes">                    boolean longMessage = message.getName().getLocalPart().equals(&quot;LongMessage&quot;);</line>
<line sev="1"/>
<line sev="1">                    // We don't want to overwrite a long message</line>
<line sev="1" covered="partial"><diag id="850"/>                    if (longMessage || (shortMessage &amp;&amp; diagnostic.getMessage() == null))</line>
<line sev="1">                    {</line>
<line sev="1" covered="yes">                        diagnostic.setMessage(message.getValue().toString());</line>
<line sev="1">                    }</line>
<line sev="1">                }</line>
<line sev="1" covered="yes">            }</line>
<line sev="1"/>
<line sev="1" covered="yes">            diagnostics.add(diagnostic);</line>
<line sev="1" covered="yes">        }</line>
<line sev="1" covered="yes">    }</line>
<line sev="1"/>
<line sev="1">    /** {@inheritDoc} */</line>
<line sev="1">    public String getDescription()</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return &quot;Reading FindBugs results&quot;;</line>
<line sev="1">    }</line>
<line sev="1">}</line>
</source>
<diags first="false">
<diag id="844" sev="1" tool="PMD" rule="CyclomaticComplexity">
The class 'FindBugsResultReader' has a Cyclomatic Complexity of 5 (Highest = 21).
</diag>
<diag id="848" sev="1" tool="PMD" rule="CyclomaticComplexity">
The method 'run' has a Cyclomatic Complexity of 21.
</diag>
<diag id="849" sev="0" tool="PMD" rule="AvoidDeeplyNestedIfStmts">
Deeply nested if..then statements are hard to read
</diag>
<diag id="850" sev="1" tool="PMD" rule="UselessParentheses">
Useless parentheses.
</diag>
</diags>
</classDetails>
