<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../../xslt/source-code.xsl"?>
<classDetails className="com.github.sanity4j.workflow.tool.SpotBugsResultReader" pathToRoot="../../../../../" qaVersion="1.8.2" runDate="Tue Oct 30 11:02:22 AEDT 2018">
<summary high="0" significant="0" moderate="0" low="3" info="1" lineCoverage="86" branchCoverage="62" quality="95"/>
<source>
<line>package com.github.sanity4j.workflow.tool;</line>
<line/>
<line>import java.io.File;</line>
<line>import java.io.IOException;</line>
<line>import java.util.List;</line>
<line>import java.util.Properties;</line>
<line/>
<line>import com.github.sanity4j.gen.spotbugs_3_1_6.BugCollection;</line>
<line>import com.github.sanity4j.gen.spotbugs_3_1_6.BugCollection.BugInstance;</line>
<line>import com.github.sanity4j.gen.spotbugs_3_1_6.SourceLine;</line>
<line>import com.github.sanity4j.model.diagnostic.Diagnostic;</line>
<line>import com.github.sanity4j.model.diagnostic.DiagnosticFactory;</line>
<line>import com.github.sanity4j.model.diagnostic.DiagnosticSet;</line>
<line>import com.github.sanity4j.util.ExtractStats;</line>
<line>import com.github.sanity4j.util.JaxbMarshaller;</line>
<line>import com.github.sanity4j.util.QAException;</line>
<line/>
<line>/**</line>
<line> * SpotBugsResultReader - Translates SpotBugs results into the common format used by the QA tool.</line>
<line> *</line>
<line> * @author Yiannis Paschalidis</line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line sev="1" covered="yes"><diag id="732"/>public final class SpotBugsResultReader implements ResultReader</line>
<line sev="1">{</line>
<line sev="1">    /** The properties used to configure this {@link ResultReader}. */</line>
<line sev="1" covered="yes">    private final Properties properties = new Properties();</line>
<line sev="1"/>
<line sev="1">    /** The ExtractStats to add the results to. */</line>
<line sev="1">    private ExtractStats stats;</line>
<line sev="1"/>
<line sev="1">    /** The SpotBugs XML result file to read from. */</line>
<line sev="1">    private File spotBugsResultFile;</line>
<line sev="1"/>
<line sev="1">    /** {@inheritDoc} */</line>
<line sev="1">    @Override</line>
<line sev="1">    public void setProperties(final Properties properties) </line>
<line sev="1">    {</line>
<line sev="1" covered="no">        this.properties.putAll(properties);</line>
<line sev="1" covered="no">    }</line>
<line sev="1"/>
<line sev="1">    /** {@inheritDoc} */</line>
<line sev="1">    @Override</line>
<line sev="1">    public void setResultFile(final File resultFile)</line>
<line sev="1">    {</line>
<line sev="1" covered="yes">        this.spotBugsResultFile = resultFile;</line>
<line sev="1" covered="yes">    }</line>
<line sev="1"/>
<line sev="1">    /** {@inheritDoc} */</line>
<line sev="1">    @Override</line>
<line sev="1">    public void setStats(final ExtractStats stats)</line>
<line sev="1">    {</line>
<line sev="1" covered="yes">        this.stats = stats;</line>
<line sev="1" covered="yes">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Extracts SpotBugs statistics from spotBugsResultFile.</line>
<line sev="1">     */</line>
<line sev="1">    @Override</line>
<line sev="1"><diag id="736"/>    public void run()</line>
<line sev="1">    {</line>
<line sev="1" covered="yes">        DiagnosticFactory diagnosticFactory = DiagnosticFactory.getInstance(properties);</line>
<line sev="1" covered="yes">        DiagnosticSet diagnostics = stats.getDiagnostics();</line>
<line sev="1"/>
<line sev="1" covered="yes">        BugCollection result = (BugCollection)</line>
<line sev="1" covered="yes">        JaxbMarshaller.unmarshal(spotBugsResultFile, &quot;com.github.sanity4j.gen.spotbugs_3_1_6&quot;, &quot;http://com.github.sanity4j/namespace/spotbugs-3.1.6&quot;);</line>
<line sev="1"/>
<line sev="1" covered="yes">        List&lt;BugInstance&gt; bugs = result.getBugInstance();</line>
<line sev="1"/>
<line sev="1" covered="yes">        for (BugInstance bug : bugs)</line>
<line sev="1">        {</line>
<line sev="1" covered="yes">            Diagnostic diagnostic = diagnosticFactory.getDiagnostic();</line>
<line sev="1" covered="yes">            diagnostic.setSource(Diagnostic.SOURCE_SPOTBUGS);</line>
<line sev="1" covered="yes">            diagnostic.setRuleName(bug.getType());</line>
<line sev="1" covered="yes">            diagnostic.calcSeverity();</line>
<line sev="1"/>
<line sev="1">            // Unfortunately, there is a whole set of information that may or</line>
<line sev="1">            // may not be present. We have to iterate through the whole list</line>
<line sev="1">            // and pick out the summary information that we're interested in.</line>
<line sev="1" covered="yes">            List&lt;Object&gt; details = bug.getClazzOrTypeOrMethod();</line>
<line sev="1"/>
<line sev="1" covered="yes">            for (Object detail : details)</line>
<line sev="1">            {</line>
<line sev="1" covered="yes">                if (detail instanceof BugInstance.Class)</line>
<line sev="1">                {</line>
<line sev="1" covered="yes">                    BugInstance.Class clazz = (BugInstance.Class) detail;</line>
<line sev="1"/>
<line sev="1" covered="partial">                    if (Boolean.TRUE.equals(clazz.getPrimary()))</line>
<line sev="1">                    {</line>
<line sev="1" covered="yes">                        diagnostic.setClassName(clazz.getClassname());</line>
<line sev="1"/>
<line sev="1" covered="yes">                        SourceLine sourceLine = clazz.getSourceLine();</line>
<line sev="1"/>
<line sev="1" covered="partial">                        if (sourceLine != null &amp;&amp; sourceLine.getSourcepath() != null)</line>
<line sev="1">                        {</line>
<line sev="1">                            try</line>
<line sev="1">                            {</line>
<line sev="1" covered="yes">                                diagnostic.setFileName(stats.getCanonicalPath(sourceLine.getSourcepath()));</line>
<line sev="1">                            }</line>
<line sev="1" covered="no">                            catch (IOException e)</line>
<line sev="1">                            {</line>
<line sev="1" covered="no">                                throw new QAException(&quot;Failed to get canonicalPath for &quot;</line>
<line sev="1" covered="no">                                                         + sourceLine.getSourcepath(), e);</line>
<line sev="1" covered="yes">                            }</line>
<line sev="1"/>
<line sev="1" covered="partial"><diag id="737"/>                            if (sourceLine.getStart() != null &amp;&amp; sourceLine.getEnd() != 0</line>
<line sev="1" covered="partial">                                &amp;&amp; sourceLine.getStart() != 0 &amp;&amp; sourceLine.getEnd() != 0)</line>
<line sev="1">                            {</line>
<line sev="1" covered="yes">                                diagnostic.setStartLine(sourceLine.getStart());</line>
<line sev="1" covered="yes">                                diagnostic.setEndLine(sourceLine.getEnd());</line>
<line sev="1">                            }</line>
<line sev="1">                        }</line>
<line sev="1">                    }</line>
<line sev="1" covered="yes">                }</line>
<line sev="1" covered="yes">                else if (detail instanceof SourceLine)</line>
<line sev="1">                {</line>
<line sev="1">                    // The SourceLine further narrows down where the problem is... in most cases</line>
<line sev="1" covered="yes">                    SourceLine sourceLine = (SourceLine) detail;</line>
<line sev="1"/>
<line sev="1" covered="partial">                    if (sourceLine.getStart() != null &amp;&amp; sourceLine.getEnd() != 0</line>
<line sev="1" covered="partial">                        &amp;&amp; sourceLine.getStart() != 0 &amp;&amp; sourceLine.getEnd() != 0)</line>
<line sev="1">                    {</line>
<line sev="1" covered="yes">                        diagnostic.setStartLine(sourceLine.getStart());</line>
<line sev="1" covered="yes">                        diagnostic.setEndLine(sourceLine.getEnd());</line>
<line sev="1">                    }</line>
<line sev="1">                }</line>
<line sev="1" covered="yes">            }</line>
<line sev="1"/>
<line sev="1" covered="partial"><diag id="738"/>            if (bug.getLongMessage() != null)</line>
<line sev="1">            {</line>
<line sev="1" covered="yes">               diagnostic.setMessage(bug.getLongMessage());</line>
<line sev="1">            }</line>
<line sev="1">            else</line>
<line sev="1">            {</line>
<line sev="1" covered="no">               diagnostic.setMessage(bug.getShortMessage());</line>
<line sev="1">            }</line>
<line sev="1"/>
<line sev="1" covered="yes">            diagnostics.add(diagnostic);</line>
<line sev="1" covered="yes">        }</line>
<line sev="1" covered="yes">    }</line>
<line sev="1"/>
<line sev="1">    /** {@inheritDoc} */</line>
<line sev="1">    @Override</line>
<line sev="1">    public String getDescription()</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return &quot;Reading SpotBugs results&quot;;</line>
<line sev="1">    }</line>
<line sev="1">}</line>
</source>
<diags first="false">
<diag id="732" sev="1" tool="PMD" rule="CyclomaticComplexity">
The class 'SpotBugsResultReader' has a Cyclomatic Complexity of 5 (Highest = 18).
</diag>
<diag id="736" sev="1" tool="PMD" rule="CyclomaticComplexity">
The method 'run' has a Cyclomatic Complexity of 18.
</diag>
<diag id="737" sev="0" tool="PMD" rule="AvoidDeeplyNestedIfStmts">
Deeply nested if..then statements are hard to read
</diag>
<diag id="738" sev="1" tool="PMD" rule="ConfusingTernary">
Avoid if (x != y) ..; else ..;
</diag>
</diags>
</classDetails>
