<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../../xslt/source-code.xsl"?>
<classDetails className="com.github.sanity4j.workflow.tool.CheckStyleRunner" pathToRoot="../../../../../" qaVersion="1.8.2" runDate="Tue Oct 30 11:02:22 AEDT 2018">
<summary high="0" significant="0" moderate="0" low="0" info="0" quality="100"/>
<source>
<line>package com.github.sanity4j.workflow.tool;</line>
<line/>
<line>import java.io.ByteArrayOutputStream;</line>
<line>import java.io.File;</line>
<line>import java.nio.charset.Charset;</line>
<line/>
<line>import com.github.sanity4j.util.ExternalProcessRunner;</line>
<line>import com.github.sanity4j.util.FileUtil;</line>
<line>import com.github.sanity4j.util.QAException;</line>
<line>import com.github.sanity4j.util.QaLogger;</line>
<line>import com.github.sanity4j.util.QaUtil;</line>
<line>import com.github.sanity4j.util.StringUtil;</line>
<line>import com.github.sanity4j.util.Tool;</line>
<line/>
<line>/**</line>
<line> * CheckStyleRunner - a work unit that runs CheckStyle.</line>
<line> *</line>
<line> * @author Yiannis Paschalidis</line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line>public class CheckStyleRunner extends AbstractToolRunner</line>
<line>{</line>
<line>    /**</line>
<line>     * Creates a CheckStyleRunner.</line>
<line>     */</line>
<line>    public CheckStyleRunner()</line>
<line>    {</line>
<line>        super(Tool.CHECKSTYLE);</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Runs CheckStyle.</line>
<line>     * @param commandLine the CheckStyle command line.</line>
<line>     */</line>
<line>    @Override</line>
<line>    protected void runTool(final String commandLine)</line>
<line>    {</line>
<line>        File resultFile = getConfig().getToolResultFile(Tool.CHECKSTYLE);</line>
<line>        FileUtil.createDir(resultFile.getParentFile().getPath());</line>
<line/>
<line>        // Run the process</line>
<line>        ByteArrayOutputStream stdout = null; </line>
<line>        ByteArrayOutputStream stderr = null; </line>
<line/>
<line>        try</line>
<line>        {</line>
<line>            stdout = new ByteArrayOutputStream();</line>
<line>            stderr = new ByteArrayOutputStream();</line>
<line/>
<line>            ExternalProcessRunner.runProcess(commandLine, stdout, stderr);</line>
<line/>
<line>            String stdoutString = new String(stdout.toByteArray(), Charset.defaultCharset());</line>
<line/>
<line>            if (!StringUtil.empty(stdoutString))</line>
<line>            {</line>
<line>                QaLogger.getInstance().info(stdoutString);</line>
<line>            }</line>
<line/>
<line>            String stderrString = new String(stderr.toByteArray(), Charset.defaultCharset());</line>
<line/>
<line>            if (!StringUtil.empty(stderrString))</line>
<line>            {</line>
<line>                QaLogger.getInstance().error(stderrString);</line>
<line>            }</line>
<line>        }</line>
<line>        finally</line>
<line>        {</line>
<line>            QaUtil.safeClose(stdout);</line>
<line>            QaUtil.safeClose(stderr);</line>
<line>        }</line>
<line/>
<line>        // The checkstyle result is the number of errors found, so</line>
<line>        // the only way to determine if it succeeded is to check if</line>
<line>        // the output file has been created successfully</line>
<line>        if (!resultFile.exists() || resultFile.length() == 0)</line>
<line>        {</line>
<line>            String out = new String(stdout.toByteArray(), Charset.defaultCharset());</line>
<line>            String err = new String(stderr.toByteArray(), Charset.defaultCharset());</line>
<line>            throw new QAException(&quot;Checkstyle Command [&quot; + commandLine + &quot;] failed to generate output: [&quot; + out  + &quot;] [&quot; + err + &quot;]&quot;);</line>
<line>        }</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * @return the description of this WorkUnit</line>
<line>     */</line>
<line>    @Override</line>
<line>    public String getDescription()</line>
<line>    {</line>
<line>        return &quot;Running CheckStyle&quot;;</line>
<line>    }</line>
<line>}</line>
</source>
</classDetails>
