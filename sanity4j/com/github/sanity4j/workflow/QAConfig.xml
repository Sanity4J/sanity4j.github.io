<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../xslt/source-code.xsl"?>
<classDetails className="com.github.sanity4j.workflow.QAConfig" pathToRoot="../../../../" qaVersion="1.8.2" runDate="Tue Oct 30 11:02:22 AEDT 2018">
<summary high="0" significant="2" moderate="2" low="13" info="3" lineCoverage="12" branchCoverage="6" quality="92"/>
<source>
<line sev="2"><diag id="670"/><diag id="671"/>package com.github.sanity4j.workflow;</line>
<line sev="2"/>
<line sev="2">import java.io.File;</line>
<line sev="2">import java.util.ArrayList;</line>
<line sev="2">import java.util.HashMap;</line>
<line sev="2">import java.util.List;</line>
<line sev="2">import java.util.Map;</line>
<line sev="2">import java.util.Map.Entry;</line>
<line sev="2">import java.util.Properties;</line>
<line sev="2">import java.util.StringTokenizer;</line>
<line sev="2"/>
<line sev="2">import com.github.sanity4j.maven.plugin.RunQAMojo;</line>
<line sev="2">import com.github.sanity4j.util.QAException;</line>
<line sev="2">import com.github.sanity4j.util.QaLogger;</line>
<line sev="2">import com.github.sanity4j.util.QaUtil;</line>
<line sev="2">import com.github.sanity4j.util.StringUtil;</line>
<line sev="2">import com.github.sanity4j.util.Tool;</line>
<line sev="2"/>
<line sev="2">/**</line>
<line sev="2"> * This class holds all the configuration attributes for the QA process.</line>
<line sev="2"> *</line>
<line sev="2"> * @author Yiannis Paschalidis</line>
<line sev="2"> * @since Sanity4J 1.0</line>
<line sev="2"> */</line>
<line sev="2" covered="yes"><diag id="672"/><diag id="673"/>public final class QAConfig</line>
<line sev="2">{</line>
<line sev="2">    /** The location of the &quot;tools&quot; configuration properties file. */</line>
<line sev="2">    private static final String TOOL_PROPERTIES = &quot;/com/github/sanity4j/workflow/tool/tools.properties&quot;;</line>
<line sev="2"/>
<line sev="2">    /** The property key for the tools to be run. */</line>
<line sev="2">    private static final String TOOLS_TO_RUN_PROPERTY = &quot;sanity4j.toolsToRun&quot;;</line>
<line sev="2"/>
<line sev="2">    /** Prefix used within properties for QA tool properties. */</line>
<line sev="2">    private static final String QA_TOOL_PREFIX = &quot;sanity4j.tool.&quot;;</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * A list of source file paths.</line>
<line sev="2">     */</line>
<line sev="2" covered="yes">    private final List&lt;String&gt; sources = new ArrayList&lt;String&gt;();</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * A list of class file paths.</line>
<line sev="2">     */</line>
<line sev="2" covered="yes">    private final List&lt;String&gt; classes = new ArrayList&lt;String&gt;();</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * A list of library file paths.</line>
<line sev="2">     */</line>
<line sev="2" covered="yes">    private final List&lt;String&gt; libraries = new ArrayList&lt;String&gt;();</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * The location of the directory containing the various tools.</line>
<line sev="2">     */</line>
<line sev="2">    private String productsDir;</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * The RunQAMojo.</line>
<line sev="2">     */</line>
<line sev="2">    private RunQAMojo runQAMojo;</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * A flag indicating whether diagnostics should be displayed first.</line>
<line sev="2">     */</line>
<line sev="2">    private boolean diagnosticsFirst;</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * The directory in which to place report output.</line>
<line sev="2">     */</line>
<line sev="2">    private String reportDir;</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * The file containing the merged jUnit coverage data.</line>
<line sev="2">     */</line>
<line sev="2">    private String coverageMergeDataFile;</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * The list of files containing the jUnit coverage data.</line>
<line sev="2">     */</line>
<line sev="2" covered="yes">    private final List&lt;String&gt; coverageDataFiles = new ArrayList&lt;String&gt;();</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * The summary data file, if used.</line>
<line sev="2">     */</line>
<line sev="2">    private String summaryDataFile;</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * The temporary directory.</line>
<line sev="2">     */</line>
<line sev="2" covered="yes">    private File tempDir = new File(System.getProperty(&quot;java.io.tmpdir&quot;), &quot;sanity4j-temp-&quot; + System.currentTimeMillis());</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * The java runtime to use when running external tasks.</line>
<line sev="2">     */</line>
<line sev="2" covered="yes">    private String javaRuntime = QAProcessor.DEFAULT_JAVA_RUNTIME;</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * The java arguments to use when running external tasks.</line>
<line sev="2">     */</line>
<line sev="2" covered="yes">    private String javaArgs = QAProcessor.JAVA_RUNTIME_MAX_MEMORY;</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * A Map from a tool / version to a configuration file.</line>
<line sev="2">     */</line>
<line sev="2" covered="yes">    private final Map&lt;String, String&gt; toolConfig = new HashMap&lt;String, String&gt;();</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * If true, the raw tool output is included in the report directory.</line>
<line sev="2">     */</line>
<line sev="2" covered="yes">    private boolean includeToolOutput = false;</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * The number of threads to use to run the tools and produce the report output.</line>
<line sev="2">     */</line>
<line sev="2" covered="yes">    private int numThreads = 1; // TODO: Add support for concurrent tasks (Note: some tasks can not be run in parallel).</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * The configuration properties. This is a combination of the internal defaults {@link #TOOL_PROPERTIES}</line>
<line sev="2">     * and the {@link #externalPropertiesPath}.</line>
<line sev="2">     */</line>
<line sev="3" covered="yes"><diag id="320"/>    private Properties properties = QaUtil.getProperties(TOOL_PROPERTIES);</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * Adds a source path to the list of source paths to analyse.</line>
<line sev="2">     *</line>
<line sev="2">     * @param sourcePath the source path to add.</line>
<line sev="2">     */</line>
<line sev="2">    public void addSourcePath(final String sourcePath)</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        if (!sources.contains(sourcePath) &amp;&amp; new File(sourcePath).exists())</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            sources.add(sourcePath);</line>
<line sev="2">        }</line>
<line sev="2" covered="no">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * Adds a class path to the list of class paths to analyse.</line>
<line sev="2">     *</line>
<line sev="2">     * @param classPath the class path to add.</line>
<line sev="2">     */</line>
<line sev="2">    public void addClassPath(final String classPath)</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        if (!classes.contains(classPath) &amp;&amp; new File(classPath).exists())</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            classes.add(classPath);</line>
<line sev="2">        }</line>
<line sev="2" covered="no">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * Adds a library path to the list of library paths.</line>
<line sev="2">     *</line>
<line sev="2">     * @param libraryPath the library path to add.</line>
<line sev="2">     */</line>
<line sev="2">    public void addLibraryPath(final String libraryPath)</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        if (!libraries.contains(libraryPath) &amp;&amp; new File(libraryPath).exists())</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            libraries.add(libraryPath);</line>
<line sev="2">        }</line>
<line sev="2" covered="no">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @return the list of source directories to analyse.</line>
<line sev="2">     */</line>
<line sev="2">    public List&lt;String&gt; getSourceDirs()</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        return sources;</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @return the list of class directories to analyse.</line>
<line sev="2">     */</line>
<line sev="2">    public List&lt;String&gt; getClassDirs()</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        return classes;</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @return the list of library directories that are necessary for analysis.</line>
<line sev="2">     */</line>
<line sev="2">    public List&lt;String&gt; getLibraryDirs()</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        return libraries;</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @return Returns the java runtime.</line>
<line sev="2">     */</line>
<line sev="2">    public String getJavaRuntime()</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        return javaRuntime;</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @param javaRuntime The java runtime to set.</line>
<line sev="2">     */</line>
<line sev="2">    public void setJavaRuntime(final String javaRuntime)</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        if (javaRuntime == null || javaRuntime.length() == 0)</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            this.javaRuntime = QAProcessor.DEFAULT_JAVA_RUNTIME;</line>
<line sev="2">        }</line>
<line sev="2">        else</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            this.javaRuntime = javaRuntime;</line>
<line sev="2">        }</line>
<line sev="2" covered="no">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @return Returns the java arguments.</line>
<line sev="2">     */</line>
<line sev="2">    public String getJavaArgs()</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        return javaArgs;</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @param javaArgs The java args to set.</line>
<line sev="2">     */</line>
<line sev="2">    public void setJavaArgs(final String javaArgs)</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        if (javaArgs == null || javaArgs.length() == 0)</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            this.javaArgs = QAProcessor.JAVA_RUNTIME_MAX_MEMORY;</line>
<line sev="2">        }</line>
<line sev="2">        else</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            this.javaArgs = javaArgs;</line>
<line sev="2">        }</line>
<line sev="2" covered="no">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @return Returns the productsDir.</line>
<line sev="2">     */</line>
<line sev="2">    public String getProductsDir()</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        return productsDir;</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @param productsDir The productsDir to set.</line>
<line sev="2">     */</line>
<line sev="2">    public void setProductsDir(final String productsDir)</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        this.productsDir = productsDir;</line>
<line sev="2" covered="no">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @return Returns the RunQAMojo.</line>
<line sev="2">     */</line>
<line sev="2">    public RunQAMojo getRunQAMojo()</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        return runQAMojo;</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @param runQAMojo The RunQAMojo to set.</line>
<line sev="2">     */</line>
<line sev="2">    public void setRunQAMojo(final RunQAMojo runQAMojo)</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        this.runQAMojo = runQAMojo;</line>
<line sev="2" covered="no">    }    </line>
<line sev="2">    /**</line>
<line sev="2">     * @return Returns the reportDir.</line>
<line sev="2">     */</line>
<line sev="2">    public String getReportDir()</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        return reportDir;</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @param reportDir The reportDir to set.</line>
<line sev="2">     */</line>
<line sev="2">    public void setReportDir(final String reportDir)</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        this.reportDir = reportDir;</line>
<line sev="2" covered="no">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @param coverageDataFile The coverage data file to set.</line>
<line sev="2">     */</line>
<line sev="2">    public void setCoverageDataFile(final String coverageDataFile)</line>
<line sev="2">    {</line>
<line sev="2" covered="yes">        addCoverageDataFile(coverageDataFile);</line>
<line sev="2" covered="yes">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @param coverageDataFile The coverage data file to add to the list.</line>
<line sev="2">     */</line>
<line sev="2">    public void addCoverageDataFile(final String coverageDataFile)</line>
<line sev="2">    {</line>
<line sev="2" covered="partial">        if (coverageDataFile != null &amp;&amp; coverageDataFile.length() &gt; 0)</line>
<line sev="2">        {</line>
<line sev="2" covered="yes">            File file = new File(coverageDataFile);</line>
<line sev="2"/>
<line sev="2" covered="partial">            if (file.exists() &amp;&amp; file.isFile())</line>
<line sev="2">            {</line>
<line sev="2" covered="partial">                if (coverageDataFiles.contains(coverageDataFile))</line>
<line sev="2">                {</line>
<line sev="2" covered="no">                    QaLogger.getInstance().debug(&quot;Coverage data file is already in the list: &quot; + coverageDataFile);</line>
<line sev="2">                }</line>
<line sev="2">                else</line>
<line sev="2">                {</line>
<line sev="2" covered="yes">                    coverageDataFiles.add(coverageDataFile);</line>
<line sev="2" covered="yes">                    QaLogger.getInstance().debug(&quot;Added coverage data file to list: &quot; + coverageDataFile);</line>
<line sev="2">                }</line>
<line sev="2">            }</line>
<line sev="2">            else</line>
<line sev="2">            {</line>
<line sev="2" covered="no">                QaLogger.getInstance().warn(&quot;Unable to locate coverage data file: &quot; + coverageDataFile);</line>
<line sev="2">            }</line>
<line sev="2" covered="yes">        }</line>
<line sev="2">        else</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            QaLogger.getInstance().debug(&quot;Invalid coverage data file name: &quot; + coverageDataFile);</line>
<line sev="2">        }</line>
<line sev="2" covered="yes">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @return Returns the coverage data file.</line>
<line sev="2">     */</line>
<line sev="2">    public String getCoverageDataFile()</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        if (coverageDataFiles.isEmpty())</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            return null;</line>
<line sev="2">        }</line>
<line sev="2" covered="no"><diag id="679"/>        else if (coverageDataFiles.size() &gt; 1)</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            return getCoverageMergeDataFile();</line>
<line sev="2">        }</line>
<line sev="2">        else</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            return coverageDataFiles.get(0);</line>
<line sev="2">        }</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @return Returns the coverage data file.</line>
<line sev="2">     */</line>
<line sev="2">    public String getCoverageMergeDataFiles()</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        if (coverageDataFiles.isEmpty())</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            return null;</line>
<line sev="2">        }</line>
<line sev="2" covered="no"><diag id="680"/>        else if (coverageDataFiles.size() &gt; 1)</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            StringBuilder builder = new StringBuilder();</line>
<line sev="2"/>
<line sev="2" covered="no">            int index = 0;</line>
<line sev="2" covered="no">            for (String coverageDataFile : coverageDataFiles)</line>
<line sev="2">            {</line>
<line sev="2" covered="no">                builder.append(coverageDataFile);</line>
<line sev="2"/>
<line sev="2" covered="no"><diag id="681"/>                if (++index &lt; coverageDataFiles.size())</line>
<line sev="2">                {</line>
<line sev="2" covered="no">                    builder.append(' ');</line>
<line sev="2">                }</line>
<line sev="2" covered="no">            }</line>
<line sev="2"/>
<line sev="2" covered="no">            return builder.toString();</line>
<line sev="2">        }</line>
<line sev="2">        else</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            return coverageDataFiles.get(0);</line>
<line sev="2">        }</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @return Returns the coverage data files as a list.</line>
<line sev="2">     */</line>
<line sev="2">    public List&lt;String&gt; getCoverageMergeDataFileList()</line>
<line sev="2">    {</line>
<line sev="2" covered="yes">    	return coverageDataFiles;</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @return The number of coverage data files.</line>
<line sev="2">     */</line>
<line sev="2">    public int getCoverageDataFileCount()</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        return coverageDataFiles.size();</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @param summaryDataFile The summaryDataFile to set.</line>
<line sev="2">     */</line>
<line sev="2">    public void setSummaryDataFile(final String summaryDataFile)</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        this.summaryDataFile = summaryDataFile;</line>
<line sev="2" covered="no">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @return Returns the summaryDataFile.</line>
<line sev="2">     */</line>
<line sev="2">    public String getSummaryDataFile()</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        return summaryDataFile;</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @return Returns the includeToolOutput.</line>
<line sev="2">     */</line>
<line sev="2">    public boolean isIncludeToolOutput()</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        return includeToolOutput;</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @param includeToolOutput The includeToolOutput to set.</line>
<line sev="2">     */</line>
<line sev="2">    public void setIncludeToolOutput(final boolean includeToolOutput)</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        this.includeToolOutput = includeToolOutput;</line>
<line sev="2" covered="no">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * Sets the maximum number of WorkUnits which can be run concurrently.</line>
<line sev="2">     *</line>
<line sev="2">     * @param numThreads the number of simultaneous WorkUnits to allow</line>
<line sev="2">     */</line>
<line sev="2">    public void setNumThreads(final int numThreads)</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        this.numThreads = numThreads;</line>
<line sev="2" covered="no">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @return the number of simultaneous WorkUnits to allow</line>
<line sev="2">     */</line>
<line sev="2">    public int getNumThreads()</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        return numThreads;</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @return the temporary directory used during analysis.</line>
<line sev="2">     */</line>
<line sev="2">    public File getTempDir()</line>
<line sev="2">    {</line>
<line sev="2" covered="yes">        return tempDir;</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * Sets the temporary directory used during analysis.</line>
<line sev="2">     *</line>
<line sev="2">     * @param tempDir the temporary directory.</line>
<line sev="2">     */</line>
<line sev="2">    public void setTempDir(final File tempDir)</line>
<line sev="2">    {</line>
<line sev="2" covered="partial">        if (tempDir == null)</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            this.tempDir = new File(System.getProperty(&quot;java.io.tmpdir&quot;), &quot;sanity4j-temp-&quot; + System.currentTimeMillis());            </line>
<line sev="2">        }</line>
<line sev="2"/>
<line sev="2" covered="yes">        this.tempDir = tempDir;</line>
<line sev="2" covered="yes">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @return the location of the combined sources directory</line>
<line sev="2">     */</line>
<line sev="2">    public File getCombinedSourceDir()</line>
<line sev="2">    {</line>
<line sev="2" covered="yes">        return new File(getTempDir(), &quot;source&quot;);</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @return the location of the combined classes directory</line>
<line sev="2">     */</line>
<line sev="2">    public File getCombinedClassDir()</line>
<line sev="2">    {</line>
<line sev="2" covered="yes">        return new File(getTempDir(), &quot;classes&quot;);</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @return the location of the combined library directory</line>
<line sev="2">     */</line>
<line sev="2">    public File getCombinedLibraryDir()</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        return new File(getTempDir(), &quot;lib&quot;);</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * Returns a map view of this configuration to be used in e.g. performing variable substitution. Some additional</line>
<line sev="2">     * parameters are added to the map for convenience.</line>
<line sev="2">     *</line>
<line sev="2">     * @return a view of this configuration as a map</line>
<line sev="2">     */</line>
<line sev="2">    public Map&lt;String, String&gt; asParameterMap()</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        Map&lt;String, String&gt; params = new HashMap&lt;String, String&gt;();</line>
<line sev="2"/>
<line sev="2" covered="no">        for (Map.Entry&lt;Object, Object&gt; entry : properties.entrySet())</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            params.put((String) entry.getKey(), (String) entry.getValue());</line>
<line sev="2" covered="no">        }</line>
<line sev="2"/>
<line sev="2" covered="no">        params.put(&quot;java&quot;, getJavaRuntime());</line>
<line sev="2" covered="no">        params.put(&quot;javaArgs&quot;, getJavaArgs());</line>
<line sev="2" covered="no">        params.put(&quot;products&quot;, getProductsDir());</line>
<line sev="2" covered="no">        params.put(&quot;source&quot;, getCombinedSourceDir().getPath());</line>
<line sev="2" covered="no">        params.put(&quot;classes&quot;, getCombinedClassDir().getPath());</line>
<line sev="2" covered="no">        params.put(&quot;libs&quot;, getCombinedLibraryDir().getPath());</line>
<line sev="2" covered="no">        params.put(&quot;coverageDataFile&quot;, getCoverageDataFile());</line>
<line sev="2" covered="no">        params.put(&quot;coverageMergeDataFiles&quot;, getCoverageMergeDataFiles());</line>
<line sev="2" covered="no">        params.put(&quot;tempDir&quot;, getTempDir().getPath());</line>
<line sev="2" covered="no">        params.put(&quot;File.separatorChar&quot;, File.separator);</line>
<line sev="2" covered="no">        params.put(&quot;File.pathSeparator&quot;, File.pathSeparator);</line>
<line sev="2"/>
<line sev="2" covered="no"><diag id="286"/>        for (Entry&lt;String, String&gt; toolConfig : this.toolConfig.entrySet())</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            String tool = toolConfig.getKey();</line>
<line sev="2" covered="no">            String config = toolConfig.getValue();</line>
<line sev="2"/>
<line sev="2" covered="no">            params.put(QA_TOOL_PREFIX + tool + &quot;.config&quot;, config);</line>
<line sev="2" covered="no">        }</line>
<line sev="2"/>
<line sev="2" covered="no">        return params;</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * The path location to the external properties file (sanity4j.properties).</line>
<line sev="2">     *</line>
<line sev="2">     * @param externalPropertiesPath the path location to the external properties file.</line>
<line sev="2">     * @param additionalProperties a String representing additional properties values (if any). </line>
<line sev="2">     */</line>
<line sev="2">    public void setExternalPropertiesPath(final String externalPropertiesPath, final String additionalProperties)</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        QaUtil.setExternalPropertiesPath(externalPropertiesPath);</line>
<line sev="3" covered="no"><diag id="321"/>        properties = QaUtil.getProperties(TOOL_PROPERTIES, additionalProperties);</line>
<line sev="2" covered="no">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * The path location to the external properties file (sanity4j.properties).</line>
<line sev="2">     *</line>
<line sev="2">     * @param externalPropertiesPath the path location to the external properties file.</line>
<line sev="2">     */</line>
<line sev="2">    public void setExternalPropertiesPath(final String externalPropertiesPath)</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        setExternalPropertiesPath(externalPropertiesPath, null);</line>
<line sev="2" covered="no">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * Returns the path location to the external properties file (sanity4j.properties).</line>
<line sev="2">     *</line>
<line sev="2">     * @return the path location to the external properties file.</line>
<line sev="2">     */</line>
<line sev="2">    public String getExternalPropertiesPath()</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        return QaUtil.getExternalPropertiesPath();</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @return &lt;b&gt;true&lt;/b&gt; if the diagnostics should be displayed first, &lt;b&gt;false&lt;/b&gt; otherwise.</line>
<line sev="2">     */</line>
<line sev="2"><diag id="682"/>    public boolean getDiagnosticsFirst()</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        return this.diagnosticsFirst;</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * @param diagnosticsFirst &lt;b&gt;true&lt;/b&gt; if the diagnostics should be displayed first, &lt;b&gt;false&lt;/b&gt; otherwise.</line>
<line sev="2">     */</line>
<line sev="2">    public void setDiagnosticsFirst(final boolean diagnosticsFirst)</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        this.diagnosticsFirst = diagnosticsFirst;</line>
<line sev="2" covered="no">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * Set the file containing the merged jUnit coverage data.</line>
<line sev="2">     *</line>
<line sev="2">     * @param coverageMergeDataFile the file containing the merged jUnit coverage data.</line>
<line sev="2">     */</line>
<line sev="2">    public void setCoverageMergeDataFile(final String coverageMergeDataFile)</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        this.coverageMergeDataFile = coverageMergeDataFile;</line>
<line sev="2" covered="no">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * Get the file containing the merged jUnit coverage data.</line>
<line sev="2">     *</line>
<line sev="2">     * @return the file containing the merged jUnit coverage data.</line>
<line sev="2">     */</line>
<line sev="2">    public String getCoverageMergeDataFile()</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        return coverageMergeDataFile;</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * Retrieve the properties for the QA tools.</line>
<line sev="2">     *</line>
<line sev="2">     * @return The Properties for the QA tools.</line>
<line sev="2">     */</line>
<line sev="2">    public Properties getToolProperties()</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        return properties;</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * Set the value of a internal tool property.</line>
<line sev="2">     *</line>
<line sev="2">     * @param key the name of the internal tool property.</line>
<line sev="2">     * @param value the value of the internal tool property.</line>
<line sev="2">     */</line>
<line sev="2">    public void setToolProperty(final String key, final String value)</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        if (key != null)</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            if (value == null)</line>
<line sev="2">            {</line>
<line sev="2" covered="no">                properties.remove(key);</line>
<line sev="2">            }</line>
<line sev="2">            else</line>
<line sev="2">            {</line>
<line sev="2" covered="no">                properties.setProperty(key, value);</line>
<line sev="2">            }</line>
<line sev="2">        }</line>
<line sev="2" covered="no">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * Finds the names of the set of tool which should be run by the QA tool. A {@link QAException} will be thrown if</line>
<line sev="2">     * the {@link #TOOLS_TO_RUN_PROPERTY} is not set.</line>
<line sev="2">     *</line>
<line sev="2">     * @return the latest version number for the given Tool.</line>
<line sev="2">     */</line>
<line sev="2">    public String[] getToolsToRun()</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        if (!properties.containsKey(TOOLS_TO_RUN_PROPERTY))</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            String message = &quot;Missing tools to run, please set property &quot; + TOOLS_TO_RUN_PROPERTY</line>
<line sev="2">                             + &quot;in external sanity4j.properties&quot;;</line>
<line sev="2"/>
<line sev="2" covered="no">            throw new QAException(message);</line>
<line sev="2">        }</line>
<line sev="2"/>
<line sev="2" covered="no">        String[] toolsToRun = properties.getProperty(TOOLS_TO_RUN_PROPERTY).split(&quot;,&quot;);</line>
<line sev="2"/>
<line sev="2" covered="no">        return toolsToRun;</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * Finds the versions of the tool which are defined within the Sanity4J properties file.</line>
<line sev="2">     *</line>
<line sev="2">     * @param tool the Tool for which to find version definitions.</line>
<line sev="2">     * @return An array of string representing the version definitions for the given &lt;em&gt;tool&lt;/em&gt;.</line>
<line sev="2">     */</line>
<line sev="2">    public String[] getToolVersions(final String tool)</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        String versions = properties.getProperty(QA_TOOL_PREFIX + tool + &quot;.versions&quot;);</line>
<line sev="2"/>
<line sev="2" covered="no">        if (versions == null)</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            return new String[0];</line>
<line sev="2">        }</line>
<line sev="2"/>
<line sev="2" covered="no">        List&lt;String&gt; versionsList = new ArrayList&lt;String&gt;();</line>
<line sev="2"/>
<line sev="2" covered="no">        for (StringTokenizer versionTokenizer = new StringTokenizer(versions, &quot;, &quot;); versionTokenizer.hasMoreTokens();)</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            String version = versionTokenizer.nextToken();</line>
<line sev="2" covered="no">            versionsList.add(version);</line>
<line sev="2" covered="no">        }</line>
<line sev="2"/>
<line sev="2" covered="no">        return versionsList.toArray(new String[versionsList.size()]);</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * Finds the latest version of the tool which is available to be run. i.e. the directory for it can be found on the</line>
<line sev="2">     * file system. A {@link QAException} will be thrown if the tool properties are incorrect or the tool can not be</line>
<line sev="2">     * found.</line>
<line sev="2">     *</line>
<line sev="2">     * @param tool the Tool to find.</line>
<line sev="2">     * @return the latest version number for the given &lt;em&gt;tool&lt;/em&gt;.</line>
<line sev="2">     */</line>
<line sev="2"><diag id="683"/>    public String getToolVersion(final String tool)</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        String availableVersions = properties.getProperty(QA_TOOL_PREFIX + tool + &quot;.versions&quot;);</line>
<line sev="2"/>
<line sev="2" covered="no">        if (availableVersions == null)</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            throw new QAException(&quot;Missing tool version information for &quot; + tool);</line>
<line sev="2">        }</line>
<line sev="2"/>
<line sev="2" covered="no">        String firstVersion = null;</line>
<line sev="2"/>
<line sev="2" covered="no">        for (StringTokenizer tok = new StringTokenizer(availableVersions, &quot;, &quot;); tok.hasMoreTokens();)</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            String version = tok.nextToken();</line>
<line sev="2"/>
<line sev="2" covered="no">            if (firstVersion == null)</line>
<line sev="2">            {</line>
<line sev="2" covered="no">                firstVersion = version;</line>
<line sev="2">            }</line>
<line sev="2"/>
<line sev="2" covered="no"><diag id="684"/>            if (productsDir != null)</line>
<line sev="2">            {</line>
<line sev="2" covered="no">                String homeKey = QA_TOOL_PREFIX + tool + '.' + version + &quot;.home&quot;;</line>
<line sev="2"/>
<line sev="2" covered="no">                if (!properties.containsKey(homeKey))</line>
<line sev="2">                {</line>
<line sev="2" covered="no">                    String message = &quot;Missing tool home for &quot; + tool + ' ' + version </line>
<line sev="2">                        + &quot;. Please set parameter: &quot; + homeKey</line>
<line sev="2">                        + &quot; in external sanity4j.properties&quot;;</line>
<line sev="2"/>
<line sev="2" covered="no">                    throw new QAException(message);</line>
<line sev="2">                }</line>
<line sev="2"/>
<line sev="2" covered="no">                String versionHome = properties.getProperty(homeKey);</line>
<line sev="2" covered="no">                versionHome = QaUtil.replaceTokens(versionHome, asParameterMap(), this, null);</line>
<line sev="2"/>
<line sev="2" covered="no"><diag id="685"/>                if (new File(versionHome).exists())</line>
<line sev="2">                {</line>
<line sev="2" covered="no">                    if (!version.equals(firstVersion))</line>
<line sev="2">                    {</line>
<line sev="2" covered="no">                        String msg = &quot;WARNING: Running an out-dated version [&quot; + version + &quot;] of tool [&quot; + tool</line>
<line sev="2">                             + &quot;]. The current version is [&quot; + firstVersion + &quot;]&quot;;</line>
<line sev="2"/>
<line sev="2" covered="no">                        QaLogger.getInstance().warn(msg);</line>
<line sev="2">                    }</line>
<line sev="2"/>
<line sev="2" covered="no">                    return version;</line>
<line sev="2">                }</line>
<line sev="2">                else</line>
<line sev="2">                {</line>
<line sev="2" covered="no">                    String msg = &quot;WARNING: Could not find [&quot; + versionHome + &quot;] directory&quot;;</line>
<line sev="2" covered="no">                    QaLogger.getInstance().warn(msg);</line>
<line sev="2">                }</line>
<line sev="2" covered="no">            }</line>
<line sev="2" covered="no"><diag id="686"/>            else if (runQAMojo != null)</line>
<line sev="2">            {</line>
<line sev="2" covered="no">                String mavenKey = QA_TOOL_PREFIX + tool + '.' + version + &quot;.maven&quot;;</line>
<line sev="2"/>
<line sev="2" covered="no">                if (!properties.containsKey(mavenKey))</line>
<line sev="2">                {</line>
<line sev="2" covered="no">                    String message = &quot;Missing Maven Coordinate for &quot; + tool + ' ' + version </line>
<line sev="2">                        + &quot;. Please set parameter: &quot; + mavenKey</line>
<line sev="2">                        + &quot; in external sanity4j.properties&quot;;</line>
<line sev="2"/>
<line sev="2" covered="no">                    throw new QAException(message);</line>
<line sev="2">                }</line>
<line sev="2"/>
<line sev="2" covered="no">                if (!version.equals(firstVersion))</line>
<line sev="2">                {</line>
<line sev="2" covered="no">                    String msg = &quot;WARNING: Running an out-dated version [&quot; + version + &quot;] of tool [&quot; + tool</line>
<line sev="2">                         + &quot;]. The current version is [&quot; + firstVersion + &quot;]&quot;;</line>
<line sev="2"/>
<line sev="2" covered="no">                    QaLogger.getInstance().warn(msg);</line>
<line sev="2">                }</line>
<line sev="2"/>
<line sev="2" covered="no">                return version;</line>
<line sev="2">            }</line>
<line sev="2">            else</line>
<line sev="2">            {</line>
<line sev="2" covered="no">                throw new QAException(&quot;Parameter 'productsDir' must be set.&quot;);</line>
<line sev="2">            }</line>
<line sev="2" covered="no">        }</line>
<line sev="2"/>
<line sev="2" covered="no">        QaLogger.getInstance().warn(&quot;Unable to find home directory for any version of tool [&quot; + tool + &quot;]&quot;);</line>
<line sev="2"/>
<line sev="2" covered="no">        return firstVersion;</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * This method retrieve the home directory for a given tool version.</line>
<line sev="2">     *</line>
<line sev="2">     * @param tool The tool for which the home directory is to be retrieved.</line>
<line sev="2">     * @param version The version number of the given &lt;em&gt;tool&lt;/em&gt; for which the home directory is to be retrieved.</line>
<line sev="2">     * @return The home directory for the given &lt;em&gt;tool&lt;/em&gt; / &lt;em&gt; version&lt;/em&gt;.</line>
<line sev="2">     */</line>
<line sev="2">    public String getToolHome(final String tool, final String version)</line>
<line sev="2">    {</line>
<line sev="2" covered="no"><diag id="687"/>        if (productsDir != null)</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            String homeKey = QA_TOOL_PREFIX + tool + '.' + version + &quot;.home&quot;;</line>
<line sev="2" covered="no">            String toolHome = properties.getProperty(homeKey);</line>
<line sev="2" covered="no">            toolHome = QaUtil.replaceTokens(toolHome, asParameterMap(), this, null);</line>
<line sev="2"/>
<line sev="2" covered="no">            QaLogger.getInstance().debug(&quot;Tool Home: &quot; + toolHome);</line>
<line sev="2" covered="no">            return toolHome;</line>
<line sev="2">        }</line>
<line sev="2" covered="no"><diag id="688"/>        else if (runQAMojo != null)</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            String mavenKey = QA_TOOL_PREFIX + tool + '.' + version + &quot;.maven&quot;;</line>
<line sev="2" covered="no">            String artifact = properties.getProperty(mavenKey);</line>
<line sev="2" covered="no">            File toolFile = runQAMojo.resolveArtifact(artifact);</line>
<line sev="2"/>
<line sev="2" covered="no">            String toolHome = toolFile.isDirectory() ? toolFile.getPath() : toolFile.getParent();</line>
<line sev="2"/>
<line sev="2" covered="no">            QaLogger.getInstance().debug(&quot;Tool Home: &quot; + toolHome);</line>
<line sev="2" covered="no">            return toolHome;</line>
<line sev="2">        }</line>
<line sev="2">        else</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            throw new QAException(&quot;Parameter 'productsDir' must be set.&quot;);</line>
<line sev="2">        }</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * This method retrieve the home directory for a given tool Maven artifact.</line>
<line sev="2">     *</line>
<line sev="2">     * @param tool The tool for which the artifact is to be retrieved.</line>
<line sev="2">     * @param version The version number of the given &lt;em&gt;tool&lt;/em&gt; for which the artifact is to be retrieved.</line>
<line sev="2">     * @return The artifact for the given &lt;em&gt;tool&lt;/em&gt; / &lt;em&gt; version&lt;/em&gt;.</line>
<line sev="2">     */</line>
<line sev="2">    public String getToolArtifact(final String tool, final String version)</line>
<line sev="2">    {</line>
<line sev="2" covered="no"><diag id="689"/>        if (runQAMojo != null)</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            String homeKey = QA_TOOL_PREFIX + tool + '.' + version + &quot;.maven&quot;;</line>
<line sev="2" covered="no">            String toolArtifact = properties.getProperty(homeKey);</line>
<line sev="2" covered="no">            toolArtifact = QaUtil.replaceTokens(toolArtifact, asParameterMap(), this, null);</line>
<line sev="2"/>
<line sev="2" covered="no">            QaLogger.getInstance().debug(&quot;Tool Artifact: &quot; + toolArtifact);</line>
<line sev="2" covered="no">            return toolArtifact;</line>
<line sev="2">        }</line>
<line sev="2">        else</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            return null;</line>
<line sev="2">        }</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * This method returns the name of the configuration parameter that specifies the configuration for a given tool.</line>
<line sev="2">     *</line>
<line sev="2">     * @param tool The name of the tool for which the configuration parameter is to be retrieved.</line>
<line sev="2">     * @param version The version of the tool for which the configuration parameter is to be retrieved.</line>
<line sev="2">     * @return the &lt;b&gt;name&lt;/b&gt; of the tool &quot;configuration&quot; parameter.</line>
<line sev="2">     */</line>
<line sev="2">    public String getToolConfigParam(final String tool, final String version)</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        return getToolParam(tool, version, &quot;config&quot;);</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * This method returns the name of a parameter that specifies the configuration for a given tool.</line>
<line sev="2">     *</line>
<line sev="2">     * @param tool The name of the tool for which the parameter is to be retrieved.</line>
<line sev="2">     * @param version The version of the tool for which the parameter is to be retrieved.</line>
<line sev="2">     * @param key the name of the key for the parameter.</line>
<line sev="2">     * @return the name of the tool parameter.</line>
<line sev="2">     */</line>
<line sev="2">    private String getToolParam(final String tool, final String version, final String key)</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        StringBuilder configBuf = new StringBuilder();</line>
<line sev="2"/>
<line sev="2" covered="no">        configBuf.append(QA_TOOL_PREFIX).append(tool).append('.');</line>
<line sev="2"/>
<line sev="2" covered="no">        if (version != null)</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            configBuf.append(version).append('.');</line>
<line sev="2">        }</line>
<line sev="2"/>
<line sev="2" covered="no">        configBuf.append(key);</line>
<line sev="2"/>
<line sev="2" covered="no">        String configKey = configBuf.toString();</line>
<line sev="2"/>
<line sev="2" covered="no">        return configKey;</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * This method returns the externally specified configuration for a given tool.</line>
<line sev="2">     *</line>
<line sev="2">     * @param tool The tool for which the configuration is to be retrieved.</line>
<line sev="2">     * @param version the version of the tool for which the configuration is to be retrieved.</line>
<line sev="2">     * @return the &lt;b&gt;value&lt;/b&gt; of the tool &quot;configuration&quot; parameter.</line>
<line sev="2">     */</line>
<line sev="2">    public String getToolConfig(final String tool, final String version)</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        String configKey = getToolConfigParam(tool, version);</line>
<line sev="2" covered="no"><diag id="287"/>        String toolConfig = properties.getProperty(configKey);</line>
<line sev="2" covered="no">        toolConfig = QaUtil.replaceTokens(toolConfig, asParameterMap(), this, null);</line>
<line sev="2"/>
<line sev="2" covered="no">        return toolConfig;</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * This method sets the configuration used for a given &lt;em&gt;tool&lt;/em&gt; / &lt;em&gt;version&lt;/em&gt;.</line>
<line sev="2">     *</line>
<line sev="2">     * @param tool The tool for which the configuration is to be set.</line>
<line sev="2">     * @param version the version of the tool for which the configuration is to be set.</line>
<line sev="2">     * @param config the value of the tool &quot;configuration&quot; parameter.</line>
<line sev="2">     * @param classpath the classpath used by the &quot;configuration&quot;.</line>
<line sev="2">     */</line>
<line sev="2">    public void setToolConfig(final String tool, final String version, final String config, final String classpath)</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        String configKey = getToolConfigParam(tool, version);</line>
<line sev="2" covered="no"><diag id="288"/>        String toolConfig = QaUtil.replaceTokens(config, asParameterMap(), this, null);</line>
<line sev="2" covered="no">        properties.setProperty(configKey, toolConfig);</line>
<line sev="2"/>
<line sev="2" covered="no">        QaLogger.getInstance().debug(&quot;Config set: &quot; + configKey + &quot; = &quot; + toolConfig);</line>
<line sev="2"/>
<line sev="2" covered="no">        if (classpath != null)</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            String configClasspathKey = getToolConfigClasspathParam(tool, version);</line>
<line sev="2" covered="no">            String configClasspath = QaUtil.replaceTokens(classpath, asParameterMap(), this, null);</line>
<line sev="2"/>
<line sev="2" covered="no">            properties.setProperty(configClasspathKey, configClasspath);</line>
<line sev="2">        }</line>
<line sev="2" covered="no">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * This method returns the name of the configuration parameter that specifies the configuration classpath for a</line>
<line sev="2">     * given tool.</line>
<line sev="2">     *</line>
<line sev="2">     * @param tool The name of the tool for which the configuration classpath parameter is to be retrieved.</line>
<line sev="2">     * @param version The version of the tool for which the configuration classpath parameter is to be retrieved. If the</line>
<line sev="2">     *            configuration is valid for &quot;all&quot; versions of a given tool, then this parameter may be null.</line>
<line sev="2">     * @return the name of the tool &quot;configuration&quot; parameter.</line>
<line sev="2">     */</line>
<line sev="2">    public String getToolConfigClasspathParam(final String tool, final String version)</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        return getToolParam(tool, version, &quot;classpath&quot;);</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * This method returns the externally specified configuration for a given tool.</line>
<line sev="2">     *</line>
<line sev="2">     * @param tool The tool for which the configuration is to be retrieved.</line>
<line sev="2">     * @param version the version of the tool for which the configuration is to be retrieved.</line>
<line sev="2">     * @return the &lt;b&gt;value&lt;/b&gt; of the tool &quot;configuration&quot; parameter.</line>
<line sev="2">     */</line>
<line sev="2">    public String getToolConfigClasspath(final String tool, final String version)</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        String configClasspathKey = getToolConfigClasspathParam(tool, version);</line>
<line sev="2" covered="no">        String toolConfigClasspath = properties.getProperty(configClasspathKey);</line>
<line sev="2" covered="no">        toolConfigClasspath = QaUtil.replaceTokens(toolConfigClasspath, asParameterMap(), this, null);</line>
<line sev="2"/>
<line sev="2" covered="no">        return toolConfigClasspath;</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * This method retrieve the &quot;Runner&quot; class used to run a given tool.</line>
<line sev="2">     *</line>
<line sev="2">     * @param tool The tool to be run.</line>
<line sev="2">     * @param version The version of the tool to be run.</line>
<line sev="2">     * @return A String representing the fully qualified name of the &quot;runner&quot; class.</line>
<line sev="2">     */</line>
<line sev="2">    public String getToolRunner(final String tool, final String version)</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        String property = getToolParam(tool, version, &quot;runner&quot;);</line>
<line sev="2"/>
<line sev="2" covered="no">        String runnerClassName = properties.getProperty(property);</line>
<line sev="2"/>
<line sev="2" covered="no">        if (StringUtil.empty(runnerClassName))</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            String message = &quot;Missing runner for &quot; + tool + ' ' + version + &quot;, please set property '&quot; + property</line>
<line sev="2">                             + &quot;' in external sanity4j.properties&quot;;</line>
<line sev="2"/>
<line sev="2" covered="no">            throw new QAException(message);</line>
<line sev="2">        }</line>
<line sev="2"/>
<line sev="2" covered="no">        return runnerClassName;</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * This method retrieve the &quot;Reader&quot; class used to parse the output from a given tool.</line>
<line sev="2">     *</line>
<line sev="2">     * @param tool The tool to be run.</line>
<line sev="2">     * @param version The version of the tool to be run.</line>
<line sev="2">     * @return A String representing the fully qualified name of the &quot;reader&quot; class.</line>
<line sev="2">     */</line>
<line sev="2">    public String getToolReader(final String tool, final String version)</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        String property = getToolParam(tool, version, &quot;reader&quot;);</line>
<line sev="2"/>
<line sev="2" covered="no">        String readerClassName = properties.getProperty(property);</line>
<line sev="2"/>
<line sev="2" covered="no">        if (StringUtil.empty(readerClassName))</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            String message = &quot;Missing reader for &quot; + tool + ' ' + version + &quot;, &quot; + &quot;please set property '&quot;</line>
<line sev="2">                             + property + &quot;' &quot; + &quot;in external sanity4j.properties&quot;;</line>
<line sev="2"/>
<line sev="2" covered="no">            throw new QAException(message);</line>
<line sev="2">        }</line>
<line sev="2"/>
<line sev="2" covered="no">        return readerClassName;</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * Returns the result file for the given tool.</line>
<line sev="2">     *</line>
<line sev="2">     * @param tool the tool.</line>
<line sev="2">     * @return the result file for the given tool.</line>
<line sev="2">     */</line>
<line sev="2">    public File getToolResultFile(final Tool tool)</line>
<line sev="2">    {</line>
<line sev="2" covered="yes">        return new File(getTempDir(), tool.getId() + &quot;_result.xml&quot;);</line>
<line sev="2">    }</line>
<line sev="2"/>
<line sev="2">    /**</line>
<line sev="2">     * Returns the command line used to run a given tool.</line>
<line sev="2">     *</line>
<line sev="2">     * @param tool The tool to be run.</line>
<line sev="2">     * @param version The version of the tool to be run.</line>
<line sev="2">     * @return A command line that can be run from a shell to invoke the given tool.</line>
<line sev="2">     */</line>
<line sev="2">    public String getToolCommandLine(final String tool, final String version)</line>
<line sev="2">    {</line>
<line sev="2" covered="no">        String commandKey = getToolParam(tool, version, &quot;command&quot;);</line>
<line sev="2"/>
<line sev="2" covered="no">        if (!properties.containsKey(commandKey))</line>
<line sev="2">        {</line>
<line sev="2" covered="no">            String message = &quot;Missing tool command for &quot; + tool + ' ' + version + &quot;. Please set parameter: &quot;</line>
<line sev="2">                             + commandKey + &quot; in external sanity4j.properties&quot;;</line>
<line sev="2"/>
<line sev="2" covered="no">            throw new QAException(message);</line>
<line sev="2">        }</line>
<line sev="2"/>
<line sev="2" covered="no">        String toolCommandLine = properties.getProperty(commandKey);</line>
<line sev="2"/>
<line sev="2" covered="no">        return toolCommandLine;</line>
<line sev="2">    }</line>
<line sev="2">}</line>
</source>
<diags first="false">
<diag id="670" sev="2" tool="PMD" rule="GodClass">
Possible God class (WMC=106, ATFD=39, TCC=0.023182957393483708)
</diag>
<diag id="671" sev="0" tool="PMD" rule="ExcessivePublicCount">
This class has a bunch of public methods and attributes
</diag>
<diag id="672" sev="1" tool="PMD" rule="CyclomaticComplexity">
The class 'QAConfig' has a Cyclomatic Complexity of 2 (Highest = 11).
</diag>
<diag id="673" sev="0" tool="PMD" rule="TooManyFields">
Too many fields
</diag>
<diag id="320" sev="3" tool="SpotBugs" rule="DMI_HARDCODED_ABSOLUTE_FILENAME">Hard coded reference to an absolute pathname in new com.github.sanity4j.workflow.QAConfig()</diag>
<diag id="679" sev="1" tool="PMD" rule="AvoidLiteralsInIfCondition">
Avoid using Literals in Conditional Statements
</diag>
<diag id="680" sev="1" tool="PMD" rule="AvoidLiteralsInIfCondition">
Avoid using Literals in Conditional Statements
</diag>
<diag id="681" sev="2" tool="PMD" rule="AssignmentInOperand">
Avoid assignments in operands
</diag>
<diag id="286" sev="1" tool="Checkstyle" rule="HiddenFieldCheck">'toolConfig' hides a field.</diag>
<diag id="321" sev="3" tool="SpotBugs" rule="DMI_HARDCODED_ABSOLUTE_FILENAME">Hard coded reference to an absolute pathname in com.github.sanity4j.workflow.QAConfig.setExternalPropertiesPath(String, String)</diag>
<diag id="682" sev="1" tool="PMD" rule="BooleanGetMethodName">
A getX() method which returns a boolean should be named isX()
</diag>
<diag id="683" sev="1" tool="PMD" rule="CyclomaticComplexity">
The method 'getToolVersion' has a Cyclomatic Complexity of 11.
</diag>
<diag id="684" sev="1" tool="PMD" rule="ConfusingTernary">
Avoid if (x != y) ..; else ..;
</diag>
<diag id="685" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="686" sev="1" tool="PMD" rule="ConfusingTernary">
Avoid if (x != y) ..; else ..;
</diag>
<diag id="687" sev="1" tool="PMD" rule="ConfusingTernary">
Avoid if (x != y) ..; else ..;
</diag>
<diag id="688" sev="1" tool="PMD" rule="ConfusingTernary">
Avoid if (x != y) ..; else ..;
</diag>
<diag id="689" sev="1" tool="PMD" rule="ConfusingTernary">
Avoid if (x != y) ..; else ..;
</diag>
<diag id="287" sev="1" tool="Checkstyle" rule="HiddenFieldCheck">'toolConfig' hides a field.</diag>
<diag id="288" sev="1" tool="Checkstyle" rule="HiddenFieldCheck">'toolConfig' hides a field.</diag>
</diags>
</classDetails>
