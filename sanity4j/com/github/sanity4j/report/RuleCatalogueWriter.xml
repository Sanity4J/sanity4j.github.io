<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../xslt/source-code.xsl"?>
<classDetails className="com.github.sanity4j.report.RuleCatalogueWriter" pathToRoot="../../../../" qaVersion="1.8.1" runDate="Mon May 29 13:41:29 AEST 2017">
<summary high="0" significant="0" moderate="0" low="0" info="5" quality="100"/>
<source>
<line>package com.github.sanity4j.report;</line>
<line/>
<line>import java.io.File;</line>
<line>import java.io.IOException;</line>
<line>import java.io.InputStream;</line>
<line>import java.util.ArrayList;</line>
<line>import java.util.Collections;</line>
<line>import java.util.Comparator;</line>
<line>import java.util.Date;</line>
<line>import java.util.HashMap;</line>
<line>import java.util.List;</line>
<line>import java.util.Map;</line>
<line>import java.util.Map.Entry;</line>
<line>import java.util.Properties;</line>
<line/>
<line>import com.github.sanity4j.model.diagnostic.Diagnostic;</line>
<line>import com.github.sanity4j.model.diagnostic.DiagnosticFactory;</line>
<line>import com.github.sanity4j.util.FileUtil;</line>
<line>import com.github.sanity4j.workflow.QAProcessor;</line>
<line/>
<line>/**</line>
<line> * RuleCatalogueWriter writes the rule catalogue.</line>
<line> * </line>
<line> * @author Yiannis Paschalidis</line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line>public class RuleCatalogueWriter</line>
<line>{</line>
<line>    /** The destination directory. */</line>
<line>    private final File reportDir;</line>
<line/>
<line>    /** Initial buffer size. */</line>
<line>    private static final int INITIAL_BUF_SIZE = 256;</line>
<line/>
<line>    /**</line>
<line>     * Creates a RuleCatalogueWriter.</line>
<line>     * </line>
<line>     * @param reportDir the report directory</line>
<line>     */</line>
<line>    public RuleCatalogueWriter(final File reportDir)</line>
<line>    {</line>
<line>        this.reportDir = reportDir;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Writes the rule catalogue to the report directory.</line>
<line>     * </line>
<line>     * @throws IOException if there is an error writing any file</line>
<line>     */</line>
<line>    public void writeRuleCatalogue() throws IOException</line>
<line>    {</line>
<line>        StringBuffer xml = new StringBuffer(INITIAL_BUF_SIZE);</line>
<line/>
<line>        xml.append(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot;</line>
<line>                       + &quot;&lt;?xml-stylesheet type=\&quot;text/xsl\&quot; href=\&quot;xslt/rule-catalogue.xsl\&quot;?&gt;\n&quot;</line>
<line>                       + &quot;&lt;rules qaVersion=\&quot;&quot;).append(QAProcessor.QA_VERSION).append(&quot;\&quot; runDate=\&quot;&quot;)</line>
<line>            .append(new Date()).append(&quot;\&quot;&gt;\n&quot;);</line>
<line/>
<line>        DiagnosticFactory diagnosticFactory = DiagnosticFactory.getInstance();</line>
<line/>
<line>        List&lt;DiagnosticProperty&gt; diagnosticProperties = getDiagnosticProperties();</line>
<line/>
<line>        for (DiagnosticProperty property : diagnosticProperties)</line>
<line>        {</line>
<line>            // Create a diagnostic, to get e.g. default severities.</line>
<line>            Diagnostic diag = diagnosticFactory.getDiagnostic();</line>
<line/>
<line>            diag.setSource(getDiagnosticSource(property.getTool()));</line>
<line>            diag.setRuleName(property.getRule());</line>
<line>            diag.setSeverity(property.getSeverity());</line>
<line/>
<line>            if (diag.getSeverity() &gt;= Diagnostic.SEVERITY_INFO &amp;&amp; diag.getSeverity() &lt;= Diagnostic.SEVERITY_HIGH)</line>
<line>            {</line>
<line>                xml.append(&quot;&lt;rule name=\&quot;&quot;).append(diag.getRuleName()).append(&quot;\&quot; tool=\&quot;&quot;)</line>
<line>                    .append(diag.getSourceDescription()).append(&quot;\&quot; severity=\&quot;&quot;).append(diag.getSeverity())</line>
<line>                    .append(&quot;\&quot;/&gt;\n&quot;);</line>
<line>            }</line>
<line>        }</line>
<line/>
<line>        xml.append(&quot;&lt;/rules&gt;&quot;);</line>
<line/>
<line>        FileUtil.writeToFile(xml.toString(), new File(reportDir, &quot;rule-catalogue.xml&quot;));</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Retrieves the diagnostic properties file.</line>
<line>     * </line>
<line>     * @return a list of DiagnosticProperty objects</line>
<line>     * @throws IOException if there is an error reading the properties file</line>
<line>     */</line>
<line>    private List&lt;DiagnosticProperty&gt; getDiagnosticProperties() throws IOException</line>
<line>    {</line>
<line>        Properties properties = new Properties();</line>
<line>        InputStream diagnosticStream = Diagnostic.class.getResourceAsStream(&quot;Diagnostic.properties&quot;);</line>
<line/>
<line>        if (diagnosticStream != null)</line>
<line>        {</line>
<line>            properties.load(diagnosticStream);</line>
<line>            diagnosticStream.close();</line>
<line>        }</line>
<line/>
<line>        Map&lt;String, DiagnosticProperty&gt; keyedProperties = new HashMap&lt;String, DiagnosticProperty&gt;();</line>
<line/>
<line>        for (Entry&lt;Object, Object&gt; entry : properties.entrySet())</line>
<line>        {</line>
<line>            String propertyName = (String) entry.getKey();</line>
<line>            String propertyValue = (String) entry.getValue();</line>
<line/>
<line>            // each property in the properties file is in the following format:</line>
<line>            // &lt;source&gt;.&lt;ruleName&gt;.&lt;option&gt;=&lt;value&gt;</line>
<line>            String[] parts = propertyName.split(&quot;\\.&quot;);</line>
<line>            String tool = parts[0];</line>
<line>            String rule = parts[1];</line>
<line>            String option = parts[2];</line>
<line>            String key = parts[0] + '.' + parts[1];</line>
<line/>
<line>            DiagnosticProperty property = keyedProperties.get(key);</line>
<line/>
<line>            if (property == null)</line>
<line>            {</line>
<line sev="0"><diag id="554"/>                property = new DiagnosticProperty(tool, rule);</line>
<line>                keyedProperties.put(key, property);</line>
<line>            }</line>
<line/>
<line>            if (&quot;severity&quot;.equalsIgnoreCase(option))</line>
<line>            {</line>
<line>                property.setSeverity(Integer.parseInt(propertyValue.trim()));</line>
<line>            }</line>
<line>        }</line>
<line/>
<line>        List&lt;DiagnosticProperty&gt; result = new ArrayList&lt;DiagnosticProperty&gt;();</line>
<line>        result.addAll(keyedProperties.values());</line>
<line/>
<line>        Collections.sort(result, new Comparator&lt;DiagnosticProperty&gt;()</line>
<line>        {</line>
<line>            public int compare(final DiagnosticProperty prop1, final DiagnosticProperty prop2)</line>
<line>            {</line>
<line sev="0"><diag id="555"/><diag id="556"/>                int diff = prop2.severity - prop1.severity;</line>
<line/>
<line>                if (diff == 0)</line>
<line>                {</line>
<line sev="0"><diag id="557"/><diag id="558"/>                    diff = prop1.rule.toLowerCase().compareTo(prop2.rule.toLowerCase());</line>
<line>                }</line>
<line/>
<line>                return diff;</line>
<line>            }</line>
<line>        });</line>
<line/>
<line>        return result;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Return the source of a Diagnostic, given a tool name. This is the reverse of Diagnostic.getSourceDescription.</line>
<line>     * </line>
<line>     * @param toolName the tool name, e.g. &quot;Checkstyle&quot;.</line>
<line>     * @return the code for the given tool</line>
<line>     */</line>
<line>    private int getDiagnosticSource(final String toolName)</line>
<line>    {</line>
<line>        for (int i = Diagnostic.SOURCE_OTHER; i &lt;= Diagnostic.SOURCE_CHECKSTYLE; i++)</line>
<line>        {</line>
<line>            if (Diagnostic.getSourceDescription(i).equals(toolName))</line>
<line>            {</line>
<line>                return i;</line>
<line>            }</line>
<line>        }</line>
<line/>
<line>        return Diagnostic.SOURCE_OTHER;</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Encapsulates entries in the Diagnostic properties file.</line>
<line>     */</line>
<line>    private static final class DiagnosticProperty</line>
<line>    {</line>
<line>        /** The tool name. */</line>
<line>        private String tool;</line>
<line/>
<line>        /** The rule name. */</line>
<line>        private String rule;</line>
<line/>
<line>        /** The severity of the diagnostic. */</line>
<line>        private int severity = Diagnostic.SEVERITY_INFO;</line>
<line/>
<line>        /**</line>
<line>         * Creates a DiagnosticProperty.</line>
<line>         * </line>
<line>         * @param tool the tool name</line>
<line>         * @param rule the rule name</line>
<line>         */</line>
<line>        public DiagnosticProperty(final String tool, final String rule)</line>
<line>        {</line>
<line>            this.tool = tool;</line>
<line>            this.rule = rule;</line>
<line>        }</line>
<line/>
<line>        /**</line>
<line>         * @return Returns the rule.</line>
<line>         */</line>
<line>        public String getRule()</line>
<line>        {</line>
<line>            return rule;</line>
<line>        }</line>
<line/>
<line>        /**</line>
<line>         * @param rule The rule to set.</line>
<line>         */</line>
<line>        public void setRule(final String rule)</line>
<line>        {</line>
<line>            this.rule = rule;</line>
<line>        }</line>
<line/>
<line>        /**</line>
<line>         * @return Returns the severity.</line>
<line>         */</line>
<line>        public int getSeverity()</line>
<line>        {</line>
<line>            return severity;</line>
<line>        }</line>
<line/>
<line>        /**</line>
<line>         * @param severity The severity to set.</line>
<line>         */</line>
<line>        public void setSeverity(final int severity)</line>
<line>        {</line>
<line>            this.severity = severity;</line>
<line>        }</line>
<line/>
<line>        /**</line>
<line>         * @return Returns the tool.</line>
<line>         */</line>
<line>        public String getTool()</line>
<line>        {</line>
<line>            return tool;</line>
<line>        }</line>
<line/>
<line>        /**</line>
<line>         * @param tool The tool to set.</line>
<line>         */</line>
<line>        public void setTool(final String tool)</line>
<line>        {</line>
<line>            this.tool = tool;</line>
<line>        }</line>
<line>    }</line>
<line>}</line>
</source>
<diags first="false">
<diag id="554" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="555" sev="0" tool="PMD" rule="AccessorMethodGeneration">
Avoid autogenerated methods to access private fields and methods of inner / outer classes
</diag>
<diag id="556" sev="0" tool="PMD" rule="AccessorMethodGeneration">
Avoid autogenerated methods to access private fields and methods of inner / outer classes
</diag>
<diag id="557" sev="0" tool="PMD" rule="AccessorMethodGeneration">
Avoid autogenerated methods to access private fields and methods of inner / outer classes
</diag>
<diag id="558" sev="0" tool="PMD" rule="AccessorMethodGeneration">
Avoid autogenerated methods to access private fields and methods of inner / outer classes
</diag>
</diags>
</classDetails>
