<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../xslt/source-code.xsl"?>
<classDetails className="com.github.sanity4j.report.ReportUtil" pathToRoot="../../../../" qaVersion="1.8.1" runDate="Mon May 29 13:41:29 AEST 2017">
<summary high="0" significant="1" moderate="1" low="0" info="1" lineCoverage="77" branchCoverage="100" quality="87"/>
<source>
<line>package com.github.sanity4j.report; </line>
<line/>
<line>import java.util.ArrayList;</line>
<line>import java.util.HashMap;</line>
<line>import java.util.List;</line>
<line>import java.util.Map;</line>
<line>import java.util.Properties;</line>
<line>import java.util.StringTokenizer;</line>
<line/>
<line>import com.github.sanity4j.model.diagnostic.Diagnostic;</line>
<line>import com.github.sanity4j.model.diagnostic.DiagnosticSet;</line>
<line>import com.github.sanity4j.model.summary.PackageSummary;</line>
<line>import com.github.sanity4j.util.QaLogger;</line>
<line>import com.github.sanity4j.util.QaUtil;</line>
<line>import com.github.sanity4j.util.math.InfixExpression;</line>
<line>import com.github.sanity4j.util.math.SyntaxException;</line>
<line/>
<line/>
<line>/** </line>
<line> * General utility methods used by the report classes. </line>
<line> * </line>
<line> * @author Yiannis Paschalidis </line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line>public final class ReportUtil</line>
<line>{</line>
<line>    /** The reporting properties, such as metrics. */</line>
<line sev="3" covered="yes"><diag id="303"/>    private static Properties properties = QaUtil.getProperties(&quot;/com/github/sanity4j/report/report.properties&quot;);</line>
<line/>
<line>    /** ReportUtil should not be instantiated. */</line>
<line>    private ReportUtil()</line>
<line covered="no">    {</line>
<line covered="no">    }</line>
<line/>
<line>    /**</line>
<line>     * Return the path to the report &quot;root&quot; directory for the given path.</line>
<line>     * </line>
<line>     * @param relativeFileName a path to a file, relative to the root dir</line>
<line>     * @return the relative path to the root directory</line>
<line>     */</line>
<line>    public static String getHtmlPathToRoot(final String relativeFileName)</line>
<line>    {</line>
<line covered="yes">        StringBuffer pathToRoot = new StringBuffer();</line>
<line/>
<line>        // For the path com/bar/foo/Foobar.html, we need &quot;../../../&quot;</line>
<line covered="yes">        int depth = new StringTokenizer(relativeFileName, &quot;/\\&quot;).countTokens();</line>
<line/>
<line sev="2" covered="yes"><diag id="541"/>        while (--depth &gt; 0)</line>
<line>        {</line>
<line covered="yes">            pathToRoot.append(&quot;../&quot;);</line>
<line>        }</line>
<line/>
<line covered="yes">        return pathToRoot.toString();</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Escapes (certain) special characters in HTML commonly found in source files.</line>
<line>     * </line>
<line>     * @param text the String to escape</line>
<line>     * @return the escaped String</line>
<line>     */</line>
<line>    public static String htmlEscape(final String text)</line>
<line>    {</line>
<line covered="yes">        if (text == null || text.length() == 0)</line>
<line>        {</line>
<line covered="yes">            return text;</line>
<line>        }</line>
<line/>
<line covered="yes">        final int len = text.length();</line>
<line covered="yes">        StringBuffer out = new StringBuffer(len);</line>
<line/>
<line covered="yes">        for (int i = 0; i &lt; len; i++)</line>
<line>        {</line>
<line covered="yes">            char chr = text.charAt(i);</line>
<line/>
<line covered="yes">            switch (chr)</line>
<line>            {</line>
<line>                case '&lt;':</line>
<line covered="yes">                    out.append(&quot;&amp;lt;&quot;);</line>
<line covered="yes">                    break;</line>
<line>                case '&gt;':</line>
<line covered="yes">                    out.append(&quot;&amp;gt;&quot;);</line>
<line covered="yes">                    break;</line>
<line>                case '&quot;':</line>
<line covered="yes">                    out.append(&quot;&amp;quot;&quot;);</line>
<line covered="yes">                    break;</line>
<line>                case '&amp;':</line>
<line covered="yes">                    out.append(&quot;&amp;amp;&quot;);</line>
<line covered="yes">                    break;</line>
<line/>
<line>                default:</line>
<line covered="yes">                    out.append(chr);</line>
<line>            }</line>
<line>        }</line>
<line/>
<line covered="yes">        return out.toString();</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Produces a Map of Diagnostic lists, keyed by class name.</line>
<line>     * </line>
<line>     * @param diagnostics the diagnostics to map</line>
<line>     * @return a Map containing Lists of Diagnostics, keyed by class name</line>
<line>     */</line>
<line>    public static Map&lt;String, List&lt;Diagnostic&gt;&gt; mapDiagnosticsByClassName(final List&lt;Diagnostic&gt; diagnostics)</line>
<line>    {</line>
<line covered="yes">        Map&lt;String, List&lt;Diagnostic&gt;&gt; diagnosticsByClassName = new HashMap&lt;String, List&lt;Diagnostic&gt;&gt;();</line>
<line/>
<line covered="yes">        for (Diagnostic diagnostic : diagnostics)</line>
<line>        {</line>
<line covered="yes">            List&lt;Diagnostic&gt; list = diagnosticsByClassName.get(diagnostic.getClassName());</line>
<line/>
<line covered="yes">            if (list == null)</line>
<line>            {</line>
<line sev="0" covered="yes"><diag id="542"/>                list = new ArrayList&lt;Diagnostic&gt;();</line>
<line covered="yes">                diagnosticsByClassName.put(diagnostic.getClassName(), list);</line>
<line>            }</line>
<line/>
<line covered="yes">            list.add(diagnostic);</line>
<line covered="yes">        }</line>
<line/>
<line covered="yes">        return diagnosticsByClassName;</line>
<line>    }    </line>
<line/>
<line>    /**</line>
<line>     * Returns the path of a source file, relative to the source directory.</line>
<line>     * </line>
<line>     * @param basePath the path of the source directory</line>
<line>     * @param sourcePath the absolute path to the source file</line>
<line>     * @return the path of the source file, relative to the source directory </line>
<line>     */</line>
<line>    public static String getRelativeSourcePath(final String basePath, final String sourcePath)</line>
<line>    {</line>
<line covered="yes">        if (!sourcePath.startsWith(basePath))</line>
<line>        {</line>
<line covered="yes">            throw new IllegalArgumentException(&quot;File &quot; + sourcePath + &quot; is not within the source directory&quot;);</line>
<line>        }</line>
<line/>
<line covered="yes">        int basePathLength = basePath.length() + 1;</line>
<line covered="yes">        return sourcePath.substring(basePathLength).replaceAll(&quot;\\.java\\z&quot;, &quot;.xml&quot;);</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Evaluates the given metric for a package/class with the given set of diagnostics.</line>
<line>     * </line>
<line>     * @param metric the metric name, as defined in report.properties</line>
<line>     * @param diagnostics the diagnostics for the package/class</line>
<line>     * @param linesOfCode the number of lines of code</line>
<line>     * @return the value of the given metric, or -1 on error.</line>
<line>     */</line>
<line>    public static double evaluateMetric(final String metric, final DiagnosticSet diagnostics, final int linesOfCode)</line>
<line>    {</line>
<line covered="no">        Map&lt;String, Object&gt; variables = new HashMap&lt;String, Object&gt;();</line>
<line covered="no">        variables.put(&quot;highCount&quot;, diagnostics.getCountForSeverity(Diagnostic.SEVERITY_HIGH));</line>
<line covered="no">        variables.put(&quot;significantCount&quot;, diagnostics.getCountForSeverity(Diagnostic.SEVERITY_SIGNIFICANT));        </line>
<line covered="no">        variables.put(&quot;moderateCount&quot;, diagnostics.getCountForSeverity(Diagnostic.SEVERITY_MODERATE));</line>
<line covered="no">        variables.put(&quot;lowCount&quot;, diagnostics.getCountForSeverity(Diagnostic.SEVERITY_LOW));</line>
<line covered="no">        variables.put(&quot;infoCount&quot;, diagnostics.getCountForSeverity(Diagnostic.SEVERITY_INFO));</line>
<line covered="no">        variables.put(&quot;linesOfCode&quot;, linesOfCode);</line>
<line/>
<line covered="no">        return evaluateMetric(metric, variables);</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Evaluates the given metric for a package/class with the given set of diagnostics.</line>
<line>     * </line>
<line>     * @param metric the metric name, as defined in report.properties</line>
<line>     * @param summary the summary for the package</line>
<line>     * @return the value of the given metric, or -1 on error.</line>
<line>     */</line>
<line>    public static double evaluateMetric(final String metric, final PackageSummary summary)</line>
<line>    {</line>
<line covered="yes">        Map&lt;String, Object&gt; variables = new HashMap&lt;String, Object&gt;();</line>
<line covered="yes">        variables.put(&quot;highCount&quot;, summary.getHighCount());</line>
<line covered="yes">        variables.put(&quot;significantCount&quot;, summary.getSignificantCount());        </line>
<line covered="yes">        variables.put(&quot;moderateCount&quot;, summary.getModerateCount());</line>
<line covered="yes">        variables.put(&quot;lowCount&quot;, summary.getLowCount());</line>
<line covered="yes">        variables.put(&quot;infoCount&quot;, summary.getInfoCount());</line>
<line covered="yes">        variables.put(&quot;linesOfCode&quot;, summary.getLineCount());</line>
<line/>
<line covered="yes">        return evaluateMetric(metric, variables);</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Evaluates the given metric for a package/class with the given set of diagnostics.</line>
<line>     * This version is used by the other &lt;code&gt;evaluateMetric&lt;/code&gt; methods in this class,</line>
<line>     * which build up the &lt;code&gt;variables&lt;/code&gt; map depending on the data they have.</line>
<line>     * </line>
<line>     * @param metric the metric name, as defined in report.properties.</line>
<line>     * @param variables the map of variables to substitute.</line>
<line>     * @return the value of the given metric, or -1 on error.</line>
<line>     */</line>
<line>    private static double evaluateMetric(final String metric, final Map&lt;String, Object&gt; variables)</line>
<line>    {</line>
<line covered="yes">        String expression = (String) properties.get(&quot;sanity4j.report.metric.&quot; + metric + &quot;.expression&quot;);</line>
<line/>
<line>        try</line>
<line>        {</line>
<line covered="yes">            return Math.max(0.0, new InfixExpression(expression).evaluate(variables));</line>
<line>        }</line>
<line covered="no">        catch (SyntaxException e)</line>
<line>        {</line>
<line covered="no">            QaLogger.getInstance().error(&quot;Syntax exception running: &quot; + expression, e);</line>
<line covered="no">            return -1.0;</line>
<line>        }</line>
<line>    }</line>
<line>}</line>
</source>
<diags first="false">
<diag id="303" sev="3" tool="Findbugs" rule="DMI_HARDCODED_ABSOLUTE_FILENAME">Hard coded reference to an absolute pathname in com.github.sanity4j.report.ReportUtil.&lt;static initializer for ReportUtil&gt;()</diag>
<diag id="541" sev="2" tool="PMD" rule="AssignmentInOperand">
Avoid assignments in operands
</diag>
<diag id="542" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
</diags>
</classDetails>
