<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../xslt/source-code.xsl"?>
<classDetails className="com.github.sanity4j.report.JavaSourceWriter" pathToRoot="../../../../" qaVersion="1.8.0" runDate="Tue May 23 15:28:50 AEST 2017">
<summary high="0" significant="1" moderate="0" low="5" info="3" quality="90"/>
<source>
<line>package com.github.sanity4j.report;</line>
<line/>
<line>import java.io.BufferedReader;</line>
<line>import java.io.File;</line>
<line>import java.io.FileInputStream;</line>
<line>import java.io.IOException;</line>
<line>import java.io.InputStreamReader;</line>
<line>import java.io.Serializable;</line>
<line>import java.util.ArrayList;</line>
<line>import java.util.Collections;</line>
<line>import java.util.Comparator;</line>
<line>import java.util.Date;</line>
<line>import java.util.List;</line>
<line/>
<line>import com.github.sanity4j.model.coverage.ClassCoverage;</line>
<line>import com.github.sanity4j.model.diagnostic.Diagnostic;</line>
<line>import com.github.sanity4j.model.diagnostic.DiagnosticSet;</line>
<line>import com.github.sanity4j.util.ExtractStats;</line>
<line>import com.github.sanity4j.util.FileUtil;</line>
<line>import com.github.sanity4j.util.QaUtil;</line>
<line>import com.github.sanity4j.util.StringUtil;</line>
<line>import com.github.sanity4j.workflow.QAProcessor;</line>
<line/>
<line>/**</line>
<line> * JavaSourceWriter writes out java source.</line>
<line> * </line>
<line> * @author Yiannis Paschalidis</line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line sev="1"><diag id="491"/>public class JavaSourceWriter</line>
<line sev="1">{   </line>
<line sev="1">    /** The diagnostics that we are writing. */</line>
<line sev="1">    private final ExtractStats stats;</line>
<line sev="1"/>
<line sev="1">    /** Whether or not diagnostics should be printed first or last. */</line>
<line sev="1">    private final boolean diagnosticsFirst;</line>
<line sev="1"/>
<line sev="1">    /** The destination directory. */</line>
<line sev="1">    private final File reportDir;</line>
<line sev="1"/>
<line sev="1">    /** One hundred. */</line>
<line sev="1">    private static final double HUNDRED = 100.0;</line>
<line sev="1"/>
<line sev="1">    /** One hundred. */</line>
<line sev="1">    private static final int ONE_HUNDRED = 100;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Creates a JavaSourceWriter.</line>
<line sev="1">     * </line>
<line sev="1">     * @param stats the stats utility containing the results</line>
<line sev="1">     * @param diagnositcsFirst a flag for diagnositcs first</line>
<line sev="1">     * @param reportDir the base directory for the report</line>
<line sev="1">     */</line>
<line sev="1">    public JavaSourceWriter(final ExtractStats stats, final boolean diagnositcsFirst, final File reportDir)</line>
<line sev="1">    {</line>
<line sev="1">        this.stats = stats;</line>
<line sev="1">        this.diagnosticsFirst = diagnositcsFirst;</line>
<line sev="1">        this.reportDir = reportDir;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Annotates the given source file and places the output in the given directory.</line>
<line sev="1">     * </line>
<line sev="1">     * @param sourcePath the path to the source file</line>
<line sev="1">     * @throws IOException if there is an error reading/writing</line>
<line sev="1">     */</line>
<line sev="1">    public void writeSourceFile(final String sourcePath) throws IOException</line>
<line sev="1">    {</line>
<line sev="1">        // Source and destination files</line>
<line sev="1">        File sourceFile = new File(sourcePath);</line>
<line sev="1">        String relativeDestPath = ReportUtil.getRelativeSourcePath(stats.getSourceDirectory(), sourcePath);</line>
<line sev="1">        String pathToRoot = ReportUtil.getHtmlPathToRoot(relativeDestPath);</line>
<line sev="1">        File destFile = new File(reportDir, relativeDestPath);</line>
<line sev="1"/>
<line sev="1">        // Buffer and diagnostics for this source file</line>
<line sev="1">        StringBuffer html = new StringBuffer((int) sourceFile.length());</line>
<line sev="1">        DiagnosticSet diags = stats.getDiagnostics().getDiagnosticsForFile(sourcePath);</line>
<line sev="1">        List&lt;Diagnostic&gt; orderedDiags = sortDiags(diags);</line>
<line sev="1"/>
<line sev="1">        // We always use the enclosing class's name for coverage</line>
<line sev="1">        String className = stats.getClassNameForSourcePath(sourcePath);</line>
<line sev="1">        ClassCoverage coverage = stats.getCoverage().getClassCoverage(className);</line>
<line sev="1"/>
<line sev="1">        int lineCount = stats.getClassLineCount(className);</line>
<line sev="1"/>
<line sev="1">        // Write Header        </line>
<line sev="1"><diag id="495"/>        html.append(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot;);</line>
<line sev="1"><diag id="496"/>        html.append(&quot;&lt;?xml-stylesheet type=\&quot;text/xsl\&quot; href=\&quot;&quot;).append(pathToRoot).append(&quot;xslt/source-code.xsl\&quot;?&gt;\n&quot;);        </line>
<line sev="1">        html.append(&quot;&lt;classDetails className=\&quot;&quot;).append(className).append(&quot;\&quot; pathToRoot=\&quot;&quot;)</line>
<line sev="1">            .append(pathToRoot).append(&quot;\&quot; qaVersion=\&quot;&quot;).append(QAProcessor.QA_VERSION)</line>
<line sev="1"><diag id="497"/>            .append(&quot;\&quot; runDate=\&quot;&quot;).append(new Date()).append(&quot;\&quot;&gt;\n&quot;);</line>
<line sev="1"/>
<line sev="1">        html.append(&quot;&lt;summary high=\&quot;&quot;).append(diags.getCountForSeverity(Diagnostic.SEVERITY_HIGH))</line>
<line sev="1">            .append(&quot;\&quot; significant=\&quot;&quot;).append(diags.getCountForSeverity(Diagnostic.SEVERITY_SIGNIFICANT))</line>
<line sev="1">            .append(&quot;\&quot; moderate=\&quot;&quot;).append(diags.getCountForSeverity(Diagnostic.SEVERITY_MODERATE))</line>
<line sev="1">            .append(&quot;\&quot; low=\&quot;&quot;).append(diags.getCountForSeverity(Diagnostic.SEVERITY_LOW))</line>
<line sev="1">            .append(&quot;\&quot; info=\&quot;&quot;).append(diags.getCountForSeverity(Diagnostic.SEVERITY_INFO));</line>
<line sev="1"/>
<line sev="1">        if (coverage != null)</line>
<line sev="1">        {</line>
<line sev="1">            html.append(&quot;\&quot; lineCoverage=\&quot;&quot;).append((int) (ONE_HUNDRED * coverage.getLineCoverage()))</line>
<line sev="1">                .append(&quot;\&quot; branchCoverage=\&quot;&quot;).append((int) (ONE_HUNDRED * coverage.getBranchCoverage()));</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1">        html.append(&quot;\&quot; quality=\&quot;&quot;).append((int) (ReportUtil.evaluateMetric(&quot;quality&quot;, diags, lineCount) * HUNDRED))</line>
<line sev="1">            .append(&quot;\&quot;/&gt;\n&quot;);</line>
<line sev="1"/>
<line sev="1">        writeSourceLines(sourceFile, diags, orderedDiags, coverage, html);</line>
<line sev="1">        writeErrorsSummary(orderedDiags, diagnosticsFirst, html);</line>
<line sev="1"/>
<line sev="1">        html.append(&quot;&lt;/classDetails&gt;\n&quot;);</line>
<line sev="1"/>
<line sev="1">        // Write to file &quot;com/foo/FooBar.xml&quot;</line>
<line sev="1">        FileUtil.writeToFile(html.toString(), destFile);</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Writes the source code information.</line>
<line sev="1">     * </line>
<line sev="1">     * @param sourceFile the source file</line>
<line sev="1">     * @param diags the set of diagnostics for the file</line>
<line sev="1">     * @param orderedDiags the diagnostics for the file, sorted by line number</line>
<line sev="1">     * @param coverage the coverage statistics for the file</line>
<line sev="1">     * @param html the buffer to write the output to.</line>
<line sev="1">     * </line>
<line sev="1">     * @throws IOException if there is an error reading from the source file</line>
<line sev="1">     */</line>
<line sev="1"><diag id="498"/><diag id="499"/><diag id="500"/>    private void writeSourceLines(final File sourceFile, final DiagnosticSet diags, final List&lt;Diagnostic&gt; orderedDiags, final ClassCoverage coverage, final StringBuffer html) throws IOException</line>
<line sev="1">    {</line>
<line sev="1">        FileInputStream fis = new FileInputStream(sourceFile);</line>
<line sev="1"/>
<line sev="1">        try</line>
<line sev="1">        {</line>
<line sev="3"><diag id="301"/><diag id="302"/>            BufferedReader reader = new BufferedReader(new InputStreamReader(fis));</line>
<line sev="1">            int lineNum = 1;</line>
<line sev="1">            int orderedDiagPos = 0;</line>
<line sev="1"/>
<line sev="1">            html.append(&quot;&lt;source&gt;\n&quot;);</line>
<line sev="1"/>
<line sev="1">            // Output source code, with line numbers + errors</line>
<line sev="1">            for (String line = reader.readLine(); line != null; line = reader.readLine())</line>
<line sev="1">            {</line>
<line sev="1">                // Max severity for this line</line>
<line sev="1">                int maxSev = -1;</line>
<line sev="1"/>
<line sev="1">                for (Diagnostic diagnostic : diags)</line>
<line sev="1">                {</line>
<line sev="1">                    if (diagnostic.getStartLine() &lt;= lineNum &amp;&amp; diagnostic.getEndLine() &gt;= lineNum)</line>
<line sev="1">                    {</line>
<line sev="1">                        maxSev = Math.max(maxSev, diagnostic.getSeverity());</line>
<line sev="1">                    }</line>
<line sev="1">                }</line>
<line sev="1"/>
<line sev="1">                html.append(&quot;&lt;line&quot;);</line>
<line sev="1"/>
<line sev="1">                if (maxSev != -1)</line>
<line sev="1">                {</line>
<line sev="1">                    html.append(&quot; sev=\&quot;&quot;).append(maxSev).append('&quot;');</line>
<line sev="1">                }</line>
<line sev="1"/>
<line sev="1">                if (coverage != null &amp;&amp; coverage.getInvocationsForLine(lineNum) &gt;= 0)</line>
<line sev="1">                {</line>
<line sev="1">                    int invocations = coverage.getInvocationsForLine(lineNum);</line>
<line sev="1">                    double branchCoverage = coverage.getBranchCoverageForLine(lineNum);</line>
<line sev="1"/>
<line sev="1">                    if (invocations == 0)</line>
<line sev="1">                    {</line>
<line sev="1">                        // Not covered at all</line>
<line sev="1">                        html.append(&quot; covered=\&quot;no\&quot;&quot;);</line>
<line sev="1">                    }</line>
<line sev="1">                    else if (branchCoverage == -1.0 || branchCoverage == 1.0)</line>
<line sev="1">                    {</line>
<line sev="1">                        // Not a branch, or branch covered 100%</line>
<line sev="1">                        html.append(&quot; covered=\&quot;yes\&quot;&quot;);</line>
<line sev="1">                    }</line>
<line sev="1">                    else</line>
<line sev="1">                    {</line>
<line sev="1">                        // Partially covered</line>
<line sev="1">                        html.append(&quot; covered=\&quot;partial\&quot;&quot;);</line>
<line sev="1">                    }</line>
<line sev="1">                }</line>
<line sev="1"/>
<line sev="1">                boolean hasContent = false;</line>
<line sev="1"/>
<line sev="1">                for (int i = orderedDiagPos; i &lt; orderedDiags.size(); i++)</line>
<line sev="1">                {</line>
<line sev="1">                    Diagnostic diagnostic = orderedDiags.get(i);</line>
<line sev="1"/>
<line sev="1">                    if (lineNum == diagnostic.getStartLine())</line>
<line sev="1">                    {</line>
<line sev="1">                        if (!hasContent)</line>
<line sev="1">                        {</line>
<line sev="1">                            html.append('&gt;');</line>
<line sev="1">                            hasContent = true;</line>
<line sev="1">                        }</line>
<line sev="1"/>
<line sev="1">                        html.append(&quot;&lt;diag id=\&quot;&quot;).append(diagnostic.getId()).append(&quot;\&quot;/&gt;&quot;);</line>
<line sev="1">                        orderedDiagPos++;</line>
<line sev="1">                    }</line>
<line sev="1">                    else</line>
<line sev="1">                    {</line>
<line sev="1">                        // Since the list is ordered, the next diagnostic won't match either</line>
<line sev="1">                        break;</line>
<line sev="1">                    }</line>
<line sev="1">                }</line>
<line sev="1"/>
<line sev="1">                if (!StringUtil.empty(line))</line>
<line sev="1">                {</line>
<line sev="1">                    if (!hasContent)</line>
<line sev="1">                    {</line>
<line sev="1">                        html.append('&gt;');</line>
<line sev="1">                        hasContent = true;</line>
<line sev="1">                    }</line>
<line sev="1"/>
<line sev="1">                    html.append(ReportUtil.htmlEscape(line));</line>
<line sev="1">                }</line>
<line sev="1"/>
<line sev="1">                html.append(hasContent ? &quot;&lt;/line&gt;\n&quot; : &quot;/&gt;\n&quot;);</line>
<line sev="1">                lineNum++;</line>
<line sev="1">            }</line>
<line sev="1"/>
<line sev="1">            html.append(&quot;&lt;/source&gt;\n&quot;);</line>
<line sev="1">        }</line>
<line sev="1">        finally</line>
<line sev="1">        {</line>
<line sev="1">            QaUtil.safeClose(fis);</line>
<line sev="1">        }</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Writes a diagnostic summary block at the bottom of the source page.</line>
<line sev="1">     * </line>
<line sev="1">     * @param orderedDiags a list of diagnostics for the file, in line number order.</line>
<line sev="1">     * @param diagsFirst a flag indicating whether the diagnostics should be printed first or last.</line>
<line sev="1">     * @param html the buffer to write the HTML output to.</line>
<line sev="1">     */</line>
<line sev="1">    private void writeErrorsSummary(final List&lt;Diagnostic&gt; orderedDiags, </line>
<line sev="1">                                    final boolean diagsFirst,</line>
<line sev="1">                                    final StringBuffer html)</line>
<line sev="1">    {</line>
<line sev="1">        if (orderedDiags != null &amp;&amp; !orderedDiags.isEmpty())</line>
<line sev="1">        {</line>
<line sev="1">            html.append(&quot;&lt;diags first=\&quot;&quot;).append(diagsFirst).append(&quot;\&quot;&gt;\n&quot;);</line>
<line sev="1"/>
<line sev="1">            for (Diagnostic diagnostic : orderedDiags)</line>
<line sev="1">            {</line>
<line sev="1">                html.append(&quot;&lt;diag id=\&quot;&quot;).append(diagnostic.getId())</line>
<line sev="1">                                          .append(&quot;\&quot; sev=\&quot;&quot;).append(diagnostic.getSeverity())</line>
<line sev="1">                                          .append(&quot;\&quot; tool=\&quot;&quot;).append(diagnostic.getSourceDescription())</line>
<line sev="1">                                          .append(&quot;\&quot; rule=\&quot;&quot;).append(diagnostic.getRuleName())</line>
<line sev="1">                                          .append(&quot;\&quot;&gt;&quot;);</line>
<line sev="1"/>
<line sev="1">                html.append(ReportUtil.htmlEscape(diagnostic.getMessage()));</line>
<line sev="1"/>
<line sev="1">                html.append(&quot;&lt;/diag&gt;\n&quot;);</line>
<line sev="1">            }</line>
<line sev="1"/>
<line sev="1">            html.append(&quot;&lt;/diags&gt;\n&quot;);</line>
<line sev="1">        }</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Sorts the diagnostics by starting line number.</line>
<line sev="1">     * </line>
<line sev="1">     * @param diags the diagnostics to sort</line>
<line sev="1">     * @return a list containing the diagnostics, sorted by ascending start line</line>
<line sev="1">     */</line>
<line sev="1">    private List&lt;Diagnostic&gt; sortDiags(final DiagnosticSet diags)</line>
<line sev="1">    {</line>
<line sev="1">        List&lt;Diagnostic&gt; sortedDiags = new ArrayList&lt;Diagnostic&gt;(diags.size());</line>
<line sev="1"/>
<line sev="1">        for (Diagnostic diag : diags)</line>
<line sev="1">        {</line>
<line sev="1">            sortedDiags.add(diag);</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1">        Collections.sort(sortedDiags, new DiagnosticStartLineComparator());</line>
<line sev="1">        return sortedDiags;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * A comparator to sort Diagnostics based on their start line.</line>
<line sev="1">     */</line>
<line sev="1">    private static final class DiagnosticStartLineComparator implements Comparator&lt;Diagnostic&gt;, Serializable </line>
<line sev="1">    {</line>
<line sev="1">        /**</line>
<line sev="1">         * Compares its two arguments for order.  Returns a negative integer,</line>
<line sev="1">         * zero, or a positive integer as the first argument is less than, equal</line>
<line sev="1">         * to, or greater than the second.&lt;p&gt;</line>
<line sev="1">         *</line>
<line sev="1">         * @param diag1 the first object to be compared.</line>
<line sev="1">         * @param diag2 the second object to be compared.</line>
<line sev="1">         * @return a negative integer, zero, or a positive integer as the</line>
<line sev="1">         *         first argument is less than, equal to, or greater than the</line>
<line sev="1">         *         second. </line>
<line sev="1">         */</line>
<line sev="1">        public int compare(final Diagnostic diag1, final Diagnostic diag2)</line>
<line sev="1">        {</line>
<line sev="1">            if (diag1 == null)</line>
<line sev="1">            {</line>
<line sev="1">                return diag2 == null ? 0 : -1;</line>
<line sev="1">            }</line>
<line sev="1"/>
<line sev="1">            return diag1.getStartLine() - diag2.getStartLine();</line>
<line sev="1">        }</line>
<line sev="1">    }</line>
<line sev="1">}</line>
</source>
<diags first="false">
<diag id="491" sev="1" tool="PMD" rule="CyclomaticComplexity">
The class 'JavaSourceWriter' has a Cyclomatic Complexity of 5 (Highest = 17).
</diag>
<diag id="495" sev="1" tool="PMD" rule="ConsecutiveLiteralAppends">
StringBuffer (or StringBuilder).append is called 2 consecutive times with literal Strings. Use a single append with a single combined String.
</diag>
<diag id="496" sev="1" tool="PMD" rule="ConsecutiveLiteralAppends">
StringBuffer (or StringBuilder).append is called 2 consecutive times with literal Strings. Use a single append with a single combined String.
</diag>
<diag id="497" sev="1" tool="PMD" rule="ConsecutiveLiteralAppends">
StringBuffer (or StringBuilder).append is called 2 consecutive times with literal Strings. Use a single append with a single combined String.
</diag>
<diag id="498" sev="0" tool="PMD" rule="ExcessiveMethodLength">
Avoid really long methods.
</diag>
<diag id="499" sev="1" tool="PMD" rule="CyclomaticComplexity">
The method 'writeSourceLines' has a Cyclomatic Complexity of 17.
</diag>
<diag id="500" sev="0" tool="PMD" rule="NPathComplexity">
The method writeSourceLines() has an NPath complexity of 2882
</diag>
<diag id="301" sev="3" tool="Findbugs" rule="DM_DEFAULT_ENCODING">Found reliance on default encoding in com.github.sanity4j.report.JavaSourceWriter.writeSourceLines(File, DiagnosticSet, List, ClassCoverage, StringBuffer): new java.io.InputStreamReader(InputStream)</diag>
<diag id="302" sev="0" tool="Findbugs" rule="OS_OPEN_STREAM">com.github.sanity4j.report.JavaSourceWriter.writeSourceLines(File, DiagnosticSet, List, ClassCoverage, StringBuffer) may fail to close stream</diag>
</diags>
</classDetails>
