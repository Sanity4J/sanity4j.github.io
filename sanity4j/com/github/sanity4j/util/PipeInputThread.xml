<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../xslt/source-code.xsl"?>
<classDetails className="com.github.sanity4j.util.PipeInputThread" pathToRoot="../../../../" qaVersion="1.8.1" runDate="Mon May 29 13:41:29 AEST 2017">
<summary high="0" significant="0" moderate="2" low="0" info="0" lineCoverage="77" branchCoverage="100" quality="87"/>
<source>
<line>package com.github.sanity4j.util;</line>
<line/>
<line>import java.io.IOException;</line>
<line>import java.io.InputStream;</line>
<line>import java.io.OutputStream;</line>
<line/>
<line>/**</line>
<line> * PipeInputThread - A thread to pipe data between an input and output stream.</line>
<line> * </line>
<line> * This is used to e.g. redirect both standard out and standard </line>
<line> * error from a process launched via Runtime.exec(...).</line>
<line> * </line>
<line> * @author Yiannis Paschalidis</line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line>public class PipeInputThread extends Thread</line>
<line>{</line>
<line>    /** The buffer size to use when reading. */</line>
<line>    private static final int BUFFER_SIZE = 4096;</line>
<line/>
<line>    /** The stream to read from. */</line>
<line>    private final InputStream inStream;</line>
<line>    /** The stream to write to. */</line>
<line>    private final OutputStream outStream;</line>
<line>    /** A flag to indicate whether the pipe is still running. */</line>
<line covered="yes">    private boolean running = false;</line>
<line/>
<line>    /**</line>
<line>     * Creates a PipeInputThread.</line>
<line>     * </line>
<line>     * @param inStream the input stream to read from</line>
<line>     * @param outStream the output stream to write to</line>
<line>     */</line>
<line>    public PipeInputThread(final InputStream inStream, final OutputStream outStream)</line>
<line covered="yes">    {</line>
<line covered="yes">        this.inStream = inStream;</line>
<line covered="yes">        this.outStream = outStream;</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * Runs the PipeInputThread.</line>
<line>     */</line>
<line>    public void run()</line>
<line>    {</line>
<line covered="yes">        running = true;</line>
<line covered="yes">        byte[] buf = new byte[BUFFER_SIZE];</line>
<line/>
<line>        try</line>
<line>        {</line>
<line covered="yes">            for (int len = inStream.read(buf); len != -1; len = inStream.read(buf))</line>
<line>            {</line>
<line covered="yes">                outStream.write(buf, 0, len);</line>
<line>            }</line>
<line>        }</line>
<line sev="2" covered="no"><diag id="717"/>        catch (IOException ignored)</line>
<line sev="2">        {</line>
<line sev="2">            // One of the pipes has been closed unexpectedly,</line>
<line sev="2">            // so stop the thread.</line>
<line sev="2">        }</line>
<line>        finally</line>
<line>        {</line>
<line covered="no">            try</line>
<line>            {</line>
<line covered="yes">                outStream.flush();</line>
<line>            }</line>
<line sev="2" covered="no"><diag id="718"/>            catch (IOException ignored)</line>
<line sev="2">            {</line>
<line sev="2">                // don't care </line>
<line sev="2" covered="yes">            }</line>
<line covered="no">        }</line>
<line/>
<line covered="yes">        running = false;</line>
<line covered="yes">    }</line>
<line/>
<line>    /** @return whether the pipe is still running */</line>
<line>    public boolean isRunning()</line>
<line>    {</line>
<line covered="yes">        return running;</line>
<line>    }</line>
<line>}</line>
</source>
<diags first="false">
<diag id="717" sev="2" tool="PMD" rule="EmptyCatchBlock">
Avoid empty catch blocks
</diag>
<diag id="718" sev="2" tool="PMD" rule="EmptyCatchBlock">
Avoid empty catch blocks
</diag>
</diags>
</classDetails>
