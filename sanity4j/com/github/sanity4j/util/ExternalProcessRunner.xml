<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../xslt/source-code.xsl"?>
<classDetails className="com.github.sanity4j.util.ExternalProcessRunner" pathToRoot="../../../../" qaVersion="1.8.2" runDate="Tue Oct 30 11:02:22 AEDT 2018">
<summary high="0" significant="2" moderate="0" low="1" info="0" lineCoverage="62" branchCoverage="50" quality="71"/>
<source>
<line sev="1"><diag id="231"/>package com.github.sanity4j.util; </line>
<line/>
<line>import java.io.OutputStream;</line>
<line/>
<line>import org.apache.commons.lang.SystemUtils;</line>
<line/>
<line>/**</line>
<line> * Runs an external process.</line>
<line> * </line>
<line> * @author Yiannis Paschalidis </line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line>public final class ExternalProcessRunner</line>
<line>{</line>
<line>    /** Sleep time while waiting for piping of process output streams to complete. */ </line>
<line>    private static final int SLEEP_TIME = 500; // 0.5 seconds</line>
<line/>
<line>    /** Number of times to sleep. */</line>
<line>    private static final int SLEEP_COUNT = 10;</line>
<line/>
<line>    /** ExternalProcessRunner should not be instantiated. */</line>
<line>    private ExternalProcessRunner() </line>
<line covered="no">    {        </line>
<line>        // ExternalProcessRunner should not be instantiated.</line>
<line covered="no">    }</line>
<line/>
<line>    /**</line>
<line>     * Runs a process using the given command line,</line>
<line>     * piping stdout/stderr to out/err.</line>
<line>     * </line>
<line>     * @param cmdLine the command line to run</line>
<line>     * @param out where to pipe System.out to</line>
<line>     * @param err where to pipe System.err to</line>
<line>     * </line>
<line>     * @return the return code of the process</line>
<line>     */</line>
<line>    public static int runProcess(final String[] cmdLine, </line>
<line>        final OutputStream out, final OutputStream err)</line>
<line>    {    </line>
<line covered="yes">        StringBuilder cmdLineStr = new StringBuilder();                   </line>
<line/>
<line covered="yes">        for (int i = 0; i &lt; cmdLine.length; i++)</line>
<line>        {</line>
<line covered="partial">            if (cmdLine[i].indexOf(' ') == -1)</line>
<line>            {</line>
<line covered="yes">                cmdLineStr.append(cmdLine[i]);</line>
<line>            }</line>
<line covered="no">            else if (SystemUtils.IS_OS_UNIX)</line>
<line>            {</line>
<line>                // escape any spaces.</line>
<line covered="no">                cmdLineStr.append(cmdLine[i].replace(&quot; &quot;, &quot;\\ &quot;));</line>
<line>            }</line>
<line>            else</line>
<line>            {</line>
<line covered="no">                cmdLineStr.append('&quot;');</line>
<line covered="no">                cmdLineStr.append(cmdLine[i]);</line>
<line covered="no">                cmdLineStr.append('&quot;');</line>
<line>            }</line>
<line/>
<line covered="yes">            cmdLineStr.append(' ');</line>
<line>        }</line>
<line/>
<line covered="yes">        return runProcess(cmdLineStr.toString(), out, err);</line>
<line>    }</line>
<line/>
<line>    /**</line>
<line>     * Runs a process using the given command line,</line>
<line>     * piping stdout/stderr to out/err.</line>
<line>     * </line>
<line>     * @param cmdLine the command line to run</line>
<line>     * @param out where to pipe System.out to</line>
<line>     * @param err where to pipe System.err to</line>
<line>     * </line>
<line>     * @return the return code of the process</line>
<line>     */</line>
<line>    public static int runProcess(final String cmdLine, </line>
<line>        final OutputStream out, final OutputStream err)</line>
<line>    {</line>
<line covered="yes">        QaLogger.getInstance().debug(cmdLine);     </line>
<line/>
<line>        try</line>
<line>        {</line>
<line>            // http://stackoverflow.com/questions/5946471/splitting-at-space-if-not-between-quotes</line>
<line covered="yes">            String[] cmdArray = cmdLine.split(&quot;[ ]+(?=([^\&quot;]*\&quot;[^\&quot;]*\&quot;)*[^\&quot;]*$)&quot;);</line>
<line/>
<line covered="yes">            StringBuilder cmdBuf = new StringBuilder();</line>
<line covered="yes">            for (int index = 0; index &lt; cmdArray.length; index++)</line>
<line>            {</line>
<line covered="partial">                if (SystemUtils.IS_OS_UNIX)</line>
<line>                {</line>
<line>                    // remove quotes.</line>
<line covered="no">                    String cmdItem = cmdArray[index].replace(&quot;\&quot;&quot;, &quot;&quot;);</line>
<line covered="no">                    cmdArray[index] = cmdItem; </line>
<line/>
<line covered="no">                    if (cmdArray[index].contains(&quot; &quot;))</line>
<line>                    {</line>
<line>                        // escape any spaces.</line>
<line covered="no">                        cmdItem = cmdArray[index].replace(&quot; &quot;, &quot;\\ &quot;);</line>
<line covered="no">                        cmdArray[index] = cmdItem;</line>
<line>                    }</line>
<line covered="no">                }</line>
<line>                else</line>
<line>                {</line>
<line covered="partial">                    if (!cmdArray[index].startsWith(&quot;\&quot;&quot;)</line>
<line covered="partial">                        &amp;&amp; !cmdArray[index].endsWith(&quot;\&quot;&quot;)</line>
<line covered="partial">                        &amp;&amp; cmdArray[index].contains(&quot; &quot;))</line>
<line>                    {</line>
<line>                        // add quotes if none already, and only if the param contains a space.</line>
<line covered="no">                        String cmdItem = '&quot;' + cmdArray[index] + '&quot;';</line>
<line covered="no">                        cmdArray[index] = cmdItem;</line>
<line>                    }</line>
<line>                }</line>
<line/>
<line covered="yes">                cmdBuf.append(cmdArray[index]).append(' ');</line>
<line/>
<line covered="yes">                QaLogger.getInstance().debug(&quot;cmdArg[&quot; + index + &quot;]: &quot; + cmdArray[index]);</line>
<line>            }</line>
<line covered="yes">            QaLogger.getInstance().info(cmdBuf.toString());     </line>
<line/>
<line covered="yes">            Process process = Runtime.getRuntime().exec(cmdArray);</line>
<line/>
<line>            // Pipe process output to stdout/stderr</line>
<line covered="yes">            PipeInputThread stdout = new PipeInputThread(process.getInputStream(), out);</line>
<line covered="yes">            PipeInputThread stderr = new PipeInputThread(process.getErrorStream(), err);</line>
<line/>
<line covered="yes">            stdout.start();</line>
<line covered="yes">            stderr.start();</line>
<line/>
<line covered="yes">            int result = process.waitFor();</line>
<line/>
<line>            // Allow some more time for all output to be written</line>
<line covered="partial">            for (int i = 0; i &lt; SLEEP_COUNT &amp;&amp; (stdout.isRunning() || stderr.isRunning()); i++)</line>
<line>            {</line>
<line covered="no">                Thread.sleep(SLEEP_TIME);</line>
<line>            }</line>
<line/>
<line covered="yes">            return result;</line>
<line>        }</line>
<line sev="3" covered="yes"><diag id="310"/><diag id="568"/>        catch (Exception ex)</line>
<line>        {</line>
<line covered="yes">            throw new QAException(&quot;Failed to run external process&quot;, ex);</line>
<line>        }</line>
<line>    }</line>
<line>}</line>
</source>
<diags first="false">
<diag id="231" sev="1" tool="Checkstyle" rule="JavadocPackageCheck">Missing package-info.java file.</diag>
<diag id="310" sev="3" tool="SpotBugs" rule="REC_CATCH_EXCEPTION">Exception is caught when Exception is not thrown in com.github.sanity4j.util.ExternalProcessRunner.runProcess(String, OutputStream, OutputStream)</diag>
<diag id="568" sev="3" tool="PMD" rule="AvoidCatchingGenericException">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</diag>
</diags>
</classDetails>
