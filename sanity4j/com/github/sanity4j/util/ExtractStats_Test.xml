<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../xslt/source-code.xsl"?>
<classDetails className="com.github.sanity4j.util.ExtractStats_Test" pathToRoot="../../../../" qaVersion="1.8.2" runDate="Tue Oct 30 11:02:22 AEDT 2018">
<summary high="0" significant="0" moderate="1" low="4" info="3" lineCoverage="88" branchCoverage="53" quality="96"/>
<source>
<line>package com.github.sanity4j.util;</line>
<line/>
<line>import java.io.File;</line>
<line>import java.io.FileOutputStream;</line>
<line>import java.io.IOException;</line>
<line>import java.util.Stack;</line>
<line>import java.util.zip.ZipEntry;</line>
<line>import java.util.zip.ZipInputStream;</line>
<line/>
<line>import org.junit.Assert;</line>
<line>import org.junit.Before;</line>
<line>import org.junit.BeforeClass;</line>
<line>import org.junit.Test;</line>
<line/>
<line>import com.github.sanity4j.model.coverage.ClassCoverage;</line>
<line>import com.github.sanity4j.model.coverage.Coverage;</line>
<line>import com.github.sanity4j.model.coverage.PackageCoverage;</line>
<line>import com.github.sanity4j.model.diagnostic.Diagnostic;</line>
<line>import com.github.sanity4j.model.diagnostic.DiagnosticSet;</line>
<line>import com.github.sanity4j.model.summary.PackageSummary;</line>
<line>import com.github.sanity4j.workflow.QAConfig;</line>
<line>import com.github.sanity4j.workflow.tool.CheckStyleResultReader;</line>
<line>import com.github.sanity4j.workflow.tool.JaCoCoResultReader;</line>
<line>import com.github.sanity4j.workflow.tool.PmdCpd5ResultReader;</line>
<line>import com.github.sanity4j.workflow.tool.PmdResultReader;</line>
<line>import com.github.sanity4j.workflow.tool.SpotBugsResultReader;</line>
<line/>
<line>/**</line>
<line> * ExtractStats_Test - unit test for {@link ExtractStats}.</line>
<line> *</line>
<line> * @author Yiannis Paschalidis</line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line covered="yes">public class ExtractStats_Test</line>
<line>{</line>
<line>    /** Incorrect classname message. */</line>
<line>    private static final String INCORRECT_CLASSNAME_MSG = &quot;Incorrect class name&quot;;</line>
<line/>
<line>    /** Incorrect rulename message. */</line>
<line>    private static final String INCORRECT_RULENAME_MSG = &quot;Incorrect rule name&quot;;</line>
<line/>
<line>    /** Incorrect message text. */</line>
<line>    private static final String INCORRECT_MESSAGE_TEXT = &quot;Incorrect message text&quot;;</line>
<line/>
<line>    /** No stats extracted message. */</line>
<line>    private static final String NO_STATS_EXTRACTED_MSG = &quot;No stats extracted&quot;;</line>
<line/>
<line>    /** A temporary directory used to hold test data. */</line>
<line>    private QAConfig config;</line>
<line/>
<line>    /** The temporary directory containing the result files. */</line>
<line>    private static File tempDir;</line>
<line/>
<line>    /**</line>
<line>     * Extracts the test project into a temporary directory.</line>
<line>     * This avoid the classes/sources being analysed during a build.</line>
<line>     */</line>
<line>    @BeforeClass</line>
<line>    public static void extractFiles() throws IOException</line>
<line>    {</line>
<line covered="yes">        tempDir = File.createTempFile(&quot;ExtractStats_Test&quot;, &quot;&quot;);</line>
<line covered="yes">        tempDir.delete();</line>
<line covered="yes">        tempDir.mkdirs();</line>
<line covered="yes">        tempDir.deleteOnExit();</line>
<line/>
<line covered="yes">        byte[] buf = new byte[1024];</line>
<line/>
<line covered="yes">        try (ZipInputStream zis = new ZipInputStream(ExtractStats.class.getResourceAsStream(&quot;/test-project.zip&quot;)))</line>
<line>        {</line>
<line sev="1" covered="yes"><diag id="235"/><diag id="236"/>            for (ZipEntry ze = zis.getNextEntry() ; ze != null ; ze = zis.getNextEntry())</line>
<line>            {</line>
<line covered="yes">                String fileName = ze.getName();</line>
<line sev="0" covered="yes"><diag id="583"/>                File newFile = new File(tempDir, fileName);</line>
<line/>
<line>                // We create the dirs individually rather than using mkDirs() so that they are deleted on exit </line>
<line sev="0" covered="yes"><diag id="584"/>                Stack&lt;File&gt; dirsToCreate = new Stack&lt;File&gt;();</line>
<line/>
<line sev="1" covered="partial"><diag id="237"/><diag id="238"/>                for (File parentDir = newFile.getParentFile() ; !parentDir.exists() ; parentDir = parentDir.getParentFile())</line>
<line>                {</line>
<line covered="no">                    dirsToCreate.push(parentDir);</line>
<line>                }</line>
<line/>
<line covered="partial">                while (!dirsToCreate.isEmpty())</line>
<line>                {</line>
<line covered="no">                    File dir = dirsToCreate.pop();</line>
<line/>
<line covered="no">                    if (!dir.mkdir())</line>
<line>                    {</line>
<line covered="no">                        throw new IOException(&quot;Failed to create dir: &quot; + dir);</line>
<line>                    }</line>
<line/>
<line covered="no">                    dir.deleteOnExit();</line>
<line covered="no">                }</line>
<line/>
<line covered="yes">                newFile.deleteOnExit();</line>
<line/>
<line covered="yes">                if (ze.isDirectory())</line>
<line>                {</line>
<line covered="partial">                    if (!newFile.exists() &amp;&amp; !newFile.mkdir())</line>
<line>                    {</line>
<line covered="no">                        throw new IOException(&quot;Failed to create dir: &quot; + newFile);</line>
<line>                    }</line>
<line>                }</line>
<line>                else</line>
<line>                {</line>
<line sev="0" covered="yes"><diag id="585"/>                    try (FileOutputStream fos = new FileOutputStream(newFile))</line>
<line>                    {</line>
<line>                        int len;</line>
<line/>
<line sev="2" covered="yes"><diag id="586"/>                        while ((len = zis.read(buf)) &gt; 0)</line>
<line>                        {</line>
<line covered="yes">                            fos.write(buf, 0, len);</line>
<line>                        }</line>
<line covered="partial">                    }</line>
<line>                }</line>
<line/>
<line covered="yes">                zis.closeEntry();</line>
<line>            }</line>
<line covered="partial">        }</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * Since ExtractStats uses canonical paths, the test files</line>
<line>     * do actually need to exist on the file system. This sets</line>
<line>     * up the files.</line>
<line>     */</line>
<line>    @Before</line>
<line>    public void setUp() throws IOException</line>
<line>    {</line>
<line covered="yes">        config = new QAConfig();</line>
<line covered="yes">        config.setTempDir(tempDir);</line>
<line covered="yes">        config.setCoverageDataFile(new File(tempDir, &quot;jacoco.exec&quot;).getPath());</line>
<line covered="yes">    }</line>
<line/>
<line>    @Test</line>
<line>    public void testExtractCheckStyleStats() throws Exception</line>
<line>    {</line>
<line covered="yes">        ExtractStats stats = new ExtractStats(config.getCombinedSourceDir().getCanonicalPath());</line>
<line covered="yes">        CheckStyleResultReader reader = new CheckStyleResultReader();</line>
<line covered="yes">        reader.setResultFile(config.getToolResultFile(Tool.CHECKSTYLE));</line>
<line covered="yes">        reader.setStats(stats);</line>
<line covered="yes">        reader.run();</line>
<line covered="yes">        Assert.assertFalse(NO_STATS_EXTRACTED_MSG, stats.getDiagnostics().isEmpty());</line>
<line covered="yes">        checkDiagnostics(stats);</line>
<line covered="yes">    }</line>
<line/>
<line>    @Test</line>
<line>    public void testExtractJaCoCoCoverage() throws Exception</line>
<line>    {</line>
<line covered="yes">        ExtractStats stats = new ExtractStats(config.getCombinedSourceDir().getCanonicalPath());</line>
<line/>
<line covered="yes">        JaCoCoResultReader reader = new JaCoCoResultReader();</line>
<line covered="yes">        JaCoCoResultReader.setConfig(config);</line>
<line covered="yes">        reader.setResultFile(config.getToolResultFile(Tool.JACOCO));</line>
<line covered="yes">        reader.setStats(stats);</line>
<line covered="yes">        reader.run();</line>
<line/>
<line covered="yes">        Coverage coverage = stats.getCoverage();</line>
<line covered="yes">        Assert.assertNotNull(&quot;No coverage extracted&quot;, coverage);</line>
<line/>
<line covered="yes">        PackageCoverage packageCoverage = coverage.getPackageCoverage(&quot;packagg&quot;);</line>
<line covered="yes">        Assert.assertEquals(&quot;Incorrect package line coverage extracted&quot;, 0.57, packageCoverage.getLineCoverage(), 0.05);</line>
<line covered="yes">        Assert.assertEquals(&quot;Incorrect package branch coverage extracted&quot;, 0.5, packageCoverage.getBranchCoverage(), 0.0);</line>
<line/>
<line covered="yes">        ClassCoverage classCoverage = packageCoverage.getClassCoverage(&quot;packagg.ClassOne&quot;);</line>
<line covered="yes">        Assert.assertEquals(&quot;Incorrect class line coverage extracted&quot;, 4, classCoverage.getCoveredLineCount(), 0.0);</line>
<line covered="yes">        Assert.assertEquals(&quot;Incorrect class branch coverage extracted&quot;, 0.25, classCoverage.getBranchCoverage(), 0.0);</line>
<line covered="yes">        Assert.assertEquals(&quot;Incorrect class line count extracted&quot;, 7, classCoverage.getLineCount());</line>
<line covered="yes">        Assert.assertEquals(&quot;Incorrect class branch count extracted&quot;, 2, classCoverage.getBranchCount());</line>
<line covered="yes">    }</line>
<line/>
<line>    @Test</line>
<line>    public void testExtractSpotBugsStats() throws Exception</line>
<line>    {</line>
<line covered="yes">        ExtractStats stats = new ExtractStats(config.getCombinedSourceDir().getCanonicalPath());</line>
<line covered="yes">        SpotBugsResultReader reader = new SpotBugsResultReader();</line>
<line covered="yes">        reader.setResultFile(config.getToolResultFile(Tool.SPOTBUGS));</line>
<line covered="yes">        reader.setStats(stats);</line>
<line covered="yes">        reader.run();</line>
<line/>
<line covered="yes">        Assert.assertFalse(NO_STATS_EXTRACTED_MSG, stats.getDiagnostics().isEmpty());</line>
<line covered="yes">        checkDiagnostics(stats);</line>
<line covered="yes">    }</line>
<line/>
<line>    @Test</line>
<line>    public void testExtractPmdCpdStats() throws Exception</line>
<line>    {</line>
<line covered="yes">        ExtractStats stats = new ExtractStats(config.getCombinedSourceDir().getCanonicalPath());</line>
<line covered="yes">        PmdCpd5ResultReader reader = new PmdCpd5ResultReader();</line>
<line covered="yes">        reader.setResultFile(config.getToolResultFile(Tool.PMD_CPD));</line>
<line covered="yes">        reader.setStats(stats);</line>
<line covered="yes">        reader.run();</line>
<line/>
<line covered="yes">        Assert.assertFalse(NO_STATS_EXTRACTED_MSG, stats.getDiagnostics().isEmpty());</line>
<line covered="yes">        checkDiagnostics(stats);</line>
<line covered="yes">    }</line>
<line/>
<line>    @Test</line>
<line>    public void testExtractPmdStats() throws Exception</line>
<line>    {</line>
<line covered="yes">        ExtractStats stats = new ExtractStats(config.getCombinedSourceDir().getCanonicalPath());</line>
<line covered="yes">        PmdResultReader reader = new PmdResultReader();</line>
<line covered="yes">        reader.setResultFile(config.getToolResultFile(Tool.PMD));</line>
<line covered="yes">        reader.setStats(stats);</line>
<line covered="yes">        reader.run();</line>
<line/>
<line covered="yes">        Assert.assertFalse(NO_STATS_EXTRACTED_MSG, stats.getDiagnostics().isEmpty());</line>
<line covered="yes">        checkDiagnostics(stats);</line>
<line covered="yes">    }</line>
<line/>
<line>    /** Checks the diagnostics. */</line>
<line>    private void checkDiagnostics(final ExtractStats stats) throws IOException</line>
<line>    {</line>
<line covered="yes">        stats.extractLineCounts();</line>
<line/>
<line>        // Check summary stats</line>
<line covered="yes">        Assert.assertEquals(&quot;Incorrect number of classes&quot;, 4, stats.getClassCount());</line>
<line covered="yes">        Assert.assertEquals(&quot;Incorrect number of classes for package 'packagg'&quot;,</line>
<line covered="yes">                     1, stats.getPackageClassCount(&quot;packagg&quot;));</line>
<line covered="yes">        Assert.assertEquals(&quot;Incorrect number of classes for package 'packagg.subpackage1'&quot;,</line>
<line covered="yes">                     1, stats.getPackageClassCount(&quot;packagg.subpackage1&quot;));</line>
<line covered="yes">        Assert.assertEquals(&quot;Incorrect number of classes for package 'packagg.subpackage2'&quot;,</line>
<line covered="yes">                     2, stats.getPackageClassCount(&quot;packagg.subpackage2&quot;));</line>
<line/>
<line covered="yes">        PackageSummary[] summary = stats.getRunSummary();</line>
<line covered="yes">        Assert.assertEquals(&quot;Incorrect number of package summaries&quot;, 4, summary.length); // 3, +1 for root package</line>
<line/>
<line>        // Check diagnostic set</line>
<line covered="yes">        DiagnosticSet diags = stats.getDiagnostics();</line>
<line covered="yes">        Assert.assertEquals(&quot;Incorrect number of diagnostics&quot;, 6, diags.size());</line>
<line/>
<line covered="yes">        Assert.assertEquals(&quot;Incorrect diags for package 'packagg'&quot;,</line>
<line covered="yes">                     1, diags.getDiagnosticsForPackage(&quot;packagg&quot;, false).size());</line>
<line covered="yes">        Assert.assertEquals(&quot;Incorrect diags for package 'packagg.subpackage1'&quot;,</line>
<line covered="yes">                     2, diags.getDiagnosticsForPackage(&quot;packagg.subpackage1&quot;, false).size());</line>
<line covered="yes">        Assert.assertEquals(&quot;Incorrect diags for package 'packagg.subpackage2'&quot;,</line>
<line covered="yes">                     3, diags.getDiagnosticsForPackage(&quot;packagg.subpackage2&quot;, false).size());</line>
<line/>
<line>        // Check the individual diagnostics</line>
<line covered="yes">        for (Diagnostic diag : diags)</line>
<line>        {</line>
<line>            // We switch on the start line number, as it's the only thing</line>
<line>            // That all the tools have in common</line>
<line covered="partial">            switch (diag.getStartLine())</line>
<line>            {</line>
<line>                case 11:</line>
<line>                {</line>
<line covered="yes">                   Assert.assertEquals(INCORRECT_CLASSNAME_MSG,</line>
<line covered="yes">                                 &quot;packagg.ClassOne&quot;, diag.getClassName());</line>
<line/>
<line covered="yes">                    break;</line>
<line>                }</line>
<line>                case 22:</line>
<line>                {</line>
<line covered="yes">                   Assert.assertEquals(INCORRECT_CLASSNAME_MSG,</line>
<line covered="yes">                                 &quot;packagg.subpackage1.ClassTwo&quot;, diag.getClassName());</line>
<line covered="yes">                    break;</line>
<line>                }</line>
<line>                case 33:</line>
<line>                {</line>
<line covered="yes">                   Assert.assertEquals(INCORRECT_CLASSNAME_MSG,</line>
<line covered="yes">                                 &quot;packagg.subpackage1.ClassTwo&quot;, diag.getClassName());</line>
<line/>
<line covered="yes">                    break;</line>
<line>                }</line>
<line>                case 44:</line>
<line>                {</line>
<line covered="yes">                   Assert.assertEquals(INCORRECT_CLASSNAME_MSG,</line>
<line covered="yes">                                 &quot;packagg.subpackage2.ClassThree&quot;, diag.getClassName());</line>
<line/>
<line covered="yes">                    break;</line>
<line>                }</line>
<line>                case 55:</line>
<line>                {</line>
<line covered="yes">                   Assert.assertEquals(INCORRECT_CLASSNAME_MSG,</line>
<line covered="yes">                                 &quot;packagg.subpackage2.ClassThree&quot;, diag.getClassName());</line>
<line/>
<line covered="yes">                    break;</line>
<line>                }</line>
<line>                case 66:</line>
<line>                {</line>
<line covered="yes">                   Assert.assertEquals(INCORRECT_CLASSNAME_MSG,</line>
<line covered="yes">                                 &quot;packagg.subpackage2.ClassFour&quot;, diag.getClassName());</line>
<line/>
<line covered="yes">                    break;</line>
<line>                }</line>
<line>                default:</line>
<line>                {</line>
<line covered="no">                   Assert.fail(&quot;Extracted incorrect start line: &quot; + diag.getStartLine());</line>
<line>                }</line>
<line>            }</line>
<line/>
<line covered="yes">            int testNum = diag.getStartLine() / 11;</line>
<line/>
<line covered="yes">            if (diag.getSource() != Diagnostic.SOURCE_PMD_CPD)</line>
<line>            {</line>
<line covered="yes">                Assert.assertEquals(INCORRECT_RULENAME_MSG, &quot;rule&quot; + testNum, diag.getRuleName());</line>
<line/>
<line covered="yes">                Assert.assertEquals(INCORRECT_MESSAGE_TEXT,</line>
<line covered="yes">                             &quot;message text&quot; + testNum, diag.getMessage().trim());</line>
<line>            }</line>
<line covered="yes">        }</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * Rather than using regexps and having to escape the (dynamic)</line>
<line>     * replacement String, this has been shamelessly copied from</line>
<line>     * Apache Ant's StringUtils.</line>
<line>     */</line>
<line>    public static String replace(final String data, final String search, final String replace)</line>
<line>    {</line>
<line covered="no">        StringBuilder buf = new StringBuilder(data.length());</line>
<line covered="no">        int lastPos = 0;</line>
<line/>
<line covered="no">        for (int pos = data.indexOf(search, 0); pos != -1; pos = data.indexOf(search, lastPos))</line>
<line>        {</line>
<line covered="no">            buf.append(data.substring(lastPos, pos)).append(replace);</line>
<line covered="no">            lastPos = pos + search.length();</line>
<line>        }</line>
<line/>
<line covered="no">        buf.append(data.substring(lastPos));</line>
<line covered="no">        return buf.toString();</line>
<line>    }</line>
<line>}</line>
</source>
<diags first="false">
<diag id="235" sev="1" tool="Checkstyle" rule="NoWhitespaceBeforeCheck">';' is preceded with whitespace.</diag>
<diag id="236" sev="1" tool="Checkstyle" rule="NoWhitespaceBeforeCheck">';' is preceded with whitespace.</diag>
<diag id="583" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="584" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="237" sev="1" tool="Checkstyle" rule="NoWhitespaceBeforeCheck">';' is preceded with whitespace.</diag>
<diag id="238" sev="1" tool="Checkstyle" rule="NoWhitespaceBeforeCheck">';' is preceded with whitespace.</diag>
<diag id="585" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="586" sev="2" tool="PMD" rule="AssignmentInOperand">
Avoid assignments in operands
</diag>
</diags>
</classDetails>
