<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../xslt/source-code.xsl"?>
<classDetails className="com.github.sanity4j.util.QaLoggerSystemOutImpl" pathToRoot="../../../../" qaVersion="1.8.0" runDate="Tue May 23 15:28:50 AEST 2017">
<summary high="0" significant="0" moderate="0" low="0" info="0" lineCoverage="47" branchCoverage="0" quality="100"/>
<source>
<line>package com.github.sanity4j.util; </line>
<line/>
<line>import java.io.PrintStream;</line>
<line/>
<line>/**</line>
<line> * This logger implementation just uses System.out / System.err</line>
<line> * to print message for running from a command-line, within eclipse etc. </line>
<line> * </line>
<line> * @author Yiannis Paschalidis </line>
<line> * @since Sanity4J 1.0</line>
<line> */</line>
<line>public class QaLoggerSystemOutImpl extends QaLogger</line>
<line>{</line>
<line>    /** Hide the constructor - instances must be obtained using getInstance. */</line>
<line>    protected QaLoggerSystemOutImpl()</line>
<line covered="yes">    {</line>
<line>    	// Hide the constructor - instances must be obtained using getInstance.</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * Write a message to the log with the log level of MSG_DEBUG .</line>
<line>     * @param message The text to log. Should not be &lt;code&gt;null&lt;/code&gt;.</line>
<line>     */</line>
<line>    public void debug(final String message)</line>
<line>    {</line>
<line covered="yes">        log(message, System.out);</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * Write a message to the log with the log level of MSG_DEBUG .</line>
<line>     * @param message The text to log. Should not be &lt;code&gt;null&lt;/code&gt;.</line>
<line>     * @param throwable the throwable, presumably caught in a catch block.</line>
<line>     */</line>
<line>    public void debug(final String message, final Throwable throwable)</line>
<line>    {</line>
<line covered="no">        String messageWithStrackTrace = stackTraceToString(message, throwable);        </line>
<line covered="no">        log(messageWithStrackTrace, System.out);</line>
<line covered="no">    }</line>
<line/>
<line>    /**</line>
<line>     * Write a message to the log with the log level of MSG_INFO .</line>
<line>     * @param message The text to log. Should not be &lt;code&gt;null&lt;/code&gt;.</line>
<line>     */</line>
<line>    public void info(final String message)</line>
<line>    {</line>
<line covered="yes">        log(message, System.out);</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * Write a message to the log with the log level of MSG_WARN .</line>
<line>     * @param message The text to log. Should not be &lt;code&gt;null&lt;/code&gt;.</line>
<line>     */</line>
<line>    public void warn(final String message)</line>
<line>    {</line>
<line covered="yes">        log(message, System.out);</line>
<line covered="yes">    }</line>
<line/>
<line>    /**</line>
<line>     * Write a message to the log with the log level of MSG_WARN .</line>
<line>     * @param message The text to log. Should not be &lt;code&gt;null&lt;/code&gt;.</line>
<line>     * @param throwable the throwable, presumably caught in a catch block.</line>
<line>     */</line>
<line>    public void warn(final String message, final Throwable throwable)</line>
<line>    {</line>
<line covered="no">        String messageWithStrackTrace = stackTraceToString(message, throwable);        </line>
<line covered="no">        log(messageWithStrackTrace, System.out);</line>
<line covered="no">    }</line>
<line/>
<line>    /**</line>
<line>     * Write a message to the log with the log level of MSG_ERR .</line>
<line>     * @param message The text to log. Should not be &lt;code&gt;null&lt;/code&gt;.</line>
<line>     */</line>
<line>    public void error(final String message)</line>
<line>    {</line>
<line covered="no">        log(message, System.err);</line>
<line covered="no">    }</line>
<line/>
<line>    /**</line>
<line>     * Write a message to the log with the log level of MSG_ERR .</line>
<line>     * @param message The text to log. Should not be &lt;code&gt;null&lt;/code&gt;.</line>
<line>     * @param throwable the throwable, presumably caught in a catch block.</line>
<line>     */</line>
<line>    public void error(final String message, final Throwable throwable)</line>
<line>    {</line>
<line covered="no">        String messageWithStrackTrace = stackTraceToString(message, throwable);        </line>
<line covered="no">        log(messageWithStrackTrace, System.err);</line>
<line covered="no">    }</line>
<line/>
<line>    /**</line>
<line>     * Logs a message to the underlying output stream.</line>
<line>     * @param message the message to log</line>
<line>     * @param stream the stream to write to</line>
<line>     */</line>
<line>    private void log(final String message, final PrintStream stream)</line>
<line>    {</line>
<line covered="yes">        stream.println(message);</line>
<line covered="yes">    }</line>
<line>}</line>
</source>
</classDetails>
