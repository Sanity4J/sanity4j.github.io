<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../../xslt/source-code.xsl"?>
<classDetails className="com.github.sanity4j.util.math.InfixExpression" pathToRoot="../../../../../" qaVersion="1.8.1" runDate="Mon May 29 13:41:29 AEST 2017">
<summary high="0" significant="1" moderate="0" low="6" info="2" lineCoverage="77" branchCoverage="72" quality="84"/>
<source>
<line sev="1"><diag id="271"/>package com.github.sanity4j.util.math;</line>
<line/>
<line>import java.util.ArrayList;</line>
<line>import java.util.List;</line>
<line>import java.util.Map;</line>
<line/>
<line>/**</line>
<line> * Infix expression evaluator - evaluates infix expressions like &quot;(12.34-(2+3.3)*4/3)^2&quot;</line>
<line> * Variables can be used, prefix them with a '#'. The infix expression is parsed and </line>
<line> * processed in postfix form.</line>
<line> *</line>
<line> * @version 1.0 02/01/2008</line>
<line> * @author Yiannis Paschalidis</line>
<line> */</line>
<line sev="1"><diag id="770"/>public final class InfixExpression</line>
<line sev="1">{</line>
<line sev="1">    /** The transformed postfix expression which is used in evaluation. */</line>
<line sev="1">    private final PostfixExpression postFix;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Creates an InfixExpression with the given expression.</line>
<line sev="1">     * </line>
<line sev="1">     * @param expression the expression to parse.</line>
<line sev="1">     * @throws SyntaxException if the expression is syntactically invalid.</line>
<line sev="1">     */</line>
<line sev="1">    public InfixExpression(final String expression) throws SyntaxException</line>
<line sev="1" covered="yes">    {</line>
<line sev="1" covered="yes">        postFix = new PostfixExpression(parseInfixToPostfix(expression));</line>
<line sev="1" covered="yes">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Evaluates this infix expression.</line>
<line sev="1">     * </line>
<line sev="1">     * @return the result of the expression</line>
<line sev="1">     * </line>
<line sev="1">     * @throws SyntaxException Thrown if a problem occurs.</line>
<line sev="1">     */</line>
<line sev="1">    public double evaluate() throws SyntaxException</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return postFix.evaluate();</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Evaluates this infix expression.</line>
<line sev="1">     * </line>
<line sev="1">     * @param values - values for the variables</line>
<line sev="1">     * @return the result of the expression</line>
<line sev="1">     * </line>
<line sev="1">     * @throws SyntaxException Thrown if a problem occurs.</line>
<line sev="1">     */</line>
<line sev="1">    public double evaluate(final Map&lt;String, Object&gt; values) throws SyntaxException</line>
<line sev="1">    {</line>
<line sev="1" covered="yes">        return postFix.evaluate(values);</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /** </line>
<line sev="1">     * Convenience method to see if an operator belongs to a certain set of operators.</line>
<line sev="1">     * </line>
<line sev="1">     * @param operator the operator to search for</line>
<line sev="1">     * @param operators the operators to check</line>
<line sev="1">     * @return true if &lt;code&gt;operators&lt;/code&gt; contains &lt;code&gt;operator&lt;/code&gt;, false if not.</line>
<line sev="1">     */</line>
<line sev="1">    private static boolean charIn(final char operator, final String operators)</line>
<line sev="1">    {</line>
<line sev="1" covered="yes"><diag id="772"/>        return (operators.indexOf(operator) != -1);</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Evaluate an infix expression by first parsing it to postfix form, then evaluating the postfix.</line>
<line sev="1">     * </line>
<line sev="1">     * @param expression - the string to evaluate</line>
<line sev="1">     * @return the evaluated expression</line>
<line sev="1">     * </line>
<line sev="1">     * @throws SyntaxException Thrown if a problem occurs.</line>
<line sev="1">     */</line>
<line sev="1">    public static double evaluateInfix(final String expression) throws SyntaxException</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return PostfixExpression.evaluatePostfix(parseInfixToPostfix(expression));</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Parse an infix expression.</line>
<line sev="1">     * </line>
<line sev="1">     * @param inval - the infix expression to be parsed</line>
<line sev="1">     * @return a String array containing numbers &amp;amp; operands as strings, in postfix evaluation order</line>
<line sev="1">     * </line>
<line sev="1">     * @throws SyntaxException Thrown if a problem occurs.</line>
<line sev="1">     */</line>
<line sev="1"><diag id="773"/><diag id="774"/>    public static String[] parseInfixToPostfix(final String inval) throws SyntaxException</line>
<line sev="1">    {</line>
<line sev="1" covered="yes">        StringBuffer opString = new StringBuffer();</line>
<line sev="1" covered="yes">        char ltr = ' ';</line>
<line sev="1" covered="yes">        List&lt;String&gt; postfixOp = new ArrayList&lt;String&gt;();</line>
<line sev="1" covered="yes">        boolean unary = true; // determines whether operand is unary - used for -ve</line>
<line sev="1"/>
<line sev="1">        try</line>
<line sev="1">        {</line>
<line sev="1" covered="yes">            for (int i = 0; i &lt; inval.length(); i++)</line>
<line sev="1">            {</line>
<line sev="1" covered="yes">                ltr = inval.charAt(i);</line>
<line sev="1"/>
<line sev="1" covered="partial">                switch (ltr)</line>
<line sev="1">                {</line>
<line sev="1">                    case ' ':</line>
<line sev="1">                    case '\t':</line>
<line sev="1">                    case '\r':</line>
<line sev="1">                    case '\n':</line>
<line sev="1" covered="yes">                        continue;</line>
<line sev="1"/>
<line sev="1">                    case '(':</line>
<line sev="1" covered="yes">                        opString.append('(');</line>
<line sev="1" covered="yes">                        break;</line>
<line sev="1"/>
<line sev="1">                    case ')':</line>
<line sev="1" covered="partial"><diag id="775"/><diag id="776"/>                        while ((opString.length() &gt; 0) &amp;&amp; (opString.charAt(opString.length() - 1) != '('))</line>
<line sev="1">                        {</line>
<line sev="1" covered="yes">                            postfixOp.add(opString.substring(opString.length() - 1));</line>
<line sev="1" covered="yes">                            opString.setLength(opString.length() - 1);</line>
<line sev="1">                        }</line>
<line sev="1" covered="yes">                        opString.setLength(opString.length() - 1);</line>
<line sev="1" covered="yes">                        break;</line>
<line sev="1"/>
<line sev="1">                    case '^':</line>
<line sev="1" covered="no">                        while (opString.length() &gt; 0 &amp;&amp; charIn(opString.charAt(opString.length() - 1), &quot;^~&quot;))</line>
<line sev="1">                        // while (opString.length()&gt;0 &amp;&amp; opString.charAt(opString.length()-1)=='^')</line>
<line sev="1">                        {</line>
<line sev="1" covered="no">                            postfixOp.add(opString.substring(opString.length() - 1));</line>
<line sev="1" covered="no">                            opString.setLength(opString.length() - 1);</line>
<line sev="1">                        }</line>
<line sev="1" covered="no">                        opString.append('^');</line>
<line sev="1" covered="no">                        unary = true;</line>
<line sev="1" covered="no">                        break;</line>
<line sev="1"/>
<line sev="1">                    case '*':</line>
<line sev="1">                    case '/':</line>
<line sev="1" covered="partial">                        while (opString.length() &gt; 0 &amp;&amp; charIn(opString.charAt(opString.length() - 1), &quot;^*/~&quot;))</line>
<line sev="1">                        {</line>
<line sev="1" covered="no">                            postfixOp.add(opString.substring(opString.length() - 1));</line>
<line sev="1" covered="no">                            opString.setLength(opString.length() - 1);</line>
<line sev="1">                        }</line>
<line sev="1" covered="yes">                        opString.append(ltr);</line>
<line sev="1" covered="yes">                        unary = true;</line>
<line sev="1" covered="yes">                        break;</line>
<line sev="1"/>
<line sev="1">                    case '-':</line>
<line sev="1" covered="partial">                        if (unary)</line>
<line sev="1">                        {</line>
<line sev="1" covered="no">                            opString.append('~'); // use tilda to show unary minus</line>
<line sev="1" covered="no">                            break;</line>
<line sev="1">                        }</line>
<line sev="1"/>
<line sev="1">                    case '+':</line>
<line sev="1"/>
<line sev="1" covered="yes">                        while (opString.length() &gt; 0 &amp;&amp; charIn(opString.charAt(opString.length() - 1), &quot;^*/+-~&quot;))</line>
<line sev="1">                        {</line>
<line sev="1" covered="yes">                            postfixOp.add(opString.substring(opString.length() - 1));</line>
<line sev="1" covered="yes">                            opString.setLength(opString.length() - 1);</line>
<line sev="1">                        }</line>
<line sev="1"/>
<line sev="1" covered="yes">                        opString.append(ltr);</line>
<line sev="1" covered="yes">                        unary = true;</line>
<line sev="1" covered="yes">                        break;</line>
<line sev="1"/>
<line sev="1">                    default: // is number/text</line>
<line sev="1"/>
<line sev="1" covered="yes"><diag id="777"/>                        StringBuffer numString = new StringBuffer();</line>
<line sev="1" covered="yes">                        numString.append(ltr);</line>
<line sev="1"/>
<line sev="1" covered="partial">                        while (i + 1 &lt; inval.length())</line>
<line sev="1">                        {</line>
<line sev="1" covered="yes">                            ltr = inval.charAt(i + 1);</line>
<line sev="1"/>
<line sev="1" covered="yes">                            if (charIn(ltr, &quot;+-*/()^&quot;))</line>
<line sev="1">                            {</line>
<line sev="1" covered="yes">                                break;</line>
<line sev="1">                            }</line>
<line sev="1">                            else</line>
<line sev="1">                            {</line>
<line sev="1" covered="partial">                                if (ltr != ' ' &amp;&amp; ltr != ',')</line>
<line sev="1">                                {</line>
<line sev="1" covered="yes">                                    numString.append(ltr);</line>
<line sev="1">                                }</line>
<line sev="1"/>
<line sev="1" covered="yes">                                i++;</line>
<line sev="1">                            }</line>
<line sev="1">                        }</line>
<line sev="1"/>
<line sev="1" covered="yes">                        postfixOp.add(numString.toString());</line>
<line sev="1" covered="yes">                        unary = false;</line>
<line sev="1"/>
<line sev="1">                        break;</line>
<line sev="1">                }</line>
<line sev="1">            }</line>
<line sev="1"/>
<line sev="1" covered="yes">            while (opString.length() &gt; 0)</line>
<line sev="1">            {</line>
<line sev="1" covered="yes">                postfixOp.add(opString.substring(opString.length() - 1));</line>
<line sev="1" covered="yes">                opString.setLength(opString.length() - 1);</line>
<line sev="1">            }</line>
<line sev="1"/>
<line sev="1" covered="yes">            String[] result = postfixOp.toArray(new String[postfixOp.size()]);</line>
<line sev="1"/>
<line sev="1" covered="yes">            return result;</line>
<line sev="1">        }</line>
<line sev="3" covered="no"><diag id="778"/>        catch (Exception e)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            throw new SyntaxException(&quot;Error parsing expression: &quot; + e.getMessage(), e);</line>
<line sev="1">        }</line>
<line sev="1">    }</line>
<line sev="1">}</line>
</source>
<diags first="false">
<diag id="271" sev="1" tool="Checkstyle" rule="JavadocPackageCheck">Missing package-info.java file.</diag>
<diag id="770" sev="1" tool="PMD" rule="CyclomaticComplexity">
The class 'InfixExpression' has a Cyclomatic Complexity of 5 (Highest = 24).
</diag>
<diag id="772" sev="1" tool="PMD" rule="UselessParentheses">
Useless parentheses.
</diag>
<diag id="773" sev="0" tool="PMD" rule="ExcessiveMethodLength">
Avoid really long methods.
</diag>
<diag id="774" sev="1" tool="PMD" rule="CyclomaticComplexity">
The method 'parseInfixToPostfix' has a Cyclomatic Complexity of 24.
</diag>
<diag id="775" sev="1" tool="PMD" rule="UselessParentheses">
Useless parentheses.
</diag>
<diag id="776" sev="1" tool="PMD" rule="UselessParentheses">
Useless parentheses.
</diag>
<diag id="777" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="778" sev="3" tool="PMD" rule="AvoidCatchingGenericException">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</diag>
</diags>
</classDetails>
