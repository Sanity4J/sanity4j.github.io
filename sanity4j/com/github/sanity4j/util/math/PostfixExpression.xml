<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../../xslt/source-code.xsl"?>
<classDetails className="com.github.sanity4j.util.math.PostfixExpression" pathToRoot="../../../../../" qaVersion="1.8.1" runDate="Mon May 29 13:41:29 AEST 2017">
<summary high="0" significant="1" moderate="1" low="6" info="2" lineCoverage="74" branchCoverage="78" quality="80"/>
<source>
<line>package com.github.sanity4j.util.math;</line>
<line/>
<line>import java.util.Map;</line>
<line/>
<line>/**</line>
<line> * PostFixExpression - evaluates postfix expressions like [1, 2, +]. Variables can be used, prefix them with a '#'.</line>
<line> * </line>
<line> * @version 1.0 02/01/2008</line>
<line> * @author Yiannis Paschalidis</line>
<line> */</line>
<line sev="1"><diag id="779"/>public class PostfixExpression</line>
<line sev="1">{</line>
<line sev="1">    /** The string array containing operators &amp;amp; operands as strings, in postfix evaluation order. */</line>
<line sev="1">    private final String[] terms;</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Evaluates a postfix expression.</line>
<line sev="1">     * </line>
<line sev="1">     * @param terms - a String array containing operators &amp;amp; operands as strings, in postfix evaluation order.</line>
<line sev="1">     * @return the result of the expression.</line>
<line sev="1">     * </line>
<line sev="1">     * @throws SyntaxException Thrown if a problem occurs.</line>
<line sev="1">     */</line>
<line sev="1"><diag id="781"/><diag id="782"/>    public static double evaluatePostfix(final String[] terms) throws SyntaxException</line>
<line sev="1">    {</line>
<line sev="1">        // an instance of the Stack class is an overkill, we can just get away using an array</line>
<line sev="1" covered="yes">        double[] stack = new double[terms.length]; // worst-case</line>
<line sev="1" covered="yes">        int stackIndex = 0;</line>
<line sev="1"/>
<line sev="1" covered="yes">        double result = 0.0;</line>
<line sev="2"><diag id="783"/>        double operand1, operand2;</line>
<line sev="1"/>
<line sev="1">        try</line>
<line sev="1">        {</line>
<line sev="1" covered="yes">            for (int i = 0; i &lt; terms.length; i++)</line>
<line sev="1">            {</line>
<line sev="1" covered="yes">                String temp = terms[i];</line>
<line sev="1"/>
<line sev="1" covered="yes"><diag id="784"/>                if (temp.length() == 1)</line>
<line sev="1">                {</line>
<line sev="1" covered="partial">                    switch (temp.charAt(0))</line>
<line sev="1">                    {</line>
<line sev="1">                        case '+': // Addition</line>
<line sev="1" covered="yes">                            operand1 = stack[--stackIndex];</line>
<line sev="1" covered="yes">                            operand2 = stack[--stackIndex];</line>
<line sev="1" covered="yes">                            stack[stackIndex++] = operand1 + operand2;</line>
<line sev="1" covered="yes">                            break;</line>
<line sev="1"/>
<line sev="1">                        case '-': // Subtraction\</line>
<line sev="1" covered="yes">                            operand1 = stack[--stackIndex];</line>
<line sev="1" covered="yes">                            operand2 = stack[--stackIndex];</line>
<line sev="1" covered="yes">                            stack[stackIndex++] = operand2 - operand1;</line>
<line sev="1" covered="yes">                            break;</line>
<line sev="1"/>
<line sev="1">                        case '*': // Multiplication</line>
<line sev="1" covered="yes">                            operand1 = stack[--stackIndex];</line>
<line sev="1" covered="yes">                            operand2 = stack[--stackIndex];</line>
<line sev="1" covered="yes">                            stack[stackIndex++] = operand1 * operand2;</line>
<line sev="1" covered="yes">                            break;</line>
<line sev="1"/>
<line sev="1">                        case '/': // Division</line>
<line sev="1" covered="yes">                            operand1 = stack[--stackIndex];</line>
<line sev="1" covered="yes">                            operand2 = stack[--stackIndex];</line>
<line sev="1" covered="yes">                            stack[stackIndex++] = operand2 / operand1;</line>
<line sev="1" covered="yes">                            break;</line>
<line sev="1"/>
<line sev="1">                        case '^': // Power operator</line>
<line sev="1" covered="no">                            operand1 = stack[--stackIndex];</line>
<line sev="1" covered="no">                            operand2 = stack[--stackIndex];</line>
<line sev="1" covered="no">                            stack[stackIndex++] = Math.pow(operand2, operand1);</line>
<line sev="1" covered="no">                            break;</line>
<line sev="1"/>
<line sev="1">                        case '~': // Unary minus</line>
<line sev="1" covered="no">                            stack[stackIndex - 1] = -stack[stackIndex - 1];</line>
<line sev="1" covered="no">                            break;</line>
<line sev="1"/>
<line sev="1">                        default: // is 1 digit number</line>
<line sev="1" covered="yes"><diag id="785"/>                            stack[stackIndex++] = new Double(temp).doubleValue();</line>
<line sev="1">                    }</line>
<line sev="1">                }</line>
<line sev="1">                else</line>
<line sev="1">                {</line>
<line sev="1">                    // is multiple-digit number</line>
<line sev="1" covered="yes"><diag id="786"/>                    stack[stackIndex++] = new Double(temp).doubleValue();</line>
<line sev="1">                }</line>
<line sev="1">            }</line>
<line sev="1"/>
<line sev="1">            // The result should now be the only element on the stack.</line>
<line sev="1" covered="yes">            result = stack[--stackIndex];</line>
<line sev="1">        }</line>
<line sev="1" covered="no">        catch (ArrayIndexOutOfBoundsException ex)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            throw new SyntaxException(&quot;Stack underflow&quot;, ex);</line>
<line sev="1">        }</line>
<line sev="1" covered="no">        catch (NumberFormatException ex)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            throw new SyntaxException(&quot;Number format exception / Illegal operator&quot;, ex);</line>
<line sev="1">        }</line>
<line sev="3" covered="no"><diag id="787"/>        catch (Exception ex)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            throw new SyntaxException(&quot;Unknown error during evaluation: &quot; + ex.getMessage(), ex);</line>
<line sev="1" covered="yes">        }</line>
<line sev="1"/>
<line sev="1" covered="partial">        if (stackIndex != 0)</line>
<line sev="1">        {</line>
<line sev="1" covered="no">            throw new SyntaxException(&quot;Expression incomplete&quot;);</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1" covered="yes">        return result;</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Evaluates a postfix expression.</line>
<line sev="1">     * </line>
<line sev="1">     * @param terms - a String array containing operators &amp;amp; operands as strings, in postfix evaluation order. It can also</line>
<line sev="1">     *            contain variables (string keys prefixed by a hash sign &quot;#&quot;)</line>
<line sev="1">     * @param values - values for the variables</line>
<line sev="1">     * @return the result of the expression</line>
<line sev="1">     * </line>
<line sev="1">     * @throws SyntaxException Thrown if a problem occurs.</line>
<line sev="1">     */</line>
<line sev="1">    public static double evaluatePostfixWithVariables(final String[] terms, final Map&lt;String, Object&gt;values) throws SyntaxException</line>
<line sev="1">    {</line>
<line sev="1" covered="yes">        String[] newOp = new String[terms.length];</line>
<line sev="1"/>
<line sev="1">        // Create a new expression by replacing variables with their values</line>
<line sev="1"/>
<line sev="1" covered="yes">        for (int i = 0; i &lt; terms.length; i++)</line>
<line sev="1">        {</line>
<line sev="1" covered="yes"><diag id="788"/>            if (terms[i].charAt(0) == '#')</line>
<line sev="1">            {</line>
<line sev="1" covered="yes">                String key = terms[i].substring(1);</line>
<line sev="1" covered="yes">                Object value = values.get(key);</line>
<line sev="1"/>
<line sev="1" covered="partial">                if (value == null)</line>
<line sev="1">                {</line>
<line sev="1" covered="no">                    throw new SyntaxException(&quot;Bad variable id: &quot; + key);</line>
<line sev="1">                }</line>
<line sev="1"/>
<line sev="1" covered="yes">                newOp[i] = value.toString();</line>
<line sev="1" covered="yes">            }</line>
<line sev="1">            else</line>
<line sev="1">            {</line>
<line sev="1" covered="yes">                newOp[i] = terms[i];</line>
<line sev="1">            }</line>
<line sev="1">        }</line>
<line sev="1"/>
<line sev="1">        // Now evaluate the new expression</line>
<line sev="1" covered="yes">        return evaluatePostfix(newOp);</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Creates a postfix expression.</line>
<line sev="1">     * </line>
<line sev="1">     * @param terms - a String array containing operators &amp;amp; operands as strings, in postfix evaluation order</line>
<line sev="1">     */</line>
<line sev="1"><diag id="789"/>    public PostfixExpression(final String[] terms)</line>
<line sev="1" covered="yes">    {</line>
<line sev="1" covered="yes">        this.terms = new String[terms.length];</line>
<line sev="1" covered="yes">        System.arraycopy(terms, 0, this.terms, 0, terms.length);</line>
<line sev="1" covered="yes">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Evaluates this postfix expression.</line>
<line sev="1">     * </line>
<line sev="1">     * @return the result of the expression</line>
<line sev="1">     * </line>
<line sev="1">     * @throws SyntaxException Thrown if a problem occurs.</line>
<line sev="1">     */</line>
<line sev="1">    public double evaluate() throws SyntaxException</line>
<line sev="1">    {</line>
<line sev="1" covered="no">        return evaluatePostfix(terms);</line>
<line sev="1">    }</line>
<line sev="1"/>
<line sev="1">    /**</line>
<line sev="1">     * Evaluates this postfix expression.</line>
<line sev="1">     * </line>
<line sev="1">     * @param values - values for the variables</line>
<line sev="1">     * @return the result of the expression</line>
<line sev="1">     * </line>
<line sev="1">     * @throws SyntaxException Thrown if a problem occurs.</line>
<line sev="1">     */</line>
<line sev="1">    public double evaluate(final Map&lt;String, Object&gt; values) throws SyntaxException</line>
<line sev="1">    {</line>
<line sev="1" covered="yes">        return evaluatePostfixWithVariables(terms, values);</line>
<line sev="1">    }</line>
<line sev="1">}</line>
</source>
<diags first="false">
<diag id="779" sev="1" tool="PMD" rule="CyclomaticComplexity">
The class 'PostfixExpression' has a Cyclomatic Complexity of 4 (Highest = 13).
</diag>
<diag id="781" sev="1" tool="PMD" rule="UseVarargs">
Consider using varargs for methods or constructors which take an array the last parameter.
</diag>
<diag id="782" sev="1" tool="PMD" rule="CyclomaticComplexity">
The method 'evaluatePostfix' has a Cyclomatic Complexity of 13.
</diag>
<diag id="783" sev="2" tool="PMD" rule="OneDeclarationPerLine">
Use one line for each declaration, it enhances code readability.
</diag>
<diag id="784" sev="1" tool="PMD" rule="AvoidLiteralsInIfCondition">
Avoid using Literals in Conditional Statements
</diag>
<diag id="785" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="786" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">
Avoid instantiating new objects inside loops
</diag>
<diag id="787" sev="3" tool="PMD" rule="AvoidCatchingGenericException">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</diag>
<diag id="788" sev="1" tool="PMD" rule="AvoidLiteralsInIfCondition">
Avoid using Literals in Conditional Statements
</diag>
<diag id="789" sev="1" tool="PMD" rule="UseVarargs">
Consider using varargs for methods or constructors which take an array the last parameter.
</diag>
</diags>
</classDetails>
