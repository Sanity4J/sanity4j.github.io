<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="xslt/package-frame.xsl"?>
<export qaVersion="1.8.2" runDate="Tue Oct 30 11:02:21 AEDT 2018">
<package name="" classes="89" lineCount="17425" high="0" significant="27" moderate="20" low="170" info="117" quality="94">
<testCoverage lineCoveragePct="67" branchCoveragePct="66" lineCount="3839" coveredLineCount="2589" branchCount="390" coveredBranchCount="259"/>
<package name="com.github.sanity4j" classes="1" lineCount="57" high="0" significant="0" moderate="0" low="1" info="0" quality="96">
<class name="Sanity4J_Suite" lineCount="57" high="0" significant="0" moderate="0" low="1" info="0" quality="96">
<diag id="229" sev="1" tool="Checkstyle" rule="JavadocPackageCheck">Missing package-info.java file.</diag>
</class>
<package name="com.github.sanity4j.maven.plugin" classes="2" lineCount="1570" high="0" significant="6" moderate="1" low="19" info="27" quality="89">
<class name="Coordinate" lineCount="298" high="0" significant="0" moderate="0" low="9" info="0" quality="93">
<diag id="2" sev="1" tool="Checkstyle" rule="JavadocPackageCheck">Missing package-info.java file.</diag>
<diag id="327" sev="1" tool="PMD" rule="ConstructorCallsOverridableMethod">Overridable method 'parse' called during object construction</diag>
<diag id="328" sev="1" tool="PMD" rule="ConstructorCallsOverridableMethod">Overridable method 'setGroupId' called during object construction</diag>
<diag id="329" sev="1" tool="PMD" rule="ConstructorCallsOverridableMethod">Overridable method 'setArtifactId' called during object construction</diag>
<diag id="330" sev="1" tool="PMD" rule="ConstructorCallsOverridableMethod">Overridable method 'setVersion' called during object construction</diag>
<diag id="331" sev="1" tool="PMD" rule="ConstructorCallsOverridableMethod">Overridable method 'setPackaging' called during object construction</diag>
<diag id="332" sev="1" tool="PMD" rule="ConstructorCallsOverridableMethod">Overridable method 'setClassifier' called during object construction</diag>
<diag id="333" sev="1" tool="PMD" rule="ConstructorCallsOverridableMethod">Overridable method 'setScope' called during object construction</diag>
<diag id="334" sev="1" tool="PMD" rule="FieldDeclarationsShouldBeAtStartOfClass">Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.</diag>
</class>
<class name="RunQAMojo" lineCount="1272" high="0" significant="6" moderate="1" low="10" info="27" quality="88">
<diag id="10" sev="1" tool="Checkstyle" rule="MethodLengthCheck">Method length is 278 lines (max allowed is 150).</diag>
<diag id="11" sev="1" tool="Checkstyle" rule="HiddenFieldCheck">'project' hides a field.</diag>
<diag id="12" sev="1" tool="Checkstyle" rule="HiddenFieldCheck">'project' hides a field.</diag>
<diag id="293" sev="3" tool="SpotBugs" rule="DM_DEFAULT_ENCODING">Found reliance on default encoding in com.github.sanity4j.maven.plugin.RunQAMojo.writeTextFile(File, String): new java.io.FileWriter(File)</diag>
<diag id="294" sev="0" tool="SpotBugs" rule="EI_EXPOSE_REP">com.github.sanity4j.maven.plugin.RunQAMojo.getClasses() may expose internal representation by returning RunQAMojo.classes</diag>
<diag id="295" sev="0" tool="SpotBugs" rule="EI_EXPOSE_REP">com.github.sanity4j.maven.plugin.RunQAMojo.getLibraries() may expose internal representation by returning RunQAMojo.libraries</diag>
<diag id="296" sev="0" tool="SpotBugs" rule="EI_EXPOSE_REP">com.github.sanity4j.maven.plugin.RunQAMojo.getSources() may expose internal representation by returning RunQAMojo.sources</diag>
<diag id="297" sev="0" tool="SpotBugs" rule="EI_EXPOSE_REP">com.github.sanity4j.maven.plugin.RunQAMojo.getTestClasses() may expose internal representation by returning RunQAMojo.testClasses</diag>
<diag id="298" sev="0" tool="SpotBugs" rule="EI_EXPOSE_REP">com.github.sanity4j.maven.plugin.RunQAMojo.getTestSources() may expose internal representation by returning RunQAMojo.testSources</diag>
<diag id="299" sev="0" tool="SpotBugs" rule="NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE">Possible null pointer dereference in com.github.sanity4j.maven.plugin.RunQAMojo.checkForSource(File) due to return value of called method</diag>
<diag id="335" sev="0" tool="PMD" rule="ExcessiveImports">A high number of imports can indicate a high degree of coupling within an object.</diag>
<diag id="336" sev="2" tool="PMD" rule="GodClass">Possible God class (WMC=118, ATFD=45, TCC=0.0016326530612244899)</diag>
<diag id="337" sev="0" tool="PMD" rule="ExcessiveClassLength">Avoid really long classes.</diag>
<diag id="338" sev="1" tool="PMD" rule="CyclomaticComplexity">The class 'RunQAMojo' has a Cyclomatic Complexity of 2 (Highest = 46).</diag>
<diag id="339" sev="0" tool="PMD" rule="TooManyFields">Too many fields</diag>
<diag id="340" sev="0" tool="PMD" rule="TooManyMethods">This class has too many methods, consider refactoring it.</diag>
<diag id="375" sev="0" tool="PMD" rule="ExcessiveMethodLength">Avoid really long methods.</diag>
<diag id="376" sev="1" tool="PMD" rule="CyclomaticComplexity">The method 'executeReport' has a Cyclomatic Complexity of 46.</diag>
<diag id="377" sev="0" tool="PMD" rule="NcssMethodCount">The method executeReport() has an NCSS line count of 142</diag>
<diag id="378" sev="0" tool="PMD" rule="NPathComplexity">The method executeReport() has an NPath complexity of 22819104</diag>
<diag id="379" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="380" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="381" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="382" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="383" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="384" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="385" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="386" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="387" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="388" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="389" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="390" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="391" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="392" sev="3" tool="PMD" rule="AvoidCatchingGenericException">Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block</diag>
<diag id="393" sev="3" tool="PMD" rule="AvoidCatchingGenericException">Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block</diag>
<diag id="394" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="396" sev="3" tool="PMD" rule="AvoidCatchingGenericException">Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block</diag>
<diag id="397" sev="3" tool="PMD" rule="AvoidCatchingGenericException">Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block</diag>
<diag id="398" sev="3" tool="PMD" rule="AvoidCatchingGenericException">Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block</diag>
<diag id="400" sev="1" tool="PMD" rule="MethodReturnsInternalArray">Returning 'sources' may expose an internal array.</diag>
<diag id="401" sev="1" tool="PMD" rule="MethodReturnsInternalArray">Returning 'testSources' may expose an internal array.</diag>
<diag id="402" sev="1" tool="PMD" rule="MethodReturnsInternalArray">Returning 'classes' may expose an internal array.</diag>
<diag id="403" sev="1" tool="PMD" rule="MethodReturnsInternalArray">Returning 'testClasses' may expose an internal array.</diag>
<diag id="404" sev="1" tool="PMD" rule="MethodReturnsInternalArray">Returning 'libraries' may expose an internal array.</diag>
</class>
</package>
<package name="com.github.sanity4j.util" classes="21" lineCount="3538" high="0" significant="8" moderate="9" low="25" info="18" quality="92">
<testCoverage lineCoveragePct="61" branchCoveragePct="57" lineCount="984" coveredLineCount="602" branchCount="162" coveredBranchCount="93"/>
<class name="ExternalProcessRunner" lineCount="145" high="0" significant="2" moderate="0" low="1" info="0" quality="71">
<testCoverage lineCoveragePct="62" branchCoveragePct="50" lineCount="43" coveredLineCount="27" branchCount="10" coveredBranchCount="8"/>
<diag id="231" sev="1" tool="Checkstyle" rule="JavadocPackageCheck">Missing package-info.java file.</diag>
<diag id="310" sev="3" tool="SpotBugs" rule="REC_CATCH_EXCEPTION">Exception is caught when Exception is not thrown in com.github.sanity4j.util.ExternalProcessRunner.runProcess(String, OutputStream, OutputStream)</diag>
<diag id="568" sev="3" tool="PMD" rule="AvoidCatchingGenericException">Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block</diag>
</class>
<class name="ExternalProcessRunner_Test" lineCount="52" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
<testCoverage lineCoveragePct="82" branchCoveragePct="50" lineCount="17" coveredLineCount="14" branchCount="1" coveredBranchCount="1"/>
</class>
<class name="ExtractStats" lineCount="494" high="0" significant="0" moderate="1" low="5" info="5" quality="96">
<testCoverage lineCoveragePct="88" branchCoveragePct="65" lineCount="154" coveredLineCount="136" branchCount="31" coveredBranchCount="27"/>
<diag id="311" sev="0" tool="SpotBugs" rule="EI_EXPOSE_REP">com.github.sanity4j.util.ExtractStats.getRunSummary() may expose internal representation by returning ExtractStats.currentRunSummary</diag>
<diag id="312" sev="0" tool="SpotBugs" rule="NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE">Possible null pointer dereference in com.github.sanity4j.util.ExtractStats.extractLineCounts(File) due to return value of called method</diag>
<diag id="313" sev="0" tool="SpotBugs" rule="WMI_WRONG_MAP_ITERATOR">com.github.sanity4j.util.ExtractStats.summariseCurrentRun() makes inefficient use of keySet iterator instead of entrySet iterator</diag>
<diag id="569" sev="2" tool="PMD" rule="GodClass">Possible God class (WMC=52, ATFD=52, TCC=0.026143790849673203)</diag>
<diag id="575" sev="1" tool="PMD" rule="AvoidLiteralsInIfCondition">Avoid using Literals in Conditional Statements</diag>
<diag id="576" sev="1" tool="PMD" rule="MethodReturnsInternalArray">Returning 'currentRunSummary' may expose an internal array.</diag>
<diag id="577" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="578" sev="1" tool="PMD" rule="UselessParentheses">Useless parentheses.</diag>
<diag id="579" sev="1" tool="PMD" rule="UselessParentheses">Useless parentheses.</diag>
<diag id="580" sev="1" tool="PMD" rule="UseVarargs">Consider using varargs for methods or constructors which take an array the last parameter.</diag>
<diag id="581" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
</class>
<class name="ExtractStats_Test" lineCount="325" high="0" significant="0" moderate="1" low="4" info="3" quality="96">
<testCoverage lineCoveragePct="88" branchCoveragePct="53" lineCount="136" coveredLineCount="121" branchCount="13" coveredBranchCount="11"/>
<diag id="235" sev="1" tool="Checkstyle" rule="NoWhitespaceBeforeCheck">';' is preceded with whitespace.</diag>
<diag id="236" sev="1" tool="Checkstyle" rule="NoWhitespaceBeforeCheck">';' is preceded with whitespace.</diag>
<diag id="237" sev="1" tool="Checkstyle" rule="NoWhitespaceBeforeCheck">';' is preceded with whitespace.</diag>
<diag id="238" sev="1" tool="Checkstyle" rule="NoWhitespaceBeforeCheck">';' is preceded with whitespace.</diag>
<diag id="583" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="584" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="585" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="586" sev="2" tool="PMD" rule="AssignmentInOperand">Avoid assignments in operands</diag>
</class>
<class name="FileUtil" lineCount="238" high="0" significant="0" moderate="0" low="0" info="1" quality="100">
<testCoverage lineCoveragePct="31" branchCoveragePct="34" lineCount="70" coveredLineCount="22" branchCount="18" coveredBranchCount="9"/>
<diag id="314" sev="0" tool="SpotBugs" rule="NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE">Possible null pointer dereference in com.github.sanity4j.util.FileUtil.delete(File) due to return value of called method</diag>
</class>
<class name="FileUtil_Test" lineCount="90" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
<testCoverage lineCoveragePct="100" branchCoveragePct="25" lineCount="37" coveredLineCount="37" branchCount="1" coveredBranchCount="1"/>
</class>
<class name="JaxbMarshaller" lineCount="175" high="0" significant="3" moderate="0" low="0" info="0" quality="65">
<testCoverage lineCoveragePct="28" branchCoveragePct="8" lineCount="52" coveredLineCount="15" branchCount="6" coveredBranchCount="1"/>
<diag id="588" sev="3" tool="PMD" rule="AvoidCatchingGenericException">Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block</diag>
<diag id="590" sev="3" tool="PMD" rule="CompareObjectsWithEquals">Use equals() to compare object references.</diag>
<diag id="591" sev="3" tool="PMD" rule="AvoidCatchingGenericException">Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block</diag>
</class>
<class name="JaxbMarshaller_Test" lineCount="126" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
<testCoverage lineCoveragePct="83" branchCoveragePct="83" lineCount="43" coveredLineCount="36" branchCount="3" coveredBranchCount="3"/>
</class>
<class name="PipeInputThread" lineCount="81" high="0" significant="0" moderate="2" low="0" info="0" quality="87">
<testCoverage lineCoveragePct="77" branchCoveragePct="100" lineCount="18" coveredLineCount="14" branchCount="1" coveredBranchCount="1"/>
<diag id="597" sev="2" tool="PMD" rule="EmptyCatchBlock">Avoid empty catch blocks</diag>
<diag id="598" sev="2" tool="PMD" rule="EmptyCatchBlock">Avoid empty catch blocks</diag>
</class>
<class name="PipeInputThread_Test" lineCount="63" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
<testCoverage lineCoveragePct="83" branchCoveragePct="50" lineCount="18" coveredLineCount="15" branchCount="2" coveredBranchCount="2"/>
</class>
<class name="QAException" lineCount="42" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
<testCoverage lineCoveragePct="33" branchCoveragePct="0" lineCount="6" coveredLineCount="2" branchCount="0" coveredBranchCount="0"/>
</class>
<class name="QaLogger" lineCount="104" high="0" significant="0" moderate="0" low="1" info="0" quality="98">
<testCoverage lineCoveragePct="20" branchCoveragePct="0" lineCount="15" coveredLineCount="3" branchCount="0" coveredBranchCount="0"/>
<diag id="599" sev="1" tool="PMD" rule="AbstractNaming">Abstract classes should be named AbstractXXX</diag>
</class>
<class name="QaLoggerAntImpl" lineCount="99" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
</class>
<class name="QaLoggerMavenImpl" lineCount="97" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
</class>
<class name="QaLoggerSystemOutImpl" lineCount="99" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
<testCoverage lineCoveragePct="47" branchCoveragePct="0" lineCount="21" coveredLineCount="10" branchCount="0" coveredBranchCount="0"/>
</class>
<class name="QaUtil" lineCount="756" high="0" significant="3" moderate="5" low="13" info="7" quality="85">
<testCoverage lineCoveragePct="20" branchCoveragePct="7" lineCount="232" coveredLineCount="47" branchCount="53" coveredBranchCount="9"/>
<diag id="316" sev="2" tool="SpotBugs" rule="RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE">Redundant nullcheck of inStream, which is known to be non-null in com.github.sanity4j.util.QaUtil.extractResource(QAConfig, String, String)</diag>
<diag id="317" sev="2" tool="SpotBugs" rule="RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE">Redundant nullcheck of inStream, which is known to be non-null in com.github.sanity4j.util.QaUtil.extractResource(QAConfig, String, String)</diag>
<diag id="318" sev="3" tool="SpotBugs" rule="REC_CATCH_EXCEPTION">Exception is caught when Exception is not thrown in com.github.sanity4j.util.QaUtil.extractResource(QAConfig, String, String)</diag>
<diag id="602" sev="2" tool="PMD" rule="GodClass">Possible God class (WMC=91, ATFD=29, TCC=0.06666666666666667)</diag>
<diag id="603" sev="1" tool="PMD" rule="CyclomaticComplexity">The class 'QaUtil' has a Cyclomatic Complexity of 5 (Highest = 21).</diag>
<diag id="604" sev="1" tool="PMD" rule="FieldDeclarationsShouldBeAtStartOfClass">Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.</diag>
<diag id="605" sev="1" tool="PMD" rule="FieldDeclarationsShouldBeAtStartOfClass">Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.</diag>
<diag id="606" sev="2" tool="PMD" rule="AssignmentInOperand">Avoid assignments in operands</diag>
<diag id="607" sev="1" tool="PMD" rule="SimplifyStartsWith">This call to String.startsWith can be rewritten using String.charAt(0)</diag>
<diag id="608" sev="1" tool="PMD" rule="ConfusingTernary">Avoid if (x != y) ..; else ..;</diag>
<diag id="609" sev="1" tool="PMD" rule="ConfusingTernary">Avoid if (x != y) ..; else ..;</diag>
<diag id="610" sev="1" tool="PMD" rule="CyclomaticComplexity">The method 'getPackageForSourceFile' has a Cyclomatic Complexity of 20.</diag>
<diag id="611" sev="1" tool="PMD" rule="AvoidLiteralsInIfCondition">Avoid using Literals in Conditional Statements</diag>
<diag id="612" sev="3" tool="PMD" rule="AvoidCatchingGenericException">Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block</diag>
<diag id="613" sev="1" tool="PMD" rule="FieldDeclarationsShouldBeAtStartOfClass">Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.</diag>
<diag id="614" sev="1" tool="PMD" rule="CyclomaticComplexity">The method 'replaceTokens' has a Cyclomatic Complexity of 13.</diag>
<diag id="615" sev="0" tool="PMD" rule="NPathComplexity">The method replaceTokens() has an NPath complexity of 360</diag>
<diag id="616" sev="1" tool="PMD" rule="PrematureDeclaration">Avoid declaring a variable if it is unreferenced before a possible exit point.</diag>
<diag id="617" sev="1" tool="PMD" rule="ConfusingTernary">Avoid if (x != y) ..; else ..;</diag>
<diag id="618" sev="0" tool="PMD" rule="ExcessiveMethodLength">Avoid really long methods.</diag>
<diag id="619" sev="1" tool="PMD" rule="CyclomaticComplexity">The method 'extractResource' has a Cyclomatic Complexity of 21.</diag>
<diag id="620" sev="0" tool="PMD" rule="NPathComplexity">The method extractResource() has an NPath complexity of 3121</diag>
<diag id="623" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="624" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="625" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="626" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="627" sev="3" tool="PMD" rule="AvoidCatchingGenericException">Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block</diag>
<diag id="628" sev="2" tool="PMD" rule="EmptyCatchBlock">Avoid empty catch blocks</diag>
</class>
<class name="RegexpReplaceInputStream" lineCount="291" high="0" significant="0" moderate="0" low="0" info="2" quality="100">
<testCoverage lineCoveragePct="84" branchCoveragePct="66" lineCount="63" coveredLineCount="53" branchCount="16" coveredBranchCount="15"/>
<diag id="641" sev="0" tool="PMD" rule="AvoidDeeplyNestedIfStmts">Deeply nested if..then statements are hard to read</diag>
<diag id="642" sev="0" tool="PMD" rule="AvoidDeeplyNestedIfStmts">Deeply nested if..then statements are hard to read</diag>
</class>
<class name="StartElementListener" lineCount="29" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
</class>
<class name="StringUtil" lineCount="69" high="0" significant="0" moderate="0" low="1" info="0" quality="97">
<testCoverage lineCoveragePct="85" branchCoveragePct="100" lineCount="14" coveredLineCount="12" branchCount="5" coveredBranchCount="5"/>
<diag id="643" sev="1" tool="PMD" rule="AvoidLiteralsInIfCondition">Avoid using Literals in Conditional Statements</diag>
</class>
<class name="StringUtil_Test" lineCount="62" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
<testCoverage lineCoveragePct="100" branchCoveragePct="0" lineCount="25" coveredLineCount="25" branchCount="0" coveredBranchCount="0"/>
</class>
<class name="Tool" lineCount="101" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
<testCoverage lineCoveragePct="65" branchCoveragePct="0" lineCount="20" coveredLineCount="13" branchCount="2" coveredBranchCount="0"/>
</class>
<package name="com.github.sanity4j.util.math" classes="3" lineCount="431" high="0" significant="2" moderate="1" low="9" info="4" quality="85">
<testCoverage lineCoveragePct="75" branchCoveragePct="94" lineCount="120" coveredLineCount="91" branchCount="19" coveredBranchCount="18"/>
<class name="InfixExpression" lineCount="211" high="0" significant="1" moderate="0" low="3" info="2" quality="87">
<testCoverage lineCoveragePct="77" branchCoveragePct="72" lineCount="61" coveredLineCount="47" branchCount="12" coveredBranchCount="11"/>
<diag id="278" sev="1" tool="Checkstyle" rule="JavadocPackageCheck">Missing package-info.java file.</diag>
<diag id="644" sev="1" tool="PMD" rule="CyclomaticComplexity">The class 'InfixExpression' has a Cyclomatic Complexity of 5 (Highest = 24).</diag>
<diag id="646" sev="0" tool="PMD" rule="ExcessiveMethodLength">Avoid really long methods.</diag>
<diag id="647" sev="1" tool="PMD" rule="CyclomaticComplexity">The method 'parseInfixToPostfix' has a Cyclomatic Complexity of 24.</diag>
<diag id="648" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="649" sev="3" tool="PMD" rule="AvoidCatchingGenericException">Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block</diag>
</class>
<class name="PostfixExpression" lineCount="188" high="0" significant="1" moderate="1" low="6" info="2" quality="80">
<testCoverage lineCoveragePct="74" branchCoveragePct="78" lineCount="59" coveredLineCount="44" branchCount="7" coveredBranchCount="7"/>
<diag id="650" sev="1" tool="PMD" rule="CyclomaticComplexity">The class 'PostfixExpression' has a Cyclomatic Complexity of 4 (Highest = 13).</diag>
<diag id="652" sev="1" tool="PMD" rule="UseVarargs">Consider using varargs for methods or constructors which take an array the last parameter.</diag>
<diag id="653" sev="1" tool="PMD" rule="CyclomaticComplexity">The method 'evaluatePostfix' has a Cyclomatic Complexity of 13.</diag>
<diag id="654" sev="2" tool="PMD" rule="OneDeclarationPerLine">Use one line for each declaration, it enhances code readability.</diag>
<diag id="655" sev="1" tool="PMD" rule="AvoidLiteralsInIfCondition">Avoid using Literals in Conditional Statements</diag>
<diag id="656" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="657" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="658" sev="3" tool="PMD" rule="AvoidCatchingGenericException">Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block</diag>
<diag id="659" sev="1" tool="PMD" rule="AvoidLiteralsInIfCondition">Avoid using Literals in Conditional Statements</diag>
<diag id="660" sev="1" tool="PMD" rule="UseVarargs">Consider using varargs for methods or constructors which take an array the last parameter.</diag>
</class>
<class name="SyntaxException" lineCount="32" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
</class>
</package>
</package>
<package name="com.github.sanity4j.ant.taskdef" classes="1" lineCount="368" high="0" significant="0" moderate="0" low="1" info="0" quality="99">
<class name="RunQA" lineCount="368" high="0" significant="0" moderate="0" low="1" info="0" quality="99">
<diag id="1" sev="1" tool="Checkstyle" rule="JavadocPackageCheck">Missing package-info.java file.</diag>
</class>
</package>
<package name="com.github.sanity4j.model.summary" classes="4" lineCount="701" high="0" significant="0" moderate="0" low="1" info="3" quality="99">
<testCoverage lineCoveragePct="94" branchCoveragePct="100" lineCount="239" coveredLineCount="225" branchCount="7" coveredBranchCount="7"/>
<class name="PackageSummary" lineCount="203" high="0" significant="0" moderate="0" low="1" info="2" quality="99">
<testCoverage lineCoveragePct="100" branchCoveragePct="0" lineCount="31" coveredLineCount="31" branchCount="0" coveredBranchCount="0"/>
<diag id="151" sev="1" tool="Checkstyle" rule="JavadocPackageCheck">Missing package-info.java file.</diag>
<diag id="301" sev="0" tool="SpotBugs" rule="EI_EXPOSE_REP">com.github.sanity4j.model.summary.PackageSummary.getRunDate() may expose internal representation by returning PackageSummary.runDate</diag>
<diag id="302" sev="0" tool="SpotBugs" rule="EI_EXPOSE_REP2">com.github.sanity4j.model.summary.PackageSummary.setRunDate(Date) may expose internal representation by storing an externally mutable object into PackageSummary.runDate</diag>
</class>
<class name="PackageSummary_Test" lineCount="116" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
<testCoverage lineCoveragePct="100" branchCoveragePct="0" lineCount="51" coveredLineCount="51" branchCount="0" coveredBranchCount="0"/>
</class>
<class name="SummaryCsvMarshaller" lineCount="200" high="0" significant="0" moderate="0" low="0" info="1" quality="100">
<testCoverage lineCoveragePct="82" branchCoveragePct="85" lineCount="78" coveredLineCount="64" branchCount="6" coveredBranchCount="6"/>
<diag id="433" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
</class>
<class name="SummaryCsvMarshaller_Test" lineCount="182" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
<testCoverage lineCoveragePct="100" branchCoveragePct="100" lineCount="79" coveredLineCount="79" branchCount="1" coveredBranchCount="1"/>
</class>
</package>
<package name="com.github.sanity4j.workflow" classes="11" lineCount="2015" high="0" significant="2" moderate="2" low="19" info="10" quality="95">
<testCoverage lineCoveragePct="12" branchCoveragePct="9" lineCount="247" coveredLineCount="30" branchCount="41" coveredBranchCount="4"/>
<class name="AbstractFileCollector" lineCount="204" high="0" significant="0" moderate="0" low="3" info="5" quality="97">
<diag id="283" sev="1" tool="Checkstyle" rule="JavadocPackageCheck">Missing package-info.java file.</diag>
<diag id="284" sev="1" tool="Checkstyle" rule="HiddenFieldCheck">'destDir' hides a field.</diag>
<diag id="285" sev="1" tool="Checkstyle" rule="HiddenFieldCheck">'destDir' hides a field.</diag>
<diag id="319" sev="0" tool="SpotBugs" rule="NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE">Possible null pointer dereference in com.github.sanity4j.workflow.AbstractFileCollector.copyFiles(List, File) due to return value of called method</diag>
<diag id="664" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="665" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="666" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="667" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
</class>
<class name="ClassFileCollector" lineCount="105" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
</class>
<class name="FileCopier" lineCount="55" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
</class>
<class name="LibraryFileCollector" lineCount="98" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
</class>
<class name="QAConfig" lineCount="1013" high="0" significant="2" moderate="2" low="13" info="3" quality="92">
<testCoverage lineCoveragePct="12" branchCoveragePct="6" lineCount="247" coveredLineCount="30" branchCount="41" coveredBranchCount="4"/>
<diag id="286" sev="1" tool="Checkstyle" rule="HiddenFieldCheck">'toolConfig' hides a field.</diag>
<diag id="287" sev="1" tool="Checkstyle" rule="HiddenFieldCheck">'toolConfig' hides a field.</diag>
<diag id="288" sev="1" tool="Checkstyle" rule="HiddenFieldCheck">'toolConfig' hides a field.</diag>
<diag id="320" sev="3" tool="SpotBugs" rule="DMI_HARDCODED_ABSOLUTE_FILENAME">Hard coded reference to an absolute pathname in new com.github.sanity4j.workflow.QAConfig()</diag>
<diag id="321" sev="3" tool="SpotBugs" rule="DMI_HARDCODED_ABSOLUTE_FILENAME">Hard coded reference to an absolute pathname in com.github.sanity4j.workflow.QAConfig.setExternalPropertiesPath(String, String)</diag>
<diag id="670" sev="2" tool="PMD" rule="GodClass">Possible God class (WMC=106, ATFD=39, TCC=0.023182957393483708)</diag>
<diag id="671" sev="0" tool="PMD" rule="ExcessivePublicCount">This class has a bunch of public methods and attributes</diag>
<diag id="672" sev="1" tool="PMD" rule="CyclomaticComplexity">The class 'QAConfig' has a Cyclomatic Complexity of 2 (Highest = 11).</diag>
<diag id="673" sev="0" tool="PMD" rule="TooManyFields">Too many fields</diag>
<diag id="679" sev="1" tool="PMD" rule="AvoidLiteralsInIfCondition">Avoid using Literals in Conditional Statements</diag>
<diag id="680" sev="1" tool="PMD" rule="AvoidLiteralsInIfCondition">Avoid using Literals in Conditional Statements</diag>
<diag id="681" sev="2" tool="PMD" rule="AssignmentInOperand">Avoid assignments in operands</diag>
<diag id="682" sev="1" tool="PMD" rule="BooleanGetMethodName">A getX() method which returns a boolean should be named isX()</diag>
<diag id="683" sev="1" tool="PMD" rule="CyclomaticComplexity">The method 'getToolVersion' has a Cyclomatic Complexity of 11.</diag>
<diag id="684" sev="1" tool="PMD" rule="ConfusingTernary">Avoid if (x != y) ..; else ..;</diag>
<diag id="685" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="686" sev="1" tool="PMD" rule="ConfusingTernary">Avoid if (x != y) ..; else ..;</diag>
<diag id="687" sev="1" tool="PMD" rule="ConfusingTernary">Avoid if (x != y) ..; else ..;</diag>
<diag id="688" sev="1" tool="PMD" rule="ConfusingTernary">Avoid if (x != y) ..; else ..;</diag>
<diag id="689" sev="1" tool="PMD" rule="ConfusingTernary">Avoid if (x != y) ..; else ..;</diag>
</class>
<class name="QAProcessor" lineCount="226" high="0" significant="0" moderate="0" low="1" info="2" quality="99">
<diag id="289" sev="1" tool="Checkstyle" rule="HiddenFieldCheck">'stats' hides a field.</diag>
<diag id="691" sev="0" tool="PMD" rule="AccessorMethodGeneration">Avoid autogenerated methods to access private fields and methods of inner / outer classes</diag>
<diag id="692" sev="0" tool="PMD" rule="AccessorMethodGeneration">Avoid autogenerated methods to access private fields and methods of inner / outer classes</diag>
</class>
<class name="ReportProducer" lineCount="71" high="0" significant="0" moderate="0" low="1" info="0" quality="97">
<diag id="695" sev="1" tool="PMD" rule="PrematureDeclaration">Avoid declaring a variable if it is unreferenced before a possible exit point.</diag>
</class>
<class name="SourceFileCollector" lineCount="63" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
</class>
<class name="SummariseRun" lineCount="84" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
</class>
<class name="WorkUnit" lineCount="16" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
</class>
<class name="WorkUnitGroup" lineCount="80" high="0" significant="0" moderate="0" low="1" info="0" quality="97">
<diag id="699" sev="1" tool="PMD" rule="UnusedFormalParameter">Avoid unused constructor parameters such as 'allowConcurrent'.</diag>
</class>
<package name="com.github.sanity4j.workflow.tool" classes="15" lineCount="2005" high="0" significant="5" moderate="2" low="11" info="11" quality="93">
<testCoverage lineCoveragePct="81" branchCoveragePct="97" lineCount="315" coveredLineCount="258" branchCount="39" coveredBranchCount="38"/>
<class name="AbstractToolRunner" lineCount="235" high="0" significant="0" moderate="0" low="4" info="0" quality="96">
<diag id="290" sev="1" tool="Checkstyle" rule="JavadocPackageCheck">Missing package-info.java file.</diag>
<diag id="702" sev="1" tool="PMD" rule="ConfusingTernary">Avoid if (x != y) ..; else ..;</diag>
<diag id="703" sev="1" tool="PMD" rule="PrematureDeclaration">Avoid declaring a variable if it is unreferenced before a possible exit point.</diag>
<diag id="704" sev="1" tool="PMD" rule="PrematureDeclaration">Avoid declaring a variable if it is unreferenced before a possible exit point.</diag>
</class>
<class name="CheckStyleResultReader" lineCount="136" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
<testCoverage lineCoveragePct="80" branchCoveragePct="66" lineCount="41" coveredLineCount="33" branchCount="6" coveredBranchCount="5"/>
</class>
<class name="CheckStyleRunner" lineCount="92" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
</class>
<class name="JaCoCoMergeReader" lineCount="65" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
</class>
<class name="JaCoCoMergeRunner" lineCount="50" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
</class>
<class name="JaCoCoResultReader" lineCount="299" high="0" significant="1" moderate="2" low="3" info="8" quality="87">
<testCoverage lineCoveragePct="93" branchCoveragePct="86" lineCount="112" coveredLineCount="105" branchCount="14" coveredBranchCount="14"/>
<diag id="322" sev="2" tool="SpotBugs" rule="URF_UNREAD_FIELD">Unread field: com.github.sanity4j.workflow.tool.JaCoCoResultReader.jacocoResultFile</diag>
<diag id="709" sev="1" tool="PMD" rule="CyclomaticComplexity">The class 'JaCoCoResultReader' has a Cyclomatic Complexity of 3 (Highest = 12).</diag>
<diag id="712" sev="2" tool="PMD" rule="UnusedPrivateField">Avoid unused private fields such as 'jacocoResultFile'.</diag>
<diag id="714" sev="1" tool="PMD" rule="SingularField">Perhaps 'jacocoResultFile' could be replaced by a local variable.</diag>
<diag id="715" sev="1" tool="PMD" rule="CyclomaticComplexity">The method 'processClass' has a Cyclomatic Complexity of 12.</diag>
<diag id="716" sev="0" tool="PMD" rule="NPathComplexity">The method processClass() has an NPath complexity of 204</diag>
<diag id="717" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="718" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="719" sev="0" tool="PMD" rule="AvoidDeeplyNestedIfStmts">Deeply nested if..then statements are hard to read</diag>
<diag id="720" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="721" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="722" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="723" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="724" sev="3" tool="PMD" rule="AvoidCatchingGenericException">Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block</diag>
</class>
<class name="JaCoCoRunner" lineCount="46" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
</class>
<class name="Pmd5Runner" lineCount="82" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
</class>
<class name="PmdCpd5ResultReader" lineCount="147" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
<testCoverage lineCoveragePct="86" branchCoveragePct="58" lineCount="50" coveredLineCount="43" branchCount="4" coveredBranchCount="4"/>
</class>
<class name="PmdCpd5Runner" lineCount="114" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
</class>
<class name="PmdResultReader" lineCount="180" high="0" significant="1" moderate="0" low="0" info="0" quality="88">
<testCoverage lineCoveragePct="54" branchCoveragePct="75" lineCount="62" coveredLineCount="34" branchCount="4" coveredBranchCount="4"/>
<diag id="731" sev="3" tool="PMD" rule="AvoidCatchingGenericException">Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block</diag>
</class>
<class name="ResultReader" lineCount="38" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
</class>
<class name="SpotBugsResultReader" lineCount="149" high="0" significant="0" moderate="0" low="3" info="1" quality="95">
<testCoverage lineCoveragePct="86" branchCoveragePct="62" lineCount="50" coveredLineCount="43" branchCount="11" coveredBranchCount="11"/>
<diag id="732" sev="1" tool="PMD" rule="CyclomaticComplexity">The class 'SpotBugsResultReader' has a Cyclomatic Complexity of 5 (Highest = 18).</diag>
<diag id="736" sev="1" tool="PMD" rule="CyclomaticComplexity">The method 'run' has a Cyclomatic Complexity of 18.</diag>
<diag id="737" sev="0" tool="PMD" rule="AvoidDeeplyNestedIfStmts">Deeply nested if..then statements are hard to read</diag>
<diag id="738" sev="1" tool="PMD" rule="ConfusingTernary">Avoid if (x != y) ..; else ..;</diag>
</class>
<class name="SpotBugsRunner" lineCount="227" high="0" significant="1" moderate="0" low="1" info="0" quality="90">
<diag id="323" sev="3" tool="SpotBugs" rule="DM_DEFAULT_ENCODING">Found reliance on default encoding in com.github.sanity4j.workflow.tool.SpotBugsRunner.runTool(String): new String(byte[])</diag>
<diag id="740" sev="1" tool="PMD" rule="InsufficientStringBufferDeclaration">StringBuffer constructor is initialized with size 88, but has at least 266 characters appended.</diag>
</class>
<class name="ToolRunnerGroup" lineCount="145" high="0" significant="2" moderate="0" low="0" info="2" quality="72">
<diag id="743" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="744" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="745" sev="3" tool="PMD" rule="AvoidCatchingGenericException">Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block</diag>
<diag id="746" sev="3" tool="PMD" rule="AvoidCatchingGenericException">Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block</diag>
</class>
</package>
</package>
<package name="com.github.sanity4j.model.diagnostic" classes="7" lineCount="2228" high="0" significant="1" moderate="2" low="16" info="3" quality="97">
<testCoverage lineCoveragePct="97" branchCoveragePct="91" lineCount="862" coveredLineCount="840" branchCount="70" coveredBranchCount="64"/>
<class name="Diagnostic" lineCount="479" high="0" significant="0" moderate="1" low="2" info="0" quality="98">
<testCoverage lineCoveragePct="85" branchCoveragePct="57" lineCount="102" coveredLineCount="87" branchCount="14" coveredBranchCount="8"/>
<diag id="68" sev="1" tool="Checkstyle" rule="JavadocPackageCheck">Missing package-info.java file.</diag>
<diag id="417" sev="2" tool="PMD" rule="AvoidSynchronizedAtMethodLevel">Use block level rather than method level synchronization</diag>
<diag id="418" sev="1" tool="PMD" rule="PrematureDeclaration">Avoid declaring a variable if it is unreferenced before a possible exit point.</diag>
</class>
<class name="DiagnosticCategory" lineCount="216" high="0" significant="0" moderate="0" low="1" info="1" quality="99">
<testCoverage lineCoveragePct="100" branchCoveragePct="100" lineCount="51" coveredLineCount="51" branchCount="11" coveredBranchCount="11"/>
<diag id="69" sev="1" tool="Checkstyle" rule="HiddenFieldCheck">'name' hides a field.</diag>
<diag id="419" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
</class>
<class name="DiagnosticCategory_Test" lineCount="170" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
<testCoverage lineCoveragePct="100" branchCoveragePct="0" lineCount="92" coveredLineCount="92" branchCount="0" coveredBranchCount="0"/>
</class>
<class name="DiagnosticFactory" lineCount="102" high="0" significant="1" moderate="0" low="0" info="0" quality="80">
<testCoverage lineCoveragePct="100" branchCoveragePct="0" lineCount="13" coveredLineCount="13" branchCount="0" coveredBranchCount="0"/>
<diag id="300" sev="3" tool="SpotBugs" rule="DMI_HARDCODED_ABSOLUTE_FILENAME">Hard coded reference to an absolute pathname in com.github.sanity4j.model.diagnostic.DiagnosticFactory.&lt;static initializer for DiagnosticFactory&gt;()</diag>
</class>
<class name="DiagnosticSet" lineCount="375" high="0" significant="0" moderate="1" low="0" info="0" quality="98">
<testCoverage lineCoveragePct="98" branchCoveragePct="82" lineCount="99" coveredLineCount="98" branchCount="31" coveredBranchCount="31"/>
<diag id="422" sev="2" tool="PMD" rule="GodClass">Possible God class (WMC=50, ATFD=16, TCC=0.125)</diag>
</class>
<class name="DiagnosticSet_Test" lineCount="696" high="0" significant="0" moderate="0" low="13" info="1" quality="96">
<testCoverage lineCoveragePct="98" branchCoveragePct="100" lineCount="422" coveredLineCount="416" branchCount="12" coveredBranchCount="12"/>
<diag id="429" sev="0" tool="PMD" rule="TooManyMethods">This class has too many methods, consider refactoring it.</diag>
<diag id="430" sev="1" tool="PMD" rule="AvoidDuplicateLiterals">The String literal &quot;.ClassName&quot; appears 4 times in this file; the first occurrence is on line 147</diag>
<diag id="757" sev="1" tool="PMD-CPD" rule="DoNotCopyAndPasteCode">Duplicate of com\github\sanity4j\model\diagnostic\DiagnosticSet_Test.java:
    public void testGetDiagnosticsByPackageName()
    {
        String topPackage = &quot;package&quot;;
        String packageName1 = topPackage + &quot;.subpackage1&quot;; 
        String className1 = packageName1 + &quot;.ClassName&quot;; 
        String packageName2 = topPackage + &quot;.subpackage2&quot;; 
        String className2 = packageName2 + &quot;.ClassName&quot;; 
        
        DiagnosticSet diagnosticSet = new DiagnosticSet();

        // Add three diagnostics for class 1, and two for class 2 
        Diagnostic class1Diag1 = new Diagnostic();
        class1Diag1.setClassName(className1);
        diagnosticSet.add(class1Diag1);
        
        Diagnostic class1Diag2 = new Diagnostic();
        class1Diag2.setClassName(className1);
        diagnosticSet.add(class1Diag2);
        
        Diagnostic class1Diag3 = new Diagnostic();
        class1Diag3.setClassName(className1);
        diagnosticSet.add(class1Diag3);

        Diagnostic class2Diag1 = new Diagnostic();
        class2Diag1.setClassName(className2);
        diagnosticSet.add(class2Diag1);

        Diagnostic class2Diag2 = new Diagnostic();
        class2Diag2.setClassName(className2);
        diagnosticSet.add(class2Diag2);</diag>
<diag id="758" sev="1" tool="PMD-CPD" rule="DoNotCopyAndPasteCode">Duplicate of com\github\sanity4j\model\diagnostic\DiagnosticSet_Test.java:
    public void testGetDiagnosticsByPackageName()
    {
        String topPackage = &quot;package&quot;;
        String packageName1 = topPackage + &quot;.subpackage1&quot;; 
        String className1 = packageName1 + &quot;.ClassName&quot;; 
        String packageName2 = topPackage + &quot;.subpackage2&quot;; 
        String className2 = packageName2 + &quot;.ClassName&quot;; 
        
        DiagnosticSet diagnosticSet = new DiagnosticSet();

        // Add three diagnostics for class 1, and two for class 2 
        Diagnostic class1Diag1 = new Diagnostic();
        class1Diag1.setClassName(className1);
        diagnosticSet.add(class1Diag1);
        
        Diagnostic class1Diag2 = new Diagnostic();
        class1Diag2.setClassName(className1);
        diagnosticSet.add(class1Diag2);
        
        Diagnostic class1Diag3 = new Diagnostic();
        class1Diag3.setClassName(className1);
        diagnosticSet.add(class1Diag3);

        Diagnostic class2Diag1 = new Diagnostic();
        class2Diag1.setClassName(className2);
        diagnosticSet.add(class2Diag1);

        Diagnostic class2Diag2 = new Diagnostic();
        class2Diag2.setClassName(className2);
        diagnosticSet.add(class2Diag2);</diag>
<diag id="761" sev="1" tool="PMD-CPD" rule="DoNotCopyAndPasteCode">Duplicate of com\github\sanity4j\model\diagnostic\DiagnosticSet_Test.java:
    public void testGetDiagnosticsBySeverity()
    {
        int severity1 = Diagnostic.SEVERITY_MODERATE; 
        int severity2 = Diagnostic.SEVERITY_HIGH;
        
        DiagnosticSet diagnosticSet = new DiagnosticSet();

        // Add three diagnostics for file 1, and two for file 2 
        Diagnostic severity1Diag1 = new Diagnostic();
        severity1Diag1.setSeverity(severity1);
        diagnosticSet.add(severity1Diag1);
        
        Diagnostic severity1Diag2 = new Diagnostic();
        severity1Diag2.setSeverity(severity1);
        diagnosticSet.add(severity1Diag2);
        
        Diagnostic severity1Diag3 = new Diagnostic();
        severity1Diag3.setSeverity(severity1);
        diagnosticSet.add(severity1Diag3);

        Diagnostic severity2Diag1 = new Diagnostic();
        severity2Diag1.setSeverity(severity2);
        diagnosticSet.add(severity2Diag1);

        Diagnostic severity2Diag2 = new Diagnostic();
        severity2Diag2.setSeverity(severity2);
        diagnosticSet.add(severity2Diag2);</diag>
<diag id="762" sev="1" tool="PMD-CPD" rule="DoNotCopyAndPasteCode">Duplicate of com\github\sanity4j\model\diagnostic\DiagnosticSet_Test.java:
    public void testGetDiagnosticsBySeverity()
    {
        int severity1 = Diagnostic.SEVERITY_MODERATE; 
        int severity2 = Diagnostic.SEVERITY_HIGH;
        
        DiagnosticSet diagnosticSet = new DiagnosticSet();

        // Add three diagnostics for file 1, and two for file 2 
        Diagnostic severity1Diag1 = new Diagnostic();
        severity1Diag1.setSeverity(severity1);
        diagnosticSet.add(severity1Diag1);
        
        Diagnostic severity1Diag2 = new Diagnostic();
        severity1Diag2.setSeverity(severity1);
        diagnosticSet.add(severity1Diag2);
        
        Diagnostic severity1Diag3 = new Diagnostic();
        severity1Diag3.setSeverity(severity1);
        diagnosticSet.add(severity1Diag3);

        Diagnostic severity2Diag1 = new Diagnostic();
        severity2Diag1.setSeverity(severity2);
        diagnosticSet.add(severity2Diag1);

        Diagnostic severity2Diag2 = new Diagnostic();
        severity2Diag2.setSeverity(severity2);
        diagnosticSet.add(severity2Diag2);</diag>
<diag id="763" sev="1" tool="PMD-CPD" rule="DoNotCopyAndPasteCode">Duplicate of com\github\sanity4j\model\diagnostic\DiagnosticSet_Test.java:
        DiagnosticSet diagnosticSet = new DiagnosticSet();

        // Add three diagnostics for class 1, and two for class 2 
        Diagnostic class1Diag1 = new Diagnostic();
        class1Diag1.setClassName(className1);
        diagnosticSet.add(class1Diag1);
        
        Diagnostic class1Diag2 = new Diagnostic();
        class1Diag2.setClassName(className1);
        diagnosticSet.add(class1Diag2);
        
        Diagnostic class1Diag3 = new Diagnostic();
        class1Diag3.setClassName(className1);
        diagnosticSet.add(class1Diag3);

        Diagnostic class2Diag1 = new Diagnostic();
        class2Diag1.setClassName(className2);
        diagnosticSet.add(class2Diag1);

        Diagnostic class2Diag2 = new Diagnostic();
        class2Diag2.setClassName(className2);
        diagnosticSet.add(class2Diag2);
        
        Map&lt;String, List&lt;Diagnostic&gt;&gt; diagsByName = diagnosticSet.getDiagnosticsByClassName();</diag>
<diag id="764" sev="1" tool="PMD-CPD" rule="DoNotCopyAndPasteCode">Duplicate of com\github\sanity4j\model\diagnostic\DiagnosticSet_Test.java:
        DiagnosticSet diagnosticSet = new DiagnosticSet();

        // Add three diagnostics for class 1, and two for class 2 
        Diagnostic class1Diag1 = new Diagnostic();
        class1Diag1.setClassName(className1);
        diagnosticSet.add(class1Diag1);
        
        Diagnostic class1Diag2 = new Diagnostic();
        class1Diag2.setClassName(className1);
        diagnosticSet.add(class1Diag2);
        
        Diagnostic class1Diag3 = new Diagnostic();
        class1Diag3.setClassName(className1);
        diagnosticSet.add(class1Diag3);

        Diagnostic class2Diag1 = new Diagnostic();
        class2Diag1.setClassName(className2);
        diagnosticSet.add(class2Diag1);

        Diagnostic class2Diag2 = new Diagnostic();
        class2Diag2.setClassName(className2);
        diagnosticSet.add(class2Diag2);
        
        Map&lt;String, List&lt;Diagnostic&gt;&gt; diagsByName = diagnosticSet.getDiagnosticsByClassName();</diag>
<diag id="765" sev="1" tool="PMD-CPD" rule="DoNotCopyAndPasteCode">Duplicate of com\github\sanity4j\model\diagnostic\DiagnosticSet_Test.java:
    public void testGetDiagnosticsByFileName()
    {
        String fileName1 = &quot;package/subpackage1/FileName.java&quot;; 
        String fileName2 = &quot;package/subpackage2/FileName.java&quot;;
        
        DiagnosticSet diagnosticSet = new DiagnosticSet();

        // Add three diagnostics for file 1, and two for file 2 
        Diagnostic file1Diag1 = new Diagnostic();
        file1Diag1.setFileName(fileName1);
        diagnosticSet.add(file1Diag1);
        
        Diagnostic file1Diag2 = new Diagnostic();
        file1Diag2.setFileName(fileName1);
        diagnosticSet.add(file1Diag2);
        
        Diagnostic file1Diag3 = new Diagnostic();
        file1Diag3.setFileName(fileName1);
        diagnosticSet.add(file1Diag3);

        Diagnostic file2Diag1 = new Diagnostic();
        file2Diag1.setFileName(fileName2);
        diagnosticSet.add(file2Diag1);

        Diagnostic file2Diag2 = new Diagnostic();
        file2Diag2.setFileName(fileName2);
        diagnosticSet.add(file2Diag2);</diag>
<diag id="766" sev="1" tool="PMD-CPD" rule="DoNotCopyAndPasteCode">Duplicate of com\github\sanity4j\model\diagnostic\DiagnosticSet_Test.java:
    public void testGetDiagnosticsByFileName()
    {
        String fileName1 = &quot;package/subpackage1/FileName.java&quot;; 
        String fileName2 = &quot;package/subpackage2/FileName.java&quot;;
        
        DiagnosticSet diagnosticSet = new DiagnosticSet();

        // Add three diagnostics for file 1, and two for file 2 
        Diagnostic file1Diag1 = new Diagnostic();
        file1Diag1.setFileName(fileName1);
        diagnosticSet.add(file1Diag1);
        
        Diagnostic file1Diag2 = new Diagnostic();
        file1Diag2.setFileName(fileName1);
        diagnosticSet.add(file1Diag2);
        
        Diagnostic file1Diag3 = new Diagnostic();
        file1Diag3.setFileName(fileName1);
        diagnosticSet.add(file1Diag3);

        Diagnostic file2Diag1 = new Diagnostic();
        file2Diag1.setFileName(fileName2);
        diagnosticSet.add(file2Diag1);

        Diagnostic file2Diag2 = new Diagnostic();
        file2Diag2.setFileName(fileName2);
        diagnosticSet.add(file2Diag2);</diag>
<diag id="767" sev="1" tool="PMD-CPD" rule="DoNotCopyAndPasteCode">Duplicate of com\github\sanity4j\model\diagnostic\DiagnosticSet_Test.java:
        DiagnosticSet diagnosticSet = new DiagnosticSet();

        // Add three diagnostics for class 1, and two for class 2 
        Diagnostic class1Diag1 = new Diagnostic();
        class1Diag1.setClassName(className1);
        diagnosticSet.add(class1Diag1);
        
        Diagnostic class1Diag2 = new Diagnostic();
        class1Diag2.setClassName(className1);
        diagnosticSet.add(class1Diag2);
        
        Diagnostic class1Diag3 = new Diagnostic();
        class1Diag3.setClassName(className1);
        diagnosticSet.add(class1Diag3);

        Diagnostic class2Diag1 = new Diagnostic();
        class2Diag1.setClassName(className2);
        diagnosticSet.add(class2Diag1);

        Diagnostic class2Diag2 = new Diagnostic();
        class2Diag2.setClassName(className2);
        diagnosticSet.add(class2Diag2);</diag>
<diag id="768" sev="1" tool="PMD-CPD" rule="DoNotCopyAndPasteCode">Duplicate of com\github\sanity4j\model\diagnostic\DiagnosticSet_Test.java:
        DiagnosticSet diagnosticSet = new DiagnosticSet();

        // Add three diagnostics for class 1, and two for class 2 
        Diagnostic class1Diag1 = new Diagnostic();
        class1Diag1.setClassName(className1);
        diagnosticSet.add(class1Diag1);
        
        Diagnostic class1Diag2 = new Diagnostic();
        class1Diag2.setClassName(className1);
        diagnosticSet.add(class1Diag2);
        
        Diagnostic class1Diag3 = new Diagnostic();
        class1Diag3.setClassName(className1);
        diagnosticSet.add(class1Diag3);

        Diagnostic class2Diag1 = new Diagnostic();
        class2Diag1.setClassName(className2);
        diagnosticSet.add(class2Diag1);

        Diagnostic class2Diag2 = new Diagnostic();
        class2Diag2.setClassName(className2);
        diagnosticSet.add(class2Diag2);</diag>
<diag id="769" sev="1" tool="PMD-CPD" rule="DoNotCopyAndPasteCode">Duplicate of com\github\sanity4j\model\diagnostic\DiagnosticSet_Test.java:
        DiagnosticSet diagnosticSet = new DiagnosticSet();

        // Add three diagnostics for tool 1, and two for tool 2 
        Diagnostic tool1Diag1 = new Diagnostic();
        tool1Diag1.setSource(tool1);
        diagnosticSet.add(tool1Diag1);
        
        Diagnostic tool1Diag2 = new Diagnostic();
        tool1Diag2.setSource(tool1);
        diagnosticSet.add(tool1Diag2);
        
        Diagnostic tool1Diag3 = new Diagnostic();
        tool1Diag3.setSource(tool1);
        diagnosticSet.add(tool1Diag3);

        Diagnostic tool2Diag1 = new Diagnostic();
        tool2Diag1.setSource(tool2);
        diagnosticSet.add(tool2Diag1);

        Diagnostic tool2Diag2 = new Diagnostic();
        tool2Diag2.setSource(tool2);
        diagnosticSet.add(tool2Diag2);</diag>
<diag id="770" sev="1" tool="PMD-CPD" rule="DoNotCopyAndPasteCode">Duplicate of com\github\sanity4j\model\diagnostic\DiagnosticSet_Test.java:
        DiagnosticSet diagnosticSet = new DiagnosticSet();

        // Add three diagnostics for tool 1, and two for tool 2 
        Diagnostic tool1Diag1 = new Diagnostic();
        tool1Diag1.setSource(tool1);
        diagnosticSet.add(tool1Diag1);
        
        Diagnostic tool1Diag2 = new Diagnostic();
        tool1Diag2.setSource(tool1);
        diagnosticSet.add(tool1Diag2);
        
        Diagnostic tool1Diag3 = new Diagnostic();
        tool1Diag3.setSource(tool1);
        diagnosticSet.add(tool1Diag3);

        Diagnostic tool2Diag1 = new Diagnostic();
        tool2Diag1.setSource(tool2);
        diagnosticSet.add(tool2Diag1);

        Diagnostic tool2Diag2 = new Diagnostic();
        tool2Diag2.setSource(tool2);
        diagnosticSet.add(tool2Diag2);</diag>
</class>
<class name="Diagnostic_Test" lineCount="190" high="0" significant="0" moderate="0" low="0" info="1" quality="100">
<testCoverage lineCoveragePct="100" branchCoveragePct="100" lineCount="83" coveredLineCount="83" branchCount="2" coveredBranchCount="2"/>
<diag id="431" sev="0" tool="PMD" rule="TooManyMethods">This class has too many methods, consider refactoring it.</diag>
</class>
</package>
<package name="com.github.sanity4j.ui" classes="4" lineCount="655" high="0" significant="1" moderate="0" low="4" info="9" quality="95">
<class name="FieldLabel" lineCount="25" high="0" significant="0" moderate="0" low="2" info="0" quality="84">
<diag id="230" sev="1" tool="Checkstyle" rule="JavadocPackageCheck">Missing package-info.java file.</diag>
<diag id="538" sev="1" tool="PMD" rule="UselessParentheses">Useless parentheses.</diag>
</class>
<class name="FileInput" lineCount="109" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
</class>
<class name="QaApp" lineCount="435" high="0" significant="1" moderate="0" low="2" info="9" quality="94">
<diag id="541" sev="1" tool="PMD" rule="CyclomaticComplexity">The class 'QaApp' has a Cyclomatic Complexity of 5 (Highest = 15).</diag>
<diag id="542" sev="0" tool="PMD" rule="TooManyMethods">This class has too many methods, consider refactoring it.</diag>
<diag id="556" sev="0" tool="PMD" rule="AccessorMethodGeneration">Avoid autogenerated methods to access private fields and methods of inner / outer classes</diag>
<diag id="557" sev="0" tool="PMD" rule="AccessorMethodGeneration">Avoid autogenerated methods to access private fields and methods of inner / outer classes</diag>
<diag id="558" sev="1" tool="PMD" rule="CyclomaticComplexity">The method 'validateInput' has a Cyclomatic Complexity of 15.</diag>
<diag id="559" sev="0" tool="PMD" rule="NPathComplexity">The method validateInput() has an NPath complexity of 2187</diag>
<diag id="561" sev="0" tool="PMD" rule="AccessorMethodGeneration">Avoid autogenerated methods to access private fields and methods of inner / outer classes</diag>
<diag id="562" sev="0" tool="PMD" rule="AccessorMethodGeneration">Avoid autogenerated methods to access private fields and methods of inner / outer classes</diag>
<diag id="563" sev="0" tool="PMD" rule="AccessorMethodGeneration">Avoid autogenerated methods to access private fields and methods of inner / outer classes</diag>
<diag id="564" sev="0" tool="PMD" rule="AccessorMethodGeneration">Avoid autogenerated methods to access private fields and methods of inner / outer classes</diag>
<diag id="565" sev="3" tool="PMD" rule="AvoidCatchingThrowable">A catch statement should never catch throwable since it includes errors.</diag>
<diag id="566" sev="0" tool="PMD" rule="AccessorMethodGeneration">Avoid autogenerated methods to access private fields and methods of inner / outer classes</diag>
</class>
<class name="QaLoggerJTextAreaImpl" lineCount="86" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
</class>
</package>
<package name="com.github.sanity4j.report" classes="12" lineCount="2952" high="0" significant="2" moderate="3" low="63" info="32" quality="93">
<testCoverage lineCoveragePct="90" branchCoveragePct="100" lineCount="214" coveredLineCount="193" branchCount="12" coveredBranchCount="12"/>
<class name="CategoryWriter" lineCount="194" high="0" significant="0" moderate="0" low="7" info="2" quality="92">
<diag id="208" sev="1" tool="Checkstyle" rule="JavadocPackageCheck">Missing package-info.java file.</diag>
<diag id="436" sev="1" tool="PMD" rule="UselessParentheses">Useless parentheses.</diag>
<diag id="437" sev="1" tool="PMD" rule="InsufficientStringBufferDeclaration">StringBuffer constructor is initialized with size 16, but has at least 224 characters appended.</diag>
<diag id="438" sev="1" tool="PMD" rule="ConsecutiveLiteralAppends">StringBuffer (or StringBuilder).append is called 2 consecutive times with literal Strings. Use a single append with a single combined String.</diag>
<diag id="439" sev="1" tool="PMD" rule="ConsecutiveLiteralAppends">StringBuffer (or StringBuilder).append is called 2 consecutive times with literal Strings. Use a single append with a single combined String.</diag>
<diag id="440" sev="1" tool="PMD" rule="AvoidDuplicateLiterals">The String literal &quot;\&quot;&gt;\n&quot; appears 4 times in this file; the first occurrence is on line 92</diag>
<diag id="441" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="442" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="759" sev="1" tool="PMD-CPD" rule="DoNotCopyAndPasteCode">Duplicate of com\github\sanity4j\report\PackageWriter.java:
        for (Diagnostic diagnostic : category.getDiagnostics())
        {
            String key = diagnostic.getRuleName();
            
            if (key == null)
            {
                key = &quot;(none)&quot;;
            }
            
            List&lt;Diagnostic&gt; list = diagnosticsByRuleName.get(key);
            
            if (list == null)
            {
                list = new ArrayList&lt;Diagnostic&gt;();
                diagnosticsByRuleName.put(key, list);
            }
            
            list.add(diagnostic);
        }
        
        List&lt;String&gt; ruleNames = new ArrayList&lt;String&gt;(diagnosticsByRuleName.keySet());
        Collections.sort(ruleNames);
        
        // Output diagnostics (if any)
        for (String ruleName : ruleNames)
        {
            List&lt;Diagnostic&gt; diagnosticsForRule = diagnosticsByRuleName.get(ruleName);
            Diagnostic firstDiag = diagnosticsForRule.get(0);</diag>
</class>
<class name="ChartFactory" lineCount="157" high="0" significant="0" moderate="0" low="2" info="1" quality="97">
<testCoverage lineCoveragePct="93" branchCoveragePct="66" lineCount="43" coveredLineCount="40" branchCount="5" coveredBranchCount="5"/>
<diag id="443" sev="1" tool="PMD" rule="UseVarargs">Consider using varargs for methods or constructors which take an array the last parameter.</diag>
<diag id="444" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="747" sev="1" tool="PMD-CPD" rule="DoNotCopyAndPasteCode">Duplicate of com\github\sanity4j\report\CrossProjectChartCreator.java:
        JFreeChart chart = org.jfree.chart.ChartFactory.createTimeSeriesChart(
          title,	  // title
          &quot;Date&quot;,     // x-axis label
          &quot;%&quot;,   	  // y-axis label
          dataset,    // data
          true,       // create legend?
          false,      // generate tooltips?
          false       // generate URLs?
        );

        chart.setBackgroundPaint(Color.white);

        XYPlot plot = (XYPlot) chart.getPlot();
        plot.setBackgroundPaint(Color.lightGray);
        plot.setDomainGridlinePaint(Color.white);
        plot.setRangeGridlinePaint(Color.white);
        plot.setAxisOffset(new RectangleInsets(INSET, INSET, INSET, INSET));
        plot.setDomainCrosshairVisible(true);
        plot.setRangeCrosshairVisible(true);
        
        XYItemRenderer renderer = plot.getRenderer();
        
        if (renderer instanceof XYLineAndShapeRenderer)
        {
            XYLineAndShapeRenderer shapeRenderer = (XYLineAndShapeRenderer) renderer;
            
            // If there are too many runs, don't draw shapes on the lines as it clutters up the graph
            boolean showShapes = dataset.getSeriesCount() &gt; 0 &amp;&amp; dataset.getItemCount(0) &lt;= MAX_RUNS_FOR_SHAPES; 
            shapeRenderer.setBaseShapesFilled(true);
            shapeRenderer.setBaseShapesVisible(showShapes);
            
            if (!showShapes)
            {
                renderer.setBaseStroke(new BasicStroke(2f, BasicStroke.JOIN_ROUND, BasicStroke.JOIN_BEVEL));
            }
        }

        DateAxis axis = (DateAxis) plot.getDomainAxis();
        axis.setDateFormatOverride(new SimpleDateFormat(&quot;dd/MM/yy&quot;));
        
        plot.getRangeAxis().setAutoRange(false);
        plot.getRangeAxis().setLowerBound(0.0);
        plot.getRangeAxis().setUpperBound(HUNDRED);

        return chart;
    }
    
    /**
     * Creates a chart image.
     * 
     * @param summaries the PackageSummaries for the current and historical runs 
     * @param packageName the package name
     * 
     * @return an Image showing the summary for the given package
     */
    public static BufferedImage createImage(final PackageSummary[] summaries, final String packageName)</diag>
</class>
<class name="ChartFactory_Test" lineCount="137" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
<testCoverage lineCoveragePct="96" branchCoveragePct="0" lineCount="55" coveredLineCount="53" branchCount="0" coveredBranchCount="0"/>
</class>
<class name="CrossProjectChartCreator" lineCount="203" high="0" significant="0" moderate="0" low="2" info="7" quality="98">
<diag id="447" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="448" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="449" sev="1" tool="PMD" rule="UseVarargs">Consider using varargs for methods or constructors which take an array the last parameter.</diag>
<diag id="450" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="451" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="452" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="453" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="454" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="748" sev="1" tool="PMD-CPD" rule="DoNotCopyAndPasteCode">Duplicate of com\github\sanity4j\report\ChartFactory.java:
        JFreeChart chart = org.jfree.chart.ChartFactory.createTimeSeriesChart(
          title,	  // title
          &quot;Date&quot;,     // x-axis label
          &quot;%&quot;,   	  // y-axis label
          dataset,    // data
          true,       // create legend?
          false,      // generate tooltips?
          false       // generate URLs?
        );

        chart.setBackgroundPaint(Color.white);

        XYPlot plot = (XYPlot) chart.getPlot();
        plot.setBackgroundPaint(Color.lightGray);
        plot.setDomainGridlinePaint(Color.white);
        plot.setRangeGridlinePaint(Color.white);
        plot.setAxisOffset(new RectangleInsets(INSET, INSET, INSET, INSET));
        plot.setDomainCrosshairVisible(true);
        plot.setRangeCrosshairVisible(true);
        
        XYItemRenderer renderer = plot.getRenderer();
        
        if (renderer instanceof XYLineAndShapeRenderer)
        {
            XYLineAndShapeRenderer shapeRenderer = (XYLineAndShapeRenderer) renderer;
            
            // If there are too many runs, don't draw shapes on the lines as it clutters up the graph
            boolean showShapes = dataset.getSeriesCount() &gt; 0 &amp;&amp; dataset.getItemCount(0) &lt;= MAX_RUNS_FOR_SHAPES; 
            shapeRenderer.setBaseShapesFilled(true);
            shapeRenderer.setBaseShapesVisible(showShapes);
            
            if (!showShapes)
            {
                renderer.setBaseStroke(new BasicStroke(2f, BasicStroke.JOIN_ROUND, BasicStroke.JOIN_BEVEL));
            }
        }

        DateAxis axis = (DateAxis) plot.getDomainAxis();
        axis.setDateFormatOverride(new SimpleDateFormat(&quot;dd/MM/yy&quot;));
        
        plot.getRangeAxis().setAutoRange(false);
        plot.getRangeAxis().setLowerBound(0.0);
        plot.getRangeAxis().setUpperBound(HUNDRED);

        return chart;
    }
    
    /**
     * Creates a chart image.
     * 
     * @param summaries the PackageSummaries for the current and historical runs 
     * @param packageName the package name
     * 
     * @return an Image showing the summary for the given package
     */
    public static BufferedImage createImage(final PackageSummary[] summaries, final String packageName)</diag>
</class>
<class name="ExportWriter" lineCount="279" high="0" significant="0" moderate="0" low="9" info="2" quality="93">
<diag id="455" sev="1" tool="PMD" rule="CyclomaticComplexity">The class 'ExportWriter' has a Cyclomatic Complexity of 6 (Highest = 14).</diag>
<diag id="459" sev="1" tool="PMD" rule="InsufficientStringBufferDeclaration">StringBuffer constructor is initialized with size 16, but has at least 163 characters appended.</diag>
<diag id="460" sev="1" tool="PMD" rule="ConsecutiveLiteralAppends">StringBuffer (or StringBuilder).append is called 3 consecutive times with literal Strings. Use a single append with a single combined String.</diag>
<diag id="461" sev="0" tool="PMD" rule="ExcessiveMethodLength">Avoid really long methods.</diag>
<diag id="462" sev="1" tool="PMD" rule="CyclomaticComplexity">The method 'writePackage' has a Cyclomatic Complexity of 14.</diag>
<diag id="463" sev="0" tool="PMD" rule="NPathComplexity">The method writePackage() has an NPath complexity of 2880</diag>
<diag id="464" sev="1" tool="PMD" rule="AvoidDuplicateLiterals">The String literal &quot;\&quot; lineCount=\&quot;&quot; appears 4 times in this file; the first occurrence is on line 130</diag>
<diag id="749" sev="1" tool="PMD-CPD" rule="DoNotCopyAndPasteCode">Duplicate of com\github\sanity4j\report\PackageWriter.java:
	private void writePackage(final String packageName, final StringBuilder xml)
	{
        boolean allPackages = &quot;&quot;.equals(packageName);

        DiagnosticSet diags = null;
        CoverageItf coverage = null;
        int numLines = 0;
        int numExecutableLines = 0;
        int coveredLines = 0;
        int coveredLinePct = 0;
        int coveredBranchPct = 0;
        int branchCount = 0;
        int coveredBranchCount = 0;
        int classCount = 0;

        if (allPackages)
        {
            coverage = stats.getCoverage();
            diags = stats.getDiagnostics();
            numLines = stats.getLineCount();
            classCount = stats.getClassCount();
        }
        else
        {
            coverage = stats.getCoverage().getPackageCoverage(packageName);
            diags = stats.getDiagnostics().getDiagnosticsForPackage(packageName, false);

            numLines = stats.getPackageLineCount(packageName);
            classCount = stats.getPackageClassCount(packageName);
        }

        if (coverage != null)
        {
            coveredLines = (int) Math.round(numLines * coverage.getLineCoverage());
            coveredLinePct = (int) (coverage.getLineCoverage() * HUNDRED);
            coveredBranchPct = (int) (coverage.getBranchCoverage() * HUNDRED);
            coveredLines = coverage.getCoveredLineCount();
            branchCount = coverage.getBranchCount();
            coveredBranchCount = coverage.getCoveredBranchCount();
            numExecutableLines = coverage.getLineCount();
        }</diag>
<diag id="753" sev="1" tool="PMD-CPD" rule="DoNotCopyAndPasteCode">Duplicate of com\github\sanity4j\report\ExportWriter.java:
        xml.append(&quot;\&quot; high=\&quot;&quot;).append(diags.getCountForSeverity(Diagnostic.SEVERITY_HIGH))
            .append(&quot;\&quot; significant=\&quot;&quot;).append(diags.getCountForSeverity(Diagnostic.SEVERITY_SIGNIFICANT))
            .append(&quot;\&quot; moderate=\&quot;&quot;).append(diags.getCountForSeverity(Diagnostic.SEVERITY_MODERATE))
            .append(&quot;\&quot; low=\&quot;&quot;).append(diags.getCountForSeverity(Diagnostic.SEVERITY_LOW))
            .append(&quot;\&quot; info=\&quot;&quot;).append(diags.getCountForSeverity(Diagnostic.SEVERITY_INFO))
            .append(&quot;\&quot; quality=\&quot;&quot;).append(qualityPct)
            .append(&quot;\&quot;&gt;\n&quot;);
        
        // Test coverage
        if (numExecutableLines != 0)
        {
            xml.append(&quot;&lt;testCoverage lineCoveragePct=\&quot;&quot;).append(coveredLinePct)
                .append(&quot;\&quot; branchCoveragePct=\&quot;&quot;).append(coveredBranchPct)
                .append(&quot;\&quot; lineCount=\&quot;&quot;).append(numExecutableLines)
                .append(&quot;\&quot; coveredLineCount=\&quot;&quot;).append(coveredLines)
                .append(&quot;\&quot; branchCount=\&quot;&quot;).append(branchCount)
                .append(&quot;\&quot; coveredBranchCount=\&quot;&quot;).append(coveredBranchCount)
                .append(&quot;\&quot;/&gt;\n&quot;);
        }</diag>
<diag id="754" sev="1" tool="PMD-CPD" rule="DoNotCopyAndPasteCode">Duplicate of com\github\sanity4j\report\ExportWriter.java:
        xml.append(&quot;\&quot; high=\&quot;&quot;).append(diags.getCountForSeverity(Diagnostic.SEVERITY_HIGH))
            .append(&quot;\&quot; significant=\&quot;&quot;).append(diags.getCountForSeverity(Diagnostic.SEVERITY_SIGNIFICANT))
            .append(&quot;\&quot; moderate=\&quot;&quot;).append(diags.getCountForSeverity(Diagnostic.SEVERITY_MODERATE))
            .append(&quot;\&quot; low=\&quot;&quot;).append(diags.getCountForSeverity(Diagnostic.SEVERITY_LOW))
            .append(&quot;\&quot; info=\&quot;&quot;).append(diags.getCountForSeverity(Diagnostic.SEVERITY_INFO))
            .append(&quot;\&quot; quality=\&quot;&quot;).append(qualityPct)
            .append(&quot;\&quot;&gt;\n&quot;);
        
        // Test coverage
        if (numExecutableLines != 0)
        {
            xml.append(&quot;&lt;testCoverage lineCoveragePct=\&quot;&quot;).append(coveredLinePct)
                .append(&quot;\&quot; branchCoveragePct=\&quot;&quot;).append(coveredBranchPct)
                .append(&quot;\&quot; lineCount=\&quot;&quot;).append(numExecutableLines)
                .append(&quot;\&quot; coveredLineCount=\&quot;&quot;).append(coveredLines)
                .append(&quot;\&quot; branchCount=\&quot;&quot;).append(branchCount)
                .append(&quot;\&quot; coveredBranchCount=\&quot;&quot;).append(coveredBranchCount)
                .append(&quot;\&quot;/&gt;\n&quot;);
        }</diag>
<diag id="755" sev="1" tool="PMD-CPD" rule="DoNotCopyAndPasteCode">Duplicate of com\github\sanity4j\report\PackageWriter.java:
        for (String sourcePath : packageSources)
        {
            DiagnosticSet diags = stats.getDiagnostics().getDiagnosticsForFile(sourcePath);
            String className = stats.getClassNameForSourcePath(sourcePath);     
            CoverageItf coverage = stats.getCoverage().getClassCoverage(className);
            
            int numLines = stats.getClassLineCount(className);
            int numExecutableLines = 0;
            int coveredLines = 0;
            int coveredLinePct = 0;
            int coveredBranchPct = 0;
            int branchCount = 0;
            int coveredBranchCount = 0;
            
            if (coverage != null)
            {
                numExecutableLines = coverage.getLineCount();
                coveredLines = coverage.getCoveredLineCount();
                branchCount = coverage.getBranchCount();
                coveredBranchCount = coverage.getCoveredBranchCount();
                coveredLinePct = (int) (coverage.getLineCoverage() * HUNDRED);
                coveredBranchPct = (int) (coverage.getBranchCoverage() * HUNDRED);
            }
            
            
            // Quality
            int qualityPct = (int) (ONE_HUNDRED * ReportUtil.evaluateMetric(&quot;quality&quot;, diags, numLines));</diag>
</class>
<class name="ExtractStaticContent" lineCount="239" high="0" significant="0" moderate="1" low="0" info="5" quality="97">
<diag id="303" sev="2" tool="SpotBugs" rule="DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED">com.github.sanity4j.report.ExtractStaticContent.extractContent(QAConfig, File, String) creates a java.net.URLClassLoader classloader, which should be performed within a doPrivileged block</diag>
<diag id="305" sev="0" tool="SpotBugs" rule="OS_OPEN_STREAM">com.github.sanity4j.report.ExtractStaticContent.copyResource(ClassLoader, String, File, String) may fail to close stream</diag>
<diag id="466" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="467" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="468" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="470" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
</class>
<class name="JavaSourceWriter" lineCount="309" high="0" significant="1" moderate="0" low="5" info="3" quality="90">
<diag id="306" sev="3" tool="SpotBugs" rule="DM_DEFAULT_ENCODING">Found reliance on default encoding in com.github.sanity4j.report.JavaSourceWriter.writeSourceLines(File, DiagnosticSet, List, ClassCoverage, StringBuilder): new java.io.InputStreamReader(InputStream)</diag>
<diag id="307" sev="0" tool="SpotBugs" rule="OS_OPEN_STREAM">com.github.sanity4j.report.JavaSourceWriter.writeSourceLines(File, DiagnosticSet, List, ClassCoverage, StringBuilder) may fail to close stream</diag>
<diag id="471" sev="1" tool="PMD" rule="CyclomaticComplexity">The class 'JavaSourceWriter' has a Cyclomatic Complexity of 5 (Highest = 17).</diag>
<diag id="475" sev="1" tool="PMD" rule="ConsecutiveLiteralAppends">StringBuffer (or StringBuilder).append is called 2 consecutive times with literal Strings. Use a single append with a single combined String.</diag>
<diag id="476" sev="1" tool="PMD" rule="ConsecutiveLiteralAppends">StringBuffer (or StringBuilder).append is called 2 consecutive times with literal Strings. Use a single append with a single combined String.</diag>
<diag id="477" sev="1" tool="PMD" rule="ConsecutiveLiteralAppends">StringBuffer (or StringBuilder).append is called 2 consecutive times with literal Strings. Use a single append with a single combined String.</diag>
<diag id="478" sev="0" tool="PMD" rule="ExcessiveMethodLength">Avoid really long methods.</diag>
<diag id="479" sev="1" tool="PMD" rule="CyclomaticComplexity">The method 'writeSourceLines' has a Cyclomatic Complexity of 17.</diag>
<diag id="480" sev="0" tool="PMD" rule="NPathComplexity">The method writeSourceLines() has an NPath complexity of 2882</diag>
</class>
<class name="PackageWriter" lineCount="667" high="0" significant="0" moderate="1" low="37" info="4" quality="88">
<diag id="481" sev="2" tool="PMD" rule="GodClass">Possible God class (WMC=53, ATFD=122, TCC=0.03636363636363636)</diag>
<diag id="482" sev="1" tool="PMD" rule="CyclomaticComplexity">The class 'PackageWriter' has a Cyclomatic Complexity of 5 (Highest = 10).</diag>
<diag id="483" sev="0" tool="PMD" rule="TooManyMethods">This class has too many methods, consider refactoring it.</diag>
<diag id="487" sev="1" tool="PMD" rule="AvoidDuplicateLiterals">The String literal &quot;../&quot; appears 4 times in this file; the first occurrence is on line 144</diag>
<diag id="488" sev="1" tool="PMD" rule="UselessParentheses">Useless parentheses.</diag>
<diag id="489" sev="1" tool="PMD" rule="InsufficientStringBufferDeclaration">StringBuffer constructor is initialized with size 16, but has at least 292 characters appended.</diag>
<diag id="490" sev="1" tool="PMD" rule="ConsecutiveLiteralAppends">StringBuffer (or StringBuilder).append is called 2 consecutive times with literal Strings. Use a single append with a single combined String.</diag>
<diag id="491" sev="1" tool="PMD" rule="ConsecutiveLiteralAppends">StringBuffer (or StringBuilder).append is called 2 consecutive times with literal Strings. Use a single append with a single combined String.</diag>
<diag id="492" sev="1" tool="PMD" rule="AvoidDuplicateLiterals">The String literal &quot;\&quot;&gt;\n&quot; appears 6 times in this file; the first occurrence is on line 153</diag>
<diag id="493" sev="1" tool="PMD" rule="AvoidDuplicateLiterals">The String literal &quot;\&quot; high=\&quot;&quot; appears 5 times in this file; the first occurrence is on line 193</diag>
<diag id="494" sev="1" tool="PMD" rule="AvoidDuplicateLiterals">The String literal &quot;\&quot; significant=\&quot;&quot; appears 6 times in this file; the first occurrence is on line 194</diag>
<diag id="495" sev="1" tool="PMD" rule="AvoidDuplicateLiterals">The String literal &quot;\&quot; moderate=\&quot;&quot; appears 6 times in this file; the first occurrence is on line 195</diag>
<diag id="496" sev="1" tool="PMD" rule="AvoidDuplicateLiterals">The String literal &quot;\&quot; low=\&quot;&quot; appears 6 times in this file; the first occurrence is on line 196</diag>
<diag id="497" sev="1" tool="PMD" rule="AvoidDuplicateLiterals">The String literal &quot;\&quot; info=\&quot;&quot; appears 6 times in this file; the first occurrence is on line 197</diag>
<diag id="498" sev="1" tool="PMD" rule="AvoidDuplicateLiterals">The String literal &quot;\&quot;/&gt;\n&quot; appears 6 times in this file; the first occurrence is on line 198</diag>
<diag id="499" sev="1" tool="PMD" rule="CyclomaticComplexity">The method 'generatePackageByRule' has a Cyclomatic Complexity of 10.</diag>
<diag id="500" sev="0" tool="PMD" rule="NPathComplexity">The method generatePackageByRule() has an NPath complexity of 2500</diag>
<diag id="501" sev="1" tool="PMD" rule="UselessParentheses">Useless parentheses.</diag>
<diag id="502" sev="1" tool="PMD" rule="UselessParentheses">Useless parentheses.</diag>
<diag id="503" sev="1" tool="PMD" rule="InsufficientStringBufferDeclaration">StringBuffer constructor is initialized with size 16, but has at least 309 characters appended.</diag>
<diag id="504" sev="1" tool="PMD" rule="ConsecutiveLiteralAppends">StringBuffer (or StringBuilder).append is called 2 consecutive times with literal Strings. Use a single append with a single combined String.</diag>
<diag id="505" sev="1" tool="PMD" rule="ConsecutiveLiteralAppends">StringBuffer (or StringBuilder).append is called 2 consecutive times with literal Strings. Use a single append with a single combined String.</diag>
<diag id="506" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="507" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="508" sev="1" tool="PMD" rule="UselessParentheses">Useless parentheses.</diag>
<diag id="509" sev="1" tool="PMD" rule="InsufficientStringBufferDeclaration">StringBuffer constructor is initialized with size 16, but has at least 365 characters appended.</diag>
<diag id="510" sev="1" tool="PMD" rule="ConsecutiveLiteralAppends">StringBuffer (or StringBuilder).append is called 2 consecutive times with literal Strings. Use a single append with a single combined String.</diag>
<diag id="511" sev="1" tool="PMD" rule="ConsecutiveLiteralAppends">StringBuffer (or StringBuilder).append is called 2 consecutive times with literal Strings. Use a single append with a single combined String.</diag>
<diag id="512" sev="1" tool="PMD" rule="ConsecutiveLiteralAppends">StringBuffer (or StringBuilder).append is called 2 consecutive times with literal Strings. Use a single append with a single combined String.</diag>
<diag id="513" sev="1" tool="PMD" rule="ConsecutiveLiteralAppends">StringBuffer (or StringBuilder).append is called 2 consecutive times with literal Strings. Use a single append with a single combined String.</diag>
<diag id="514" sev="1" tool="PMD" rule="ConsecutiveLiteralAppends">StringBuffer (or StringBuilder).append is called 2 consecutive times with literal Strings. Use a single append with a single combined String.</diag>
<diag id="515" sev="1" tool="PMD" rule="ConsecutiveLiteralAppends">StringBuffer (or StringBuilder).append is called 2 consecutive times with literal Strings. Use a single append with a single combined String.</diag>
<diag id="516" sev="1" tool="PMD" rule="AvoidLiteralsInIfCondition">Avoid using Literals in Conditional Statements</diag>
<diag id="517" sev="1" tool="PMD" rule="ConsecutiveLiteralAppends">StringBuffer (or StringBuilder).append is called 2 consecutive times with literal Strings. Use a single append with a single combined String.</diag>
<diag id="518" sev="1" tool="PMD" rule="ConsecutiveLiteralAppends">StringBuffer (or StringBuilder).append is called 2 consecutive times with literal Strings. Use a single append with a single combined String.</diag>
<diag id="519" sev="1" tool="PMD" rule="ConsecutiveLiteralAppends">StringBuffer (or StringBuilder).append is called 2 consecutive times with literal Strings. Use a single append with a single combined String.</diag>
<diag id="520" sev="1" tool="PMD" rule="ConsecutiveLiteralAppends">StringBuffer (or StringBuilder).append is called 2 consecutive times with literal Strings. Use a single append with a single combined String.</diag>
<diag id="750" sev="1" tool="PMD-CPD" rule="DoNotCopyAndPasteCode">Duplicate of com\github\sanity4j\report\ExportWriter.java:
	private void writePackage(final String packageName, final StringBuilder xml)
	{
        boolean allPackages = &quot;&quot;.equals(packageName);

        DiagnosticSet diags = null;
        CoverageItf coverage = null;
        int numLines = 0;
        int numExecutableLines = 0;
        int coveredLines = 0;
        int coveredLinePct = 0;
        int coveredBranchPct = 0;
        int branchCount = 0;
        int coveredBranchCount = 0;
        int classCount = 0;

        if (allPackages)
        {
            coverage = stats.getCoverage();
            diags = stats.getDiagnostics();
            numLines = stats.getLineCount();
            classCount = stats.getClassCount();
        }
        else
        {
            coverage = stats.getCoverage().getPackageCoverage(packageName);
            diags = stats.getDiagnostics().getDiagnosticsForPackage(packageName, false);

            numLines = stats.getPackageLineCount(packageName);
            classCount = stats.getPackageClassCount(packageName);
        }

        if (coverage != null)
        {
            coveredLines = (int) Math.round(numLines * coverage.getLineCoverage());
            coveredLinePct = (int) (coverage.getLineCoverage() * HUNDRED);
            coveredBranchPct = (int) (coverage.getBranchCoverage() * HUNDRED);
            coveredLines = coverage.getCoveredLineCount();
            branchCount = coverage.getBranchCount();
            coveredBranchCount = coverage.getCoveredBranchCount();
            numExecutableLines = coverage.getLineCount();
        }</diag>
<diag id="751" sev="1" tool="PMD-CPD" rule="DoNotCopyAndPasteCode">Duplicate of com\github\sanity4j\report\PackageWriter.java:
        html.append(&quot;\&quot; high=\&quot;&quot;).append(diags.getCountForSeverity(Diagnostic.SEVERITY_HIGH))
            .append(&quot;\&quot; significant=\&quot;&quot;).append(diags.getCountForSeverity(Diagnostic.SEVERITY_SIGNIFICANT))
            .append(&quot;\&quot; moderate=\&quot;&quot;).append(diags.getCountForSeverity(Diagnostic.SEVERITY_MODERATE))
            .append(&quot;\&quot; low=\&quot;&quot;).append(diags.getCountForSeverity(Diagnostic.SEVERITY_LOW))
            .append(&quot;\&quot; info=\&quot;&quot;).append(diags.getCountForSeverity(Diagnostic.SEVERITY_INFO))
            .append(&quot;\&quot; quality=\&quot;&quot;).append(qualityPct)
            .append('&quot;');
        
        // Test coverage
        if (numExecutableLines == 0)
        {
            html.append(&quot;/&gt;\n&quot;);
        }
        else
        {
            html.append(&quot;&gt;\n&quot;);
            
            html.append(&quot;&lt;testCoverage lineCoveragePct=\&quot;&quot;).append(coveredLinePct)
                .append(&quot;\&quot; branchCoveragePct=\&quot;&quot;).append(coveredBranchPct)
                .append(&quot;\&quot; lineCount=\&quot;&quot;).append(numExecutableLines)
                .append(&quot;\&quot; coveredLineCount=\&quot;&quot;).append(coveredLines)
                .append(&quot;\&quot; branchCount=\&quot;&quot;).append(branchCount)
                .append(&quot;\&quot; coveredBranchCount=\&quot;&quot;).append(coveredBranchCount)
                .append(&quot;\&quot;/&gt;\n&quot;);
            
            html.append(&quot;&lt;/package&gt;\n&quot;);</diag>
<diag id="752" sev="1" tool="PMD-CPD" rule="DoNotCopyAndPasteCode">Duplicate of com\github\sanity4j\report\PackageWriter.java:
        html.append(&quot;\&quot; high=\&quot;&quot;).append(diags.getCountForSeverity(Diagnostic.SEVERITY_HIGH))
            .append(&quot;\&quot; significant=\&quot;&quot;).append(diags.getCountForSeverity(Diagnostic.SEVERITY_SIGNIFICANT))
            .append(&quot;\&quot; moderate=\&quot;&quot;).append(diags.getCountForSeverity(Diagnostic.SEVERITY_MODERATE))
            .append(&quot;\&quot; low=\&quot;&quot;).append(diags.getCountForSeverity(Diagnostic.SEVERITY_LOW))
            .append(&quot;\&quot; info=\&quot;&quot;).append(diags.getCountForSeverity(Diagnostic.SEVERITY_INFO))
            .append(&quot;\&quot; quality=\&quot;&quot;).append(qualityPct)
            .append('&quot;');
        
        // Test coverage
        if (numExecutableLines == 0)
        {
            html.append(&quot;/&gt;\n&quot;);
        }
        else
        {
            html.append(&quot;&gt;\n&quot;);
            
            html.append(&quot;&lt;testCoverage lineCoveragePct=\&quot;&quot;).append(coveredLinePct)
                .append(&quot;\&quot; branchCoveragePct=\&quot;&quot;).append(coveredBranchPct)
                .append(&quot;\&quot; lineCount=\&quot;&quot;).append(numExecutableLines)
                .append(&quot;\&quot; coveredLineCount=\&quot;&quot;).append(coveredLines)
                .append(&quot;\&quot; branchCount=\&quot;&quot;).append(branchCount)
                .append(&quot;\&quot; coveredBranchCount=\&quot;&quot;).append(coveredBranchCount)
                .append(&quot;\&quot;/&gt;\n&quot;);
            
            html.append(&quot;&lt;/package&gt;\n&quot;);</diag>
<diag id="756" sev="1" tool="PMD-CPD" rule="DoNotCopyAndPasteCode">Duplicate of com\github\sanity4j\report\ExportWriter.java:
        for (String sourcePath : packageSources)
        {
            DiagnosticSet diags = stats.getDiagnostics().getDiagnosticsForFile(sourcePath);
            String className = stats.getClassNameForSourcePath(sourcePath);     
            CoverageItf coverage = stats.getCoverage().getClassCoverage(className);
            
            int numLines = stats.getClassLineCount(className);
            int numExecutableLines = 0;
            int coveredLines = 0;
            int coveredLinePct = 0;
            int coveredBranchPct = 0;
            int branchCount = 0;
            int coveredBranchCount = 0;
            
            if (coverage != null)
            {
                numExecutableLines = coverage.getLineCount();
                coveredLines = coverage.getCoveredLineCount();
                branchCount = coverage.getBranchCount();
                coveredBranchCount = coverage.getCoveredBranchCount();
                coveredLinePct = (int) (coverage.getLineCoverage() * HUNDRED);
                coveredBranchPct = (int) (coverage.getBranchCoverage() * HUNDRED);
            }
            
            
            // Quality
            int qualityPct = (int) (ONE_HUNDRED * ReportUtil.evaluateMetric(&quot;quality&quot;, diags, numLines));</diag>
<diag id="760" sev="1" tool="PMD-CPD" rule="DoNotCopyAndPasteCode">Duplicate of com\github\sanity4j\report\CategoryWriter.java:
        for (Diagnostic diagnostic : category.getDiagnostics())
        {
            String key = diagnostic.getRuleName();
            
            if (key == null)
            {
                key = &quot;(none)&quot;;
            }
            
            List&lt;Diagnostic&gt; list = diagnosticsByRuleName.get(key);
            
            if (list == null)
            {
                list = new ArrayList&lt;Diagnostic&gt;();
                diagnosticsByRuleName.put(key, list);
            }
            
            list.add(diagnostic);
        }
        
        List&lt;String&gt; ruleNames = new ArrayList&lt;String&gt;(diagnosticsByRuleName.keySet());
        Collections.sort(ruleNames);
        
        // Output diagnostics (if any)
        for (String ruleName : ruleNames)
        {
            List&lt;Diagnostic&gt; diagnosticsForRule = diagnosticsByRuleName.get(ruleName);
            Diagnostic firstDiag = diagnosticsForRule.get(0);</diag>
</class>
<class name="ReportUtil" lineCount="208" high="0" significant="1" moderate="1" low="0" info="1" quality="87">
<testCoverage lineCoveragePct="77" branchCoveragePct="100" lineCount="59" coveredLineCount="46" branchCount="7" coveredBranchCount="7"/>
<diag id="308" sev="3" tool="SpotBugs" rule="DMI_HARDCODED_ABSOLUTE_FILENAME">Hard coded reference to an absolute pathname in com.github.sanity4j.report.ReportUtil.&lt;static initializer for ReportUtil&gt;()</diag>
<diag id="521" sev="2" tool="PMD" rule="AssignmentInOperand">Avoid assignments in operands</diag>
<diag id="522" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
</class>
<class name="ReportUtil_Test" lineCount="109" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
<testCoverage lineCoveragePct="94" branchCoveragePct="0" lineCount="57" coveredLineCount="54" branchCount="0" coveredBranchCount="0"/>
</class>
<class name="ReportWriter" lineCount="219" high="0" significant="0" moderate="0" low="1" info="2" quality="99">
<diag id="529" sev="0" tool="PMD" rule="AvoidDeeplyNestedIfStmts">Deeply nested if..then statements are hard to read</diag>
<diag id="530" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="531" sev="1" tool="PMD" rule="InsufficientStringBufferDeclaration">StringBuffer constructor is initialized with size 16, but has at least 250 characters appended.</diag>
</class>
<class name="RuleCatalogueWriter" lineCount="231" high="0" significant="0" moderate="0" low="0" info="5" quality="100">
<diag id="533" sev="0" tool="PMD" rule="AvoidInstantiatingObjectsInLoops">Avoid instantiating new objects inside loops</diag>
<diag id="534" sev="0" tool="PMD" rule="AccessorMethodGeneration">Avoid autogenerated methods to access private fields and methods of inner / outer classes</diag>
<diag id="535" sev="0" tool="PMD" rule="AccessorMethodGeneration">Avoid autogenerated methods to access private fields and methods of inner / outer classes</diag>
<diag id="536" sev="0" tool="PMD" rule="AccessorMethodGeneration">Avoid autogenerated methods to access private fields and methods of inner / outer classes</diag>
<diag id="537" sev="0" tool="PMD" rule="AccessorMethodGeneration">Avoid autogenerated methods to access private fields and methods of inner / outer classes</diag>
</class>
</package>
<package name="com.github.sanity4j.model.coverage" classes="8" lineCount="905" high="0" significant="0" moderate="0" low="1" info="0" quality="99">
<testCoverage lineCoveragePct="99" branchCoveragePct="93" lineCount="266" coveredLineCount="264" branchCount="15" coveredBranchCount="14"/>
<class name="AbstractCoverage" lineCount="49" high="0" significant="0" moderate="0" low="1" info="0" quality="95">
<testCoverage lineCoveragePct="100" branchCoveragePct="0" lineCount="7" coveredLineCount="7" branchCount="0" coveredBranchCount="0"/>
<diag id="13" sev="1" tool="Checkstyle" rule="JavadocPackageCheck">Missing package-info.java file.</diag>
</class>
<class name="ClassCoverage" lineCount="148" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
<testCoverage lineCoveragePct="91" branchCoveragePct="80" lineCount="24" coveredLineCount="22" branchCount="5" coveredBranchCount="4"/>
</class>
<class name="ClassCoverage_Test" lineCount="119" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
<testCoverage lineCoveragePct="100" branchCoveragePct="0" lineCount="51" coveredLineCount="51" branchCount="0" coveredBranchCount="0"/>
</class>
<class name="Coverage" lineCount="137" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
<testCoverage lineCoveragePct="100" branchCoveragePct="91" lineCount="34" coveredLineCount="34" branchCount="6" coveredBranchCount="6"/>
</class>
<class name="CoverageItf" lineCount="41" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
</class>
<class name="Coverage_Test" lineCount="137" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
<testCoverage lineCoveragePct="100" branchCoveragePct="0" lineCount="61" coveredLineCount="61" branchCount="0" coveredBranchCount="0"/>
</class>
<class name="PackageCoverage" lineCount="139" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
<testCoverage lineCoveragePct="100" branchCoveragePct="100" lineCount="30" coveredLineCount="30" branchCount="4" coveredBranchCount="4"/>
</class>
<class name="PackageCoverage_Test" lineCount="135" high="0" significant="0" moderate="0" low="0" info="0" quality="100">
<testCoverage lineCoveragePct="100" branchCoveragePct="0" lineCount="59" coveredLineCount="59" branchCount="0" coveredBranchCount="0"/>
</class>
</package>
</package>
</package>
</export>
